{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthError, PerformanceEvents, Constants, StringUtils, PromptValue, UrlString, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionType } from '../utils/BrowserConstants.js';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentIframeClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentIframeClient, _super);\n\n  function SilentIframeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n\n    _this.apiId = apiId;\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\r\n   * @param request\r\n   */\n\n\n  SilentIframeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenMeasurement, silentRequest, serverTelemetryManager, authClient, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\n            this.logger.verbose(\"acquireTokenByIframe called\");\n            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId); // Check that we have some SSO data\n\n            if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {\n              this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n            } // Check that prompt is set to none or no_session, throw error if it is set to anything else.\n\n\n            if (request.prompt && request.prompt !== PromptValue.NONE && request.prompt !== PromptValue.NO_SESSION) {\n              acquireTokenMeasurement.endMeasurement({\n                success: false\n              });\n              throw BrowserAuthError.createSilentPromptValueError(request.prompt);\n            } // Create silent request\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(__assign(__assign({}, request), {\n              prompt: request.prompt || PromptValue.NONE\n            }), InteractionType.Silent)];\n\n          case 1:\n            silentRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 5,, 6]); // Initialize the client\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentIframeClientTokenHelper, request.correlationId);\n            return [4\n            /*yield*/\n            , this.silentTokenHelper(authClient, silentRequest).then(function (result) {\n              acquireTokenMeasurement.endMeasurement({\n                success: true,\n                fromCache: false,\n                requestId: result.requestId\n              });\n              return result;\n            })];\n\n          case 4:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 5:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            acquireTokenMeasurement.endMeasurement({\n              errorCode: e_1 instanceof AuthError && e_1.errorCode || undefined,\n              subErrorCode: e_1 instanceof AuthError && e_1.subError || undefined,\n              success: false\n            });\n            throw e_1;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentIframeClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Helper which acquires an authorization code silently using a hidden iframe from given url\r\n   * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\r\n   * @param navigateUrl\r\n   * @param userRequestScopes\r\n   */\n\n\n  SilentIframeClient.prototype.silentTokenHelper = function (authClient, silentRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authCodeRequest, navigateUrl, silentHandler, msalFrame, hash, serverParams, state, nativeInteractionClient, userRequestState;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientTokenHelper, silentRequest.correlationId); // Create auth code request and generate PKCE params\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, silentRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(silentRequest)];\n\n          case 1:\n            authCodeRequest = _a.sent(); // Create authorize request url\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.GetAuthCodeUrl, silentRequest.correlationId);\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(__assign(__assign({}, silentRequest), {\n              nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)\n            }))];\n\n          case 2:\n            navigateUrl = _a.sent();\n            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient); // Get the frame handle for the silent request\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerInitiateAuthRequest, silentRequest.correlationId);\n            return [4\n            /*yield*/\n            , silentHandler.initiateAuthRequest(navigateUrl)];\n\n          case 3:\n            msalFrame = _a.sent(); // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerMonitorIframeForHash, silentRequest.correlationId);\n            return [4\n            /*yield*/\n            , silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout)];\n\n          case 4:\n            hash = _a.sent();\n            serverParams = UrlString.getDeserializedHash(hash);\n            state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Silent, authCodeRequest.correlationId);\n\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, this.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state).userRequestState;\n              return [2\n              /*return*/\n              , nativeInteractionClient.acquireToken(__assign(__assign({}, silentRequest), {\n                state: userRequestState,\n                prompt: silentRequest.prompt || PromptValue.NONE\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state);\n              })];\n            } // Handle response from hash string\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromHash, silentRequest.correlationId);\n            return [2\n            /*return*/\n            , silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\n        }\n      });\n    });\n  };\n\n  return SilentIframeClient;\n}(StandardInteractionClient);\n\nexport { SilentIframeClient };","map":{"version":3,"mappings":"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","names":["__extends","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","_super","_this","nativeStorage","SilentIframeClient","request","addQueueMeasurement","PerformanceEvents","SilentIframeClientAcquireToken","verbose","acquireTokenMeasurement","startMeasurement","StringUtils","isEmpty","loginHint","sid","account","username","warning","prompt","PromptValue","NONE","NO_SESSION","endMeasurement","success","BrowserAuthError","createSilentPromptValueError","setPreQueueTime","StandardInteractionClientInitializeAuthorizationRequest","initializeAuthorizationRequest","__assign","InteractionType","Silent","silentRequest","_a","browserStorage","updateCacheEntries","state","nonce","authority","Constants","EMPTY_STRING","serverTelemetryManager","initializeServerTelemetryManager","StandardInteractionClientCreateAuthCodeClient","createAuthCodeClient","azureCloudOptions","authClient","SilentIframeClientTokenHelper","silentTokenHelper","then","result","fromCache","requestId","e_1","AuthError","setCorrelationId","cacheFailedRequest","cleanRequestByState","errorCode","undefined","subErrorCode","subError","Promise","reject","createSilentLogoutUnsupportedError","StandardInteractionClientInitializeAuthorizationCodeRequest","initializeAuthorizationCodeRequest","authCodeRequest","GetAuthCodeUrl","getAuthCodeUrl","nativeBroker","NativeMessageHandler","isNativeAvailable","authenticationScheme","navigateUrl","silentHandler","SilentHandler","system","SilentHandlerInitiateAuthRequest","initiateAuthRequest","msalFrame","SilentHandlerMonitorIframeForHash","monitorIframeForHash","iframeHashTimeout","hash","serverParams","UrlString","getDeserializedHash","validateAndExtractStateFromHash","accountId","createNativeConnectionNotEstablishedError","nativeInteractionClient","NativeInteractionClient","userRequestState","ProtocolUtils","parseRequestState","acquireToken","finally","HandleCodeResponseFromHash","handleCodeResponseFromHash","networkClient","StandardInteractionClient"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-browser/src/interaction_client/SilentIframeClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthenticationResult, ICrypto, Logger, StringUtils, PromptValue, CommonAuthorizationCodeRequest, AuthorizationCodeClient, AuthError, Constants, UrlString, ServerAuthorizationCodeResponse, ProtocolUtils, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\r\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\r\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\r\n\r\nexport class SilentIframeClient extends StandardInteractionClient {\r\n    protected apiId: ApiId;\r\n    protected nativeStorage: BrowserCacheManager;\r\n\r\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, performanceClient: IPerformanceClient, nativeStorageImpl: BrowserCacheManager, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\r\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\r\n        this.apiId = apiId;\r\n        this.nativeStorage = nativeStorageImpl;\r\n    }\r\n\r\n    /**\r\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\r\n     * @param request\r\n     */\r\n    async acquireToken(request: SsoSilentRequest): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\r\n        this.logger.verbose(\"acquireTokenByIframe called\");\r\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\r\n        // Check that we have some SSO data\r\n        if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {\r\n            this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\r\n        }\r\n\r\n        // Check that prompt is set to none or no_session, throw error if it is set to anything else.\r\n        if (request.prompt && (request.prompt !== PromptValue.NONE) && (request.prompt !== PromptValue.NO_SESSION)) {\r\n            acquireTokenMeasurement.endMeasurement({\r\n                success: false\r\n            });\r\n            throw BrowserAuthError.createSilentPromptValueError(request.prompt);\r\n        }\r\n\r\n        // Create silent request\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\r\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest({\r\n            ...request,\r\n            prompt: request.prompt || PromptValue.NONE\r\n        }, InteractionType.Silent);\r\n        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\r\n\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\r\n\r\n        try {\r\n            // Initialize the client\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\r\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentIframeClientTokenHelper, request.correlationId);\r\n            return await this.silentTokenHelper(authClient, silentRequest).then((result: AuthenticationResult) => {\r\n                acquireTokenMeasurement.endMeasurement({\r\n                    success: true,\r\n                    fromCache: false,\r\n                    requestId: result.requestId\r\n                });\r\n                return result;\r\n            });\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.browserStorage.cleanRequestByState(silentRequest.state);\r\n            acquireTokenMeasurement.endMeasurement({\r\n                errorCode: e instanceof AuthError && e.errorCode || undefined,\r\n                subErrorCode: e instanceof AuthError && e.subError || undefined,\r\n                success: false\r\n            });\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Currently Unsupported\r\n     */\r\n    logout(): Promise<void> {\r\n        // Synchronous so we must reject\r\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\r\n    }\r\n\r\n    /**\r\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\r\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\r\n     * @param navigateUrl\r\n     * @param userRequestScopes\r\n     */\r\n    protected async silentTokenHelper(authClient: AuthorizationCodeClient, silentRequest: AuthorizationUrlRequest): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientTokenHelper, silentRequest.correlationId);\r\n\r\n        // Create auth code request and generate PKCE params\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, silentRequest.correlationId);\r\n        const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(silentRequest);\r\n        // Create authorize request url\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.GetAuthCodeUrl, silentRequest.correlationId);\r\n        const navigateUrl = await authClient.getAuthCodeUrl({\r\n            ...silentRequest,\r\n            nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)\r\n        });\r\n\r\n        // Create silent handler\r\n        const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient);\r\n        // Get the frame handle for the silent request\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerInitiateAuthRequest, silentRequest.correlationId);\r\n        const msalFrame = await silentHandler.initiateAuthRequest(navigateUrl);\r\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerMonitorIframeForHash, silentRequest.correlationId);\r\n        const hash = await silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout);\r\n        // Deserialize hash fragment response parameters.\r\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\r\n        const state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Silent, authCodeRequest.correlationId);\r\n\r\n        if (serverParams.accountId) {\r\n            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\r\n            if (!this.nativeMessageHandler) {\r\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\r\n            }\r\n            const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, this.correlationId);\r\n            const { userRequestState } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\r\n            return nativeInteractionClient.acquireToken({\r\n                ...silentRequest,\r\n                state: userRequestState,\r\n                prompt: silentRequest.prompt || PromptValue.NONE\r\n            }).finally(() => {\r\n                this.browserStorage.cleanRequestByState(state);\r\n            });\r\n        }\r\n\r\n        // Handle response from hash string\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromHash, silentRequest.correlationId);\r\n        return silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}