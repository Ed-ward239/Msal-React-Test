{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, StringUtils, Constants, UrlString } from '@azure/msal-common';\nimport { InteractionHandler } from './InteractionHandler.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { DEFAULT_IFRAME_TIMEOUT_MS } from '../config/Configuration.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentHandler =\n/** @class */\nfunction (_super) {\n  __extends(SilentHandler, _super);\n\n  function SilentHandler(authCodeModule, storageImpl, authCodeRequest, logger, systemOptions, performanceClient) {\n    var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, logger, performanceClient) || this;\n\n    _this.navigateFrameWait = systemOptions.navigateFrameWait;\n    _this.pollIntervalMilliseconds = systemOptions.pollIntervalMilliseconds;\n    return _this;\n  }\n  /**\r\n   * Creates a hidden iframe to given URL using user-requested scopes as an id.\r\n   * @param urlNavigate\r\n   * @param userRequestScopes\r\n   */\n\n\n  SilentHandler.prototype.initiateAuthRequest = function (requestUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerInitiateAuthRequest, this.authCodeRequest.correlationId);\n\n            if (StringUtils.isEmpty(requestUrl)) {\n              // Throw error if request URL is empty.\n              this.logger.info(\"Navigate url is empty\");\n              throw BrowserAuthError.createEmptyNavigationUriError();\n            }\n\n            if (!this.navigateFrameWait) return [3\n            /*break*/\n            , 2];\n            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerLoadFrame, this.authCodeRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.loadFrame(requestUrl)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [2\n            /*return*/\n            , this.loadFrameSync(requestUrl)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\r\n   * @param iframe\r\n   * @param timeout\r\n   */\n\n\n  SilentHandler.prototype.monitorIframeForHash = function (iframe, timeout) {\n    var _this = this;\n\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerMonitorIframeForHash, this.authCodeRequest.correlationId);\n    return new Promise(function (resolve, reject) {\n      if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {\n        _this.logger.warning(\"system.loadFrameTimeout or system.iframeHashTimeout set to lower (\" + timeout + \"ms) than the default (\" + DEFAULT_IFRAME_TIMEOUT_MS + \"ms). This may result in timeouts.\");\n      }\n      /*\r\n       * Polling for iframes can be purely timing based,\r\n       * since we don't need to account for interaction.\r\n       */\n\n\n      var nowMark = window.performance.now();\n      var timeoutMark = nowMark + timeout;\n      var intervalId = setInterval(function () {\n        if (window.performance.now() > timeoutMark) {\n          _this.removeHiddenIframe(iframe);\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createMonitorIframeTimeoutError());\n          return;\n        }\n\n        var href = Constants.EMPTY_STRING;\n        var contentWindow = iframe.contentWindow;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = contentWindow ? contentWindow.location.href : Constants.EMPTY_STRING;\n        } catch (e) {}\n\n        if (StringUtils.isEmpty(href)) {\n          return;\n        }\n\n        var contentHash = contentWindow ? contentWindow.location.hash : Constants.EMPTY_STRING;\n\n        if (UrlString.hashContainsKnownProperties(contentHash)) {\n          // Success case\n          _this.removeHiddenIframe(iframe);\n\n          clearInterval(intervalId);\n          resolve(contentHash);\n          return;\n        }\n      }, _this.pollIntervalMilliseconds);\n    });\n  };\n  /**\r\n   * @hidden\r\n   * Loads iframe with authorization endpoint URL\r\n   * @ignore\r\n   */\n\n\n  SilentHandler.prototype.loadFrame = function (urlNavigate) {\n    var _this = this;\n\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerLoadFrame, this.authCodeRequest.correlationId);\n    /*\r\n     * This trick overcomes iframe navigation in IE\r\n     * IE does not load the page consistently in iframe\r\n     */\n\n    return new Promise(function (resolve, reject) {\n      var frameHandle = _this.createHiddenIframe();\n\n      setTimeout(function () {\n        if (!frameHandle) {\n          reject(\"Unable to load iframe\");\n          return;\n        }\n\n        frameHandle.src = urlNavigate;\n        resolve(frameHandle);\n      }, _this.navigateFrameWait);\n    });\n  };\n  /**\r\n   * @hidden\r\n   * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\r\n   * @param urlNavigate\r\n   * @param frameName\r\n   * @param logger\r\n   */\n\n\n  SilentHandler.prototype.loadFrameSync = function (urlNavigate) {\n    var frameHandle = this.createHiddenIframe();\n    frameHandle.src = urlNavigate;\n    return frameHandle;\n  };\n  /**\r\n   * @hidden\r\n   * Creates a new hidden iframe or gets an existing one for silent token renewal.\r\n   * @ignore\r\n   */\n\n\n  SilentHandler.prototype.createHiddenIframe = function () {\n    var authFrame = document.createElement(\"iframe\");\n    authFrame.style.visibility = \"hidden\";\n    authFrame.style.position = \"absolute\";\n    authFrame.style.width = authFrame.style.height = \"0\";\n    authFrame.style.border = \"0\";\n    authFrame.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\n    document.getElementsByTagName(\"body\")[0].appendChild(authFrame);\n    return authFrame;\n  };\n  /**\r\n   * @hidden\r\n   * Removes a hidden iframe from the page.\r\n   * @ignore\r\n   */\n\n\n  SilentHandler.prototype.removeHiddenIframe = function (iframe) {\n    if (document.body === iframe.parentNode) {\n      document.body.removeChild(iframe);\n    }\n  };\n\n  return SilentHandler;\n}(InteractionHandler);\n\nexport { SilentHandler };","map":{"version":3,"mappings":"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","names":["__extends","authCodeModule","storageImpl","authCodeRequest","logger","systemOptions","performanceClient","_super","_this","navigateFrameWait","pollIntervalMilliseconds","SilentHandler","requestUrl","addQueueMeasurement","PerformanceEvents","SilentHandlerInitiateAuthRequest","correlationId","StringUtils","isEmpty","info","BrowserAuthError","createEmptyNavigationUriError","setPreQueueTime","SilentHandlerLoadFrame","loadFrame","_a","loadFrameSync","iframe","timeout","SilentHandlerMonitorIframeForHash","Promise","resolve","reject","DEFAULT_IFRAME_TIMEOUT_MS","warning","nowMark","window","performance","now","timeoutMark","intervalId","setInterval","removeHiddenIframe","clearInterval","createMonitorIframeTimeoutError","href","Constants","EMPTY_STRING","contentWindow","location","e","contentHash","hash","UrlString","hashContainsKnownProperties","urlNavigate","frameHandle","createHiddenIframe","setTimeout","src","authFrame","document","createElement","style","visibility","position","width","height","border","setAttribute","getElementsByTagName","appendChild","body","parentNode","removeChild","InteractionHandler"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-browser/src/interaction_handler/SilentHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { UrlString, StringUtils, CommonAuthorizationCodeRequest, AuthorizationCodeClient, Constants, Logger, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { InteractionHandler } from \"./InteractionHandler\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { BrowserSystemOptions, DEFAULT_IFRAME_TIMEOUT_MS } from \"../config/Configuration\";\r\n\r\nexport class SilentHandler extends InteractionHandler {\r\n\r\n    private navigateFrameWait: number;\r\n    private pollIntervalMilliseconds: number;\r\n\r\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, logger: Logger, systemOptions: Required<Pick<BrowserSystemOptions, \"navigateFrameWait\" | \"pollIntervalMilliseconds\">>, performanceClient: IPerformanceClient) {\r\n        super(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient);\r\n        this.navigateFrameWait = systemOptions.navigateFrameWait;\r\n        this.pollIntervalMilliseconds = systemOptions.pollIntervalMilliseconds;\r\n    }\r\n\r\n    /**\r\n     * Creates a hidden iframe to given URL using user-requested scopes as an id.\r\n     * @param urlNavigate\r\n     * @param userRequestScopes\r\n     */\r\n    async initiateAuthRequest(requestUrl: string): Promise<HTMLIFrameElement> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerInitiateAuthRequest, this.authCodeRequest.correlationId);\r\n\r\n        if (StringUtils.isEmpty(requestUrl)) {\r\n            // Throw error if request URL is empty.\r\n            this.logger.info(\"Navigate url is empty\");\r\n            throw BrowserAuthError.createEmptyNavigationUriError();\r\n        }\r\n\r\n        if (this.navigateFrameWait) {\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerLoadFrame, this.authCodeRequest.correlationId);\r\n            return await this.loadFrame(requestUrl);\r\n        }\r\n        return this.loadFrameSync(requestUrl);\r\n    }\r\n\r\n    /**\r\n     * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\r\n     * @param iframe\r\n     * @param timeout\r\n     */\r\n    monitorIframeForHash(iframe: HTMLIFrameElement, timeout: number): Promise<string> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerMonitorIframeForHash, this.authCodeRequest.correlationId);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {\r\n                this.logger.warning(`system.loadFrameTimeout or system.iframeHashTimeout set to lower (${timeout}ms) than the default (${DEFAULT_IFRAME_TIMEOUT_MS}ms). This may result in timeouts.`);\r\n            }\r\n\r\n            /*\r\n             * Polling for iframes can be purely timing based,\r\n             * since we don't need to account for interaction.\r\n             */\r\n            const nowMark = window.performance.now();\r\n            const timeoutMark = nowMark + timeout;\r\n\r\n            const intervalId = setInterval(() => {\r\n                if (window.performance.now() > timeoutMark) {\r\n                    this.removeHiddenIframe(iframe);\r\n                    clearInterval(intervalId);\r\n                    reject(BrowserAuthError.createMonitorIframeTimeoutError());\r\n                    return;\r\n                }\r\n\r\n                let href: string = Constants.EMPTY_STRING;\r\n                const contentWindow = iframe.contentWindow;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = contentWindow ? contentWindow.location.href : Constants.EMPTY_STRING;\r\n                } catch (e) {}\r\n\r\n                if (StringUtils.isEmpty(href)) {\r\n                    return;\r\n                }\r\n\r\n                const contentHash = contentWindow ? contentWindow.location.hash: Constants.EMPTY_STRING;\r\n                if (UrlString.hashContainsKnownProperties(contentHash)) {\r\n                    // Success case\r\n                    this.removeHiddenIframe(iframe);\r\n                    clearInterval(intervalId);\r\n                    resolve(contentHash);\r\n                    return;\r\n                }\r\n            }, this.pollIntervalMilliseconds);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Loads iframe with authorization endpoint URL\r\n     * @ignore\r\n     */\r\n    private loadFrame(urlNavigate: string): Promise<HTMLIFrameElement> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerLoadFrame, this.authCodeRequest.correlationId);\r\n\r\n        /*\r\n         * This trick overcomes iframe navigation in IE\r\n         * IE does not load the page consistently in iframe\r\n         */\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const frameHandle = this.createHiddenIframe();\r\n\r\n            setTimeout(() => {\r\n                if (!frameHandle) {\r\n                    reject(\"Unable to load iframe\");\r\n                    return;\r\n                }\r\n\r\n                frameHandle.src = urlNavigate;\r\n\r\n                resolve(frameHandle);\r\n            }, this.navigateFrameWait);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\r\n     * @param urlNavigate\r\n     * @param frameName\r\n     * @param logger\r\n     */\r\n    private loadFrameSync(urlNavigate: string): HTMLIFrameElement{\r\n        const frameHandle = this.createHiddenIframe();\r\n\r\n        frameHandle.src = urlNavigate;\r\n\r\n        return frameHandle;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Creates a new hidden iframe or gets an existing one for silent token renewal.\r\n     * @ignore\r\n     */\r\n    private createHiddenIframe(): HTMLIFrameElement {\r\n        const authFrame = document.createElement(\"iframe\");\r\n\r\n        authFrame.style.visibility = \"hidden\";\r\n        authFrame.style.position = \"absolute\";\r\n        authFrame.style.width = authFrame.style.height = \"0\";\r\n        authFrame.style.border = \"0\";\r\n        authFrame.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\r\n        document.getElementsByTagName(\"body\")[0].appendChild(authFrame);\r\n\r\n        return authFrame;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Removes a hidden iframe from the page.\r\n     * @ignore\r\n     */\r\n    private removeHiddenIframe(iframe: HTMLIFrameElement): void {\r\n        if (document.body === iframe.parentNode) {\r\n            document.body.removeChild(iframe);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}