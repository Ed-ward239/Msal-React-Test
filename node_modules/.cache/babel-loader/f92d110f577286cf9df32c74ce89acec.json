{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, StringUtils, ClientAuthError, ServerError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\n\nvar InteractionHandler =\n/** @class */\nfunction () {\n  function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient) {\n    this.authModule = authCodeModule;\n    this.browserStorage = storageImpl;\n    this.authCodeRequest = authCodeRequest;\n    this.logger = logger;\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Function to handle response parameters from hash.\r\n   * @param locationHash\r\n   */\n\n\n  InteractionHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse;\n      return __generator(this, function (_a) {\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromHash, this.authCodeRequest.correlationId);\n        this.logger.verbose(\"InteractionHandler.handleCodeResponse called\"); // Check that location hash isn't empty.\n\n        if (StringUtils.isEmpty(locationHash)) {\n          throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n\n        stateKey = this.browserStorage.generateStateKey(state);\n        requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n        if (!requestState) {\n          throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n\n        try {\n          authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n        } catch (e) {\n          if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n            // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n            throw BrowserAuthError.createUserCancelledError();\n          } else {\n            throw e;\n          }\n        }\n\n        this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\n        return [2\n        /*return*/\n        , this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule)];\n      });\n    });\n  };\n  /**\r\n   * Process auth code response from AAD\r\n   * @param authCodeResponse\r\n   * @param state\r\n   * @param authority\r\n   * @param networkModule\r\n   * @returns\r\n   */\n\n\n  InteractionHandler.prototype.handleCodeResponseFromServer = function (authCodeResponse, state, authority, networkModule, validateNonce) {\n    if (validateNonce === void 0) {\n      validateNonce = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\n            this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey); // Assign code to request\n\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3\n            /*break*/\n            , 2];\n            this.performanceClient.setPreQueueTime(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n            if (validateNonce) {\n              authCodeResponse.nonce = cachedNonce || undefined;\n            }\n\n            authCodeResponse.state = requestState; // Add CCS parameters if available\n\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            } // Acquire token with retrieved code.\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AuthClientAcquireToken, this.authCodeRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates authority based on cloudInstanceHostname\r\n   * @param cloudInstanceHostname\r\n   * @param authority\r\n   * @param networkModule\r\n   */\n\n\n  InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cloudInstanceAuthorityUri, cloudInstanceAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\n            cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options, this.logger, this.performanceClient, this.authCodeRequest.correlationId)];\n\n          case 1:\n            cloudInstanceAuthority = _a.sent();\n            this.authModule.updateAuthority(cloudInstanceAuthority);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Looks up ccs creds in the cache\r\n   */\n\n\n  InteractionHandler.prototype.checkCcsCredentials = function () {\n    // Look up ccs credential in temp cache\n    var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n\n    if (cachedCcsCred) {\n      try {\n        return JSON.parse(cachedCcsCred);\n      } catch (e) {\n        this.authModule.logger.error(\"Cache credential could not be parsed\");\n        this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\n      }\n    }\n\n    return null;\n  };\n\n  return InteractionHandler;\n}();\n\nexport { InteractionHandler };","map":{"version":3,"mappings":"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","names":["authCodeModule","storageImpl","authCodeRequest","logger","performanceClient","authModule","browserStorage","InteractionHandler","locationHash","state","authority","networkModule","addQueueMeasurement","PerformanceEvents","HandleCodeResponseFromHash","correlationId","verbose","StringUtils","isEmpty","BrowserAuthError","createEmptyHashError","stateKey","generateStateKey","requestState","getTemporaryCache","ClientAuthError","createStateNotFoundError","authCodeResponse","handleFragmentResponse","e","ServerError","subError","BrowserAuthErrorMessage","userCancelledError","code","createUserCancelledError","setPreQueueTime","HandleCodeResponseFromServer","handleCodeResponseFromServer","validateNonce","trace","nonceKey","generateNonceKey","cachedNonce","cloud_instance_host_name","UpdateTokenEndpointAuthority","updateTokenEndpointAuthority","_a","nonce","undefined","client_info","clientInfo","cachedCcsCred","checkCcsCredentials","ccsCredential","AuthClientAcquireToken","acquireToken","tokenResponse","cleanRequestByState","cloudInstanceHostname","cloudInstanceAuthorityUri","tenant","AuthorityFactory","createDiscoveredInstance","options","cloudInstanceAuthority","updateAuthority","TemporaryCacheKeys","CCS_CREDENTIAL","JSON","parse","error","errorPii"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-browser/src/interaction_handler/InteractionHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthorizationCodePayload, StringUtils, CommonAuthorizationCodeRequest, AuthenticationResult, AuthorizationCodeClient, AuthorityFactory, Authority, INetworkModule, ClientAuthError, CcsCredential, Logger, ServerError, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\r\n\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\r\nimport { TemporaryCacheKeys } from \"../utils/BrowserConstants\";\r\n\r\nexport type InteractionParams = {};\r\n\r\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\r\nexport class InteractionHandler {\r\n\r\n    protected authModule: AuthorizationCodeClient;\r\n    protected browserStorage: BrowserCacheManager;\r\n    protected authCodeRequest: CommonAuthorizationCodeRequest;\r\n    protected logger: Logger;\r\n    protected performanceClient: IPerformanceClient;\r\n\r\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, logger: Logger, performanceClient: IPerformanceClient) {\r\n        this.authModule = authCodeModule;\r\n        this.browserStorage = storageImpl;\r\n        this.authCodeRequest = authCodeRequest;\r\n        this.logger = logger;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n\r\n    /**\r\n     * Function to handle response parameters from hash.\r\n     * @param locationHash\r\n     */\r\n    async handleCodeResponseFromHash(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromHash, this.authCodeRequest.correlationId);\r\n        this.logger.verbose(\"InteractionHandler.handleCodeResponse called\");\r\n        // Check that location hash isn't empty.\r\n        if (StringUtils.isEmpty(locationHash)) {\r\n            throw BrowserAuthError.createEmptyHashError(locationHash);\r\n        }\r\n\r\n        // Handle code response.\r\n        const stateKey = this.browserStorage.generateStateKey(state);\r\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n        if (!requestState) {\r\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n        }\r\n\r\n        let authCodeResponse;\r\n        try {\r\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\r\n        } catch (e) {\r\n            if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\r\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\r\n                throw BrowserAuthError.createUserCancelledError();\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\r\n        return this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule);\r\n    }\r\n\r\n    /**\r\n     * Process auth code response from AAD\r\n     * @param authCodeResponse \r\n     * @param state \r\n     * @param authority \r\n     * @param networkModule \r\n     * @returns \r\n     */\r\n    async handleCodeResponseFromServer(authCodeResponse: AuthorizationCodePayload, state: string, authority: Authority, networkModule: INetworkModule, validateNonce: boolean = true): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\r\n        this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\r\n\r\n        // Handle code response.\r\n        const stateKey = this.browserStorage.generateStateKey(state);\r\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n        if (!requestState) {\r\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n        }\r\n\r\n        // Get cached items\r\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\r\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\r\n\r\n        // Assign code to request\r\n        this.authCodeRequest.code = authCodeResponse.code;\r\n\r\n        // Check for new cloud instance\r\n        if (authCodeResponse.cloud_instance_host_name) {\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\r\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\r\n        }\r\n\r\n        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\r\n        if (validateNonce) {\r\n            authCodeResponse.nonce = cachedNonce || undefined;\r\n        }\r\n\r\n        authCodeResponse.state = requestState;\r\n\r\n        // Add CCS parameters if available\r\n        if (authCodeResponse.client_info) {\r\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\r\n        } else {\r\n            const cachedCcsCred = this.checkCcsCredentials();\r\n            if (cachedCcsCred) {\r\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\r\n            }\r\n        }\r\n\r\n        // Acquire token with retrieved code.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.AuthClientAcquireToken, this.authCodeRequest.correlationId);\r\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\r\n        this.browserStorage.cleanRequestByState(state);\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * Updates authority based on cloudInstanceHostname\r\n     * @param cloudInstanceHostname \r\n     * @param authority \r\n     * @param networkModule \r\n     */\r\n    protected async updateTokenEndpointAuthority(cloudInstanceHostname: string, authority: Authority, networkModule: INetworkModule): Promise<void> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\r\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${authority.tenant}/`;\r\n        const cloudInstanceAuthority = await AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options, this.logger, this.performanceClient, this.authCodeRequest.correlationId);\r\n        this.authModule.updateAuthority(cloudInstanceAuthority);\r\n    }\r\n\r\n    /**\r\n     * Looks up ccs creds in the cache\r\n     */\r\n    protected checkCcsCredentials(): CcsCredential | null {\r\n        // Look up ccs credential in temp cache\r\n        const cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\r\n        if (cachedCcsCred) {\r\n            try {\r\n                return JSON.parse(cachedCcsCred) as CcsCredential;\r\n            } catch (e) {\r\n                this.authModule.logger.error(\"Cache credential could not be parsed\");\r\n                this.authModule.logger.errorPii(`Cache credential could not be parsed: ${cachedCcsCred}`);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}