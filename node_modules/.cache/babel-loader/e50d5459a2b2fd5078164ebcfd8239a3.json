{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { OIDC_DEFAULT_SCOPES, StringUtils, UrlString, Constants, AuthError, ThrottlingUtils, ProtocolUtils, PerformanceEvents } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserConstants, InteractionType, ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionHandler } from '../interaction_handler/InteractionHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar PopupClient =\n/** @class */\nfunction (_super) {\n  __extends(PopupClient, _super);\n\n  function PopupClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this; // Properly sets this reference for the unload event.\n\n\n    _this.unloadWindow = _this.unloadWindow.bind(_this);\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\r\n   * @param request\r\n   */\n\n\n  PopupClient.prototype.acquireToken = function (request) {\n    try {\n      var popupName = this.generatePopupName(request.scopes || OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);\n      var popupWindowAttributes = request.popupWindowAttributes || {}; // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n\n      if (this.config.system.asyncPopups) {\n        this.logger.verbose(\"asyncPopups set to true, acquiring token\"); // Passes on popup position and dimensions if in request\n\n        return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);\n      } else {\n        // asyncPopups flag is set to false. Opens popup before acquiring token.\n        this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\n        var popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n        return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);\n      }\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n   * @param logoutRequest\r\n   */\n\n\n  PopupClient.prototype.logout = function (logoutRequest) {\n    try {\n      this.logger.verbose(\"logoutPopup called\");\n      var validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n      var popupName = this.generateLogoutPopupName(validLogoutRequest);\n      var authority = logoutRequest && logoutRequest.authority;\n      var mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\n      var popupWindowAttributes = (logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.popupWindowAttributes) || {}; // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n\n      if (this.config.system.asyncPopups) {\n        this.logger.verbose(\"asyncPopups set to true\"); // Passes on popup position and dimensions if in request\n\n        return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);\n      } else {\n        // asyncPopups flag is set to false. Opens popup before logging out.\n        this.logger.verbose(\"asyncPopup set to false, opening popup\");\n        var popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n        return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);\n      }\n    } catch (e) {\n      // Since this function is synchronous we need to reject\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Helper which obtains an access_token for your API via opening a popup window in the user's browser\r\n   * @param validRequest\r\n   * @param popupName\r\n   * @param popup\r\n   * @param popupWindowAttributes\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n\n\n  PopupClient.prototype.acquireTokenPopupAsync = function (request, popupName, popupWindowAttributes, popup) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, validRequest, authCodeRequest, authClient, isNativeBroker, fetchNativeAccountIdMeasurement, navigateUrl, interactionHandler, popupParameters, popupWindow, hash, serverParams, state_1, nativeInteractionClient, userRequestState, result, e_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"acquireTokenPopupAsync called\");\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(request, InteractionType.Popup)];\n\n          case 1:\n            validRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 8,, 9]); // Create auth code request and generate PKCE params\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(validRequest)];\n\n          case 3:\n            authCodeRequest = _a.sent(); // Initialize the client\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\n\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            isNativeBroker = NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);\n            fetchNativeAccountIdMeasurement = void 0;\n\n            if (isNativeBroker) {\n              fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.FetchAccountIdWithNativeBroker, request.correlationId);\n            }\n\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(__assign(__assign({}, validRequest), {\n              nativeBroker: isNativeBroker\n            }))];\n\n          case 5:\n            navigateUrl = _a.sent();\n            interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n            popupParameters = {\n              popup: popup,\n              popupName: popupName,\n              popupWindowAttributes: popupWindowAttributes\n            };\n            popupWindow = this.initiateAuthRequest(navigateUrl, popupParameters);\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n              popupWindow: popupWindow\n            }, null);\n            return [4\n            /*yield*/\n            , this.monitorPopupForHash(popupWindow)];\n\n          case 6:\n            hash = _a.sent();\n            serverParams = UrlString.getDeserializedHash(hash);\n            state_1 = this.validateAndExtractStateFromHash(serverParams, InteractionType.Popup, validRequest.correlationId); // Remove throttle if it exists\n\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\n\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\"); // end measurement for server call with native brokering enabled\n\n              if (fetchNativeAccountIdMeasurement) {\n                fetchNativeAccountIdMeasurement.endMeasurement({\n                  success: true,\n                  isNativeBroker: true\n                });\n              }\n\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state_1).userRequestState;\n              return [2\n              /*return*/\n              , nativeInteractionClient.acquireToken(__assign(__assign({}, validRequest), {\n                state: userRequestState,\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state_1);\n              })];\n            }\n\n            return [4\n            /*yield*/\n            , interactionHandler.handleCodeResponseFromHash(hash, state_1, authClient.authority, this.networkClient)];\n\n          case 7:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n\n          case 8:\n            e_1 = _a.sent();\n\n            if (popup) {\n              // Close the synchronous popup if an error is thrown before the window unload event is registered\n              popup.close();\n            }\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e_1;\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * @param validRequest\r\n   * @param popupName\r\n   * @param requestAuthority\r\n   * @param popup\r\n   * @param mainWindowRedirectUri\r\n   * @param popupWindowAttributes\r\n   */\n\n\n  PopupClient.prototype.logoutPopupAsync = function (validRequest, popupName, popupWindowAttributes, requestAuthority, popup, mainWindowRedirectUri) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, authClient, logoutUri, popupWindow, navigationOptions, absoluteUrl, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"logoutPopupAsync called\");\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 5,, 6]); // Clear cache on logout\n\n\n            return [4\n            /*yield*/\n            , this.clearCacheOnLogout(validRequest.account)];\n\n          case 2:\n            // Clear cache on logout\n            _a.sent(); // Initialize the client\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, requestAuthority)];\n\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            logoutUri = authClient.getLogoutUri(validRequest);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\n            popupWindow = this.openPopup(logoutUri, {\n              popupName: popupName,\n              popupWindowAttributes: popupWindowAttributes,\n              popup: popup\n            });\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n              popupWindow: popupWindow\n            }, null);\n            return [4\n            /*yield*/\n            , this.waitForLogoutPopup(popupWindow)];\n\n          case 4:\n            _a.sent();\n\n            if (mainWindowRedirectUri) {\n              navigationOptions = {\n                apiId: ApiId.logoutPopup,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false\n              };\n              absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());\n              this.logger.verbose(\"Redirecting main window to url specified in the request\");\n              this.logger.verbosePii(\"Redirecting main window to: \" + absoluteUrl);\n              this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n            } else {\n              this.logger.verbose(\"No main window navigation requested\");\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            e_2 = _a.sent();\n\n            if (popup) {\n              // Close the synchronous popup if an error is thrown before the window unload event is registered\n              popup.close();\n            }\n\n            if (e_2 instanceof AuthError) {\n              e_2.setCorrelationId(this.correlationId);\n            }\n\n            this.browserStorage.setInteractionInProgress(false);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e_2);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            serverTelemetryManager.cacheFailedRequest(e_2);\n            throw e_2;\n\n          case 6:\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Opens a popup window with given request Url.\r\n   * @param requestUrl\r\n   */\n\n\n  PopupClient.prototype.initiateAuthRequest = function (requestUrl, params) {\n    // Check that request url is not empty.\n    if (!StringUtils.isEmpty(requestUrl)) {\n      this.logger.infoPii(\"Navigate to: \" + requestUrl); // Open the popup window to requestUrl.\n\n      return this.openPopup(requestUrl, params);\n    } else {\n      // Throw error if request URL is empty.\n      this.logger.error(\"Navigate url is empty\");\n      throw BrowserAuthError.createEmptyNavigationUriError();\n    }\n  };\n  /**\r\n   * Monitors a window until it loads a url with the same origin.\r\n   * @param popupWindow - window that is being monitored\r\n   * @param timeout - timeout for processing hash once popup is redirected back to application\r\n   */\n\n\n  PopupClient.prototype.monitorPopupForHash = function (popupWindow) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      /*\r\n       * Polling for popups needs to be tick-based,\r\n       * since a non-trivial amount of time can be spent on interaction (which should not count against the timeout).\r\n       */\n      var maxTicks = _this.config.system.windowHashTimeout / _this.config.system.pollIntervalMilliseconds;\n      var ticks = 0;\n\n      _this.logger.verbose(\"PopupHandler.monitorPopupForHash - polling started\");\n\n      var intervalId = setInterval(function () {\n        // Window is closed\n        if (popupWindow.closed) {\n          _this.logger.error(\"PopupHandler.monitorPopupForHash - window closed\");\n\n          _this.cleanPopup();\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createUserCancelledError());\n          return;\n        }\n\n        var href = Constants.EMPTY_STRING;\n        var hash = Constants.EMPTY_STRING;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n          hash = popupWindow.location.hash;\n        } catch (e) {} // Don't process blank pages or cross domain\n\n\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n\n        _this.logger.verbose(\"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\");\n        /*\r\n         * Only run clock when we are on same domain for popups\r\n         * as popup operations can take a long time.\r\n         */\n\n\n        ticks++;\n\n        if (hash) {\n          _this.logger.verbose(\"PopupHandler.monitorPopupForHash - found hash in url\");\n\n          clearInterval(intervalId);\n\n          _this.cleanPopup(popupWindow);\n\n          if (UrlString.hashContainsKnownProperties(hash)) {\n            _this.logger.verbose(\"PopupHandler.monitorPopupForHash - hash contains known properties, returning.\");\n\n            resolve(hash);\n          } else {\n            _this.logger.error(\"PopupHandler.monitorPopupForHash - found hash in url but it does not contain known properties. Check that your router is not changing the hash prematurely.\");\n\n            _this.logger.errorPii(\"PopupHandler.monitorPopupForHash - hash found: \" + hash);\n\n            reject(BrowserAuthError.createHashDoesNotContainKnownPropertiesError());\n          }\n        } else if (ticks > maxTicks) {\n          _this.logger.error(\"PopupHandler.monitorPopupForHash - unable to find hash in url, timing out\");\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createMonitorPopupTimeoutError());\n        }\n      }, _this.config.system.pollIntervalMilliseconds);\n    });\n  };\n  /**\r\n   * Waits for user interaction in logout popup window\r\n   * @param popupWindow\r\n   * @returns\r\n   */\n\n\n  PopupClient.prototype.waitForLogoutPopup = function (popupWindow) {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      _this.logger.verbose(\"PopupHandler.waitForLogoutPopup - polling started\");\n\n      var intervalId = setInterval(function () {\n        // Window is closed\n        if (popupWindow.closed) {\n          _this.logger.error(\"PopupHandler.waitForLogoutPopup - window closed\");\n\n          _this.cleanPopup();\n\n          clearInterval(intervalId);\n          resolve();\n        }\n\n        var href = Constants.EMPTY_STRING;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n        } catch (e) {} // Don't process blank pages or cross domain\n\n\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n\n        _this.logger.verbose(\"PopupHandler.waitForLogoutPopup - popup window is on same origin as caller, closing.\");\n\n        clearInterval(intervalId);\n\n        _this.cleanPopup(popupWindow);\n\n        resolve();\n      }, _this.config.system.pollIntervalMilliseconds);\n    });\n  };\n  /**\r\n   * @hidden\r\n   *\r\n   * Configures popup window for login.\r\n   *\r\n   * @param urlNavigate\r\n   * @param title\r\n   * @param popUpWidth\r\n   * @param popUpHeight\r\n   * @param popupWindowAttributes\r\n   * @ignore\r\n   * @hidden\r\n   */\n\n\n  PopupClient.prototype.openPopup = function (urlNavigate, popupParams) {\n    try {\n      var popupWindow = void 0; // Popup window passed in, setting url to navigate to\n\n      if (popupParams.popup) {\n        popupWindow = popupParams.popup;\n        this.logger.verbosePii(\"Navigating popup window to: \" + urlNavigate);\n        popupWindow.location.assign(urlNavigate);\n      } else if (typeof popupParams.popup === \"undefined\") {\n        // Popup will be undefined if it was not passed in\n        this.logger.verbosePii(\"Opening popup window to: \" + urlNavigate);\n        popupWindow = this.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes);\n      } // Popup will be null if popups are blocked\n\n\n      if (!popupWindow) {\n        throw BrowserAuthError.createEmptyWindowCreatedError();\n      }\n\n      if (popupWindow.focus) {\n        popupWindow.focus();\n      }\n\n      this.currentWindow = popupWindow;\n      window.addEventListener(\"beforeunload\", this.unloadWindow);\n      return popupWindow;\n    } catch (e) {\n      this.logger.error(\"error opening popup \" + e.message);\n      this.browserStorage.setInteractionInProgress(false);\n      throw BrowserAuthError.createPopupWindowError(e.toString());\n    }\n  };\n  /**\r\n   * Helper function to set popup window dimensions and position\r\n   * @param urlNavigate\r\n   * @param popupName\r\n   * @param popupWindowAttributes\r\n   * @returns\r\n   */\n\n\n  PopupClient.prototype.openSizedPopup = function (urlNavigate, popupName, popupWindowAttributes) {\n    var _a, _b, _c, _d;\n    /**\r\n     * adding winLeft and winTop to account for dual monitor\r\n     * using screenLeft and screenTop for IE8 and earlier\r\n     */\n\n\n    var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n    var winTop = window.screenTop ? window.screenTop : window.screenY;\n    /**\r\n     * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n     * using document.documentElement.clientWidth for IE8 and earlier\r\n     */\n\n    var winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    var winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    var width = (_a = popupWindowAttributes.popupSize) === null || _a === void 0 ? void 0 : _a.width;\n    var height = (_b = popupWindowAttributes.popupSize) === null || _b === void 0 ? void 0 : _b.height;\n    var top = (_c = popupWindowAttributes.popupPosition) === null || _c === void 0 ? void 0 : _c.top;\n    var left = (_d = popupWindowAttributes.popupPosition) === null || _d === void 0 ? void 0 : _d.left;\n\n    if (!width || width < 0 || width > winWidth) {\n      this.logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n      width = BrowserConstants.POPUP_WIDTH;\n    }\n\n    if (!height || height < 0 || height > winHeight) {\n      this.logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n      height = BrowserConstants.POPUP_HEIGHT;\n    }\n\n    if (!top || top < 0 || top > winHeight) {\n      this.logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n      top = Math.max(0, winHeight / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop);\n    }\n\n    if (!left || left < 0 || left > winWidth) {\n      this.logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n      left = Math.max(0, winWidth / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft);\n    }\n\n    return window.open(urlNavigate, popupName, \"width=\" + width + \", height=\" + height + \", top=\" + top + \", left=\" + left + \", scrollbars=yes\");\n  };\n  /**\r\n   * Event callback to unload main window.\r\n   */\n\n\n  PopupClient.prototype.unloadWindow = function (e) {\n    this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n\n    if (this.currentWindow) {\n      this.currentWindow.close();\n    } // Guarantees browser unload will happen, so no other errors will be thrown.\n\n\n    e.preventDefault();\n  };\n  /**\r\n   * Closes popup, removes any state vars created during popup calls.\r\n   * @param popupWindow\r\n   */\n\n\n  PopupClient.prototype.cleanPopup = function (popupWindow) {\n    if (popupWindow) {\n      // Close window.\n      popupWindow.close();\n    } // Remove window unload function\n\n\n    window.removeEventListener(\"beforeunload\", this.unloadWindow); // Interaction is completed - remove interaction status.\n\n    this.browserStorage.setInteractionInProgress(false);\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupClient.prototype.generatePopupName = function (scopes, authority) {\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + this.config.auth.clientId + \".\" + scopes.join(\"-\") + \".\" + authority + \".\" + this.correlationId;\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request for logouts\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupClient.prototype.generateLogoutPopupName = function (request) {\n    var homeAccountId = request.account && request.account.homeAccountId;\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + this.config.auth.clientId + \".\" + homeAccountId + \".\" + this.correlationId;\n  };\n\n  return PopupClient;\n}(StandardInteractionClient);\n\nexport { PopupClient };","map":{"version":3,"mappings":"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","names":["__extends","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","_super","_this","unloadWindow","bind","nativeStorage","PopupClient","request","popupName","generatePopupName","scopes","OIDC_DEFAULT_SCOPES","authority","auth","popupWindowAttributes","system","asyncPopups","verbose","acquireTokenPopupAsync","popup","openSizedPopup","e","Promise","reject","logoutRequest","validLogoutRequest","initializeLogoutRequest","generateLogoutPopupName","mainWindowRedirectUri","logoutPopupAsync","undefined","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenPopup","setPreQueueTime","PerformanceEvents","StandardInteractionClientInitializeAuthorizationRequest","initializeAuthorizationRequest","InteractionType","Popup","validRequest","_a","browserStorage","updateCacheEntries","state","nonce","loginHint","Constants","EMPTY_STRING","account","StandardInteractionClientInitializeAuthorizationCodeRequest","initializeAuthorizationCodeRequest","authCodeRequest","StandardInteractionClientCreateAuthCodeClient","createAuthCodeClient","azureCloudOptions","authClient","isNativeBroker","NativeMessageHandler","isNativeAvailable","authenticationScheme","fetchNativeAccountIdMeasurement","startMeasurement","FetchAccountIdWithNativeBroker","getAuthCodeUrl","__assign","nativeBroker","navigateUrl","interactionHandler","InteractionHandler","popupParameters","popupWindow","initiateAuthRequest","emitEvent","EventType","POPUP_OPENED","monitorPopupForHash","hash","serverParams","UrlString","getDeserializedHash","state_1","validateAndExtractStateFromHash","ThrottlingUtils","removeThrottle","clientId","accountId","endMeasurement","success","BrowserAuthError","createNativeConnectionNotEstablishedError","nativeInteractionClient","NativeInteractionClient","userRequestState","ProtocolUtils","parseRequestState","acquireToken","prompt","finally","cleanRequestByState","handleCodeResponseFromHash","networkClient","result","close","e_1","AuthError","setCorrelationId","cacheFailedRequest","requestAuthority","LOGOUT_START","logoutPopup","clearCacheOnLogout","logoutUri","getLogoutUri","LOGOUT_SUCCESS","openPopup","waitForLogoutPopup","navigationOptions","apiId","timeout","redirectNavigationTimeout","noHistory","absoluteUrl","getAbsoluteUrl","BrowserUtils","getCurrentUri","verbosePii","navigateInternal","e_2","setInteractionInProgress","LOGOUT_FAILURE","LOGOUT_END","requestUrl","params","StringUtils","isEmpty","infoPii","error","createEmptyNavigationUriError","resolve","maxTicks","windowHashTimeout","pollIntervalMilliseconds","ticks","intervalId","setInterval","closed","cleanPopup","clearInterval","createUserCancelledError","href","location","hashContainsKnownProperties","errorPii","createHashDoesNotContainKnownPropertiesError","createMonitorPopupTimeoutError","urlNavigate","popupParams","assign","createEmptyWindowCreatedError","focus","currentWindow","window","addEventListener","message","createPopupWindowError","toString","winLeft","screenLeft","screenX","winTop","screenTop","screenY","winWidth","innerWidth","document","documentElement","clientWidth","body","winHeight","innerHeight","clientHeight","width","popupSize","height","_b","top","popupPosition","_c","left","_d","BrowserConstants","POPUP_WIDTH","POPUP_HEIGHT","Math","max","open","cleanRequestByInteractionType","preventDefault","removeEventListener","POPUP_NAME_PREFIX","join","homeAccountId","StandardInteractionClient"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-browser/src/interaction_client/PopupClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthenticationResult, CommonAuthorizationCodeRequest, AuthorizationCodeClient, ThrottlingUtils, CommonEndSessionRequest, UrlString, AuthError, OIDC_DEFAULT_SCOPES, Constants, ProtocolUtils, ServerAuthorizationCodeResponse, PerformanceEvents, StringUtils, IPerformanceClient, Logger, ICrypto } from \"@azure/msal-common\";\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { EventType } from \"../event/EventType\";\r\nimport { InteractionType, ApiId, BrowserConstants } from \"../utils/BrowserConstants\";\r\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\r\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { InteractionHandler, InteractionParams } from \"../interaction_handler/InteractionHandler\";\r\nimport { PopupWindowAttributes } from \"../request/PopupWindowAttributes\";\r\n\r\nexport type PopupParams = InteractionParams & {\r\n    popup?: Window|null;\r\n    popupName: string;\r\n    popupWindowAttributes: PopupWindowAttributes\r\n};\r\n\r\nexport class PopupClient extends StandardInteractionClient {\r\n    private currentWindow: Window | undefined;\r\n    protected nativeStorage: BrowserCacheManager;\r\n\r\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, performanceClient: IPerformanceClient, nativeStorageImpl: BrowserCacheManager, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\r\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\r\n        // Properly sets this reference for the unload event.\r\n        this.unloadWindow = this.unloadWindow.bind(this);\r\n        this.nativeStorage = nativeStorageImpl;\r\n    }\r\n\r\n    /**\r\n     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\r\n     * @param request\r\n     */\r\n    acquireToken(request: PopupRequest): Promise<AuthenticationResult> {\r\n        try {\r\n            const popupName = this.generatePopupName(request.scopes || OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);\r\n            const popupWindowAttributes = request.popupWindowAttributes || {};\r\n\r\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\r\n            if (this.config.system.asyncPopups) {\r\n                this.logger.verbose(\"asyncPopups set to true, acquiring token\");\r\n                // Passes on popup position and dimensions if in request\r\n                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);\r\n            } else {\r\n                // asyncPopups flag is set to false. Opens popup before acquiring token.\r\n                this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\r\n                const popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\r\n                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);\r\n            }\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n     * @param logoutRequest\r\n     */\r\n    logout(logoutRequest?: EndSessionPopupRequest): Promise<void> {\r\n        try {\r\n            this.logger.verbose(\"logoutPopup called\");\r\n            const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\r\n\r\n            const popupName = this.generateLogoutPopupName(validLogoutRequest);\r\n            const authority = logoutRequest && logoutRequest.authority;\r\n            const mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\r\n            const popupWindowAttributes = logoutRequest?.popupWindowAttributes || {};\r\n\r\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\r\n            if (this.config.system.asyncPopups) {\r\n                this.logger.verbose(\"asyncPopups set to true\");\r\n                // Passes on popup position and dimensions if in request\r\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);\r\n            } else {\r\n                // asyncPopups flag is set to false. Opens popup before logging out.\r\n                this.logger.verbose(\"asyncPopup set to false, opening popup\");\r\n                const popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\r\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);\r\n            }\r\n        } catch (e) {\r\n            // Since this function is synchronous we need to reject\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper which obtains an access_token for your API via opening a popup window in the user's browser\r\n     * @param validRequest\r\n     * @param popupName\r\n     * @param popup\r\n     * @param popupWindowAttributes\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    protected async acquireTokenPopupAsync(request: PopupRequest, popupName: string, popupWindowAttributes: PopupWindowAttributes, popup?: Window|null): Promise<AuthenticationResult> {\r\n        this.logger.verbose(\"acquireTokenPopupAsync called\");\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\r\n\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\r\n        const validRequest = await this.initializeAuthorizationRequest(request, InteractionType.Popup);\r\n        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\r\n\r\n        try {\r\n            // Create auth code request and generate PKCE params\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\r\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(validRequest);\r\n\r\n            // Initialize the client\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\r\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            const isNativeBroker = NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);\r\n            // Start measurement for server calls with native brokering enabled\r\n            let fetchNativeAccountIdMeasurement;\r\n            if (isNativeBroker) {\r\n                fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.FetchAccountIdWithNativeBroker, request.correlationId);\r\n            }\r\n\r\n            // Create acquire token url.\r\n            const navigateUrl = await authClient.getAuthCodeUrl({\r\n                ...validRequest,\r\n                nativeBroker: isNativeBroker\r\n            });\r\n\r\n            // Create popup interaction handler.\r\n            const interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\r\n\r\n            // Show the UI once the url has been created. Get the window handle for the popup.\r\n            const popupParameters: PopupParams = {\r\n                popup,\r\n                popupName,\r\n                popupWindowAttributes\r\n            };\r\n            const popupWindow: Window = this.initiateAuthRequest(navigateUrl, popupParameters);\r\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {popupWindow}, null);\r\n\r\n            // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\r\n            const hash = await this.monitorPopupForHash(popupWindow);\r\n            // Deserialize hash fragment response parameters.\r\n            const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\r\n            const state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Popup, validRequest.correlationId);\r\n            // Remove throttle if it exists\r\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\r\n\r\n            if (serverParams.accountId) {\r\n                this.logger.verbose(\"Account id found in hash, calling WAM for token\");\r\n                // end measurement for server call with native brokering enabled\r\n                if (fetchNativeAccountIdMeasurement) {\r\n                    fetchNativeAccountIdMeasurement.endMeasurement({\r\n                        success: true,\r\n                        isNativeBroker: true\r\n                    });\r\n                }\r\n\r\n                if (!this.nativeMessageHandler) {\r\n                    throw BrowserAuthError.createNativeConnectionNotEstablishedError();\r\n                }\r\n                const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);\r\n                const { userRequestState } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\r\n                return nativeInteractionClient.acquireToken({\r\n                    ...validRequest,\r\n                    state: userRequestState,\r\n                    prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\r\n                }).finally(() => {\r\n                    this.browserStorage.cleanRequestByState(state);\r\n                });\r\n            }\r\n\r\n            // Handle response from hash string.\r\n            const result = await interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\r\n\r\n            return result;\r\n        } catch (e) {\r\n            if (popup) {\r\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\r\n                popup.close();\r\n            }\r\n\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.browserStorage.cleanRequestByState(validRequest.state);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param validRequest\r\n     * @param popupName\r\n     * @param requestAuthority\r\n     * @param popup\r\n     * @param mainWindowRedirectUri\r\n     * @param popupWindowAttributes\r\n     */\r\n    protected async logoutPopupAsync(validRequest: CommonEndSessionRequest, popupName: string, popupWindowAttributes: PopupWindowAttributes, requestAuthority?: string, popup?: Window|null, mainWindowRedirectUri?: string): Promise<void> {\r\n        this.logger.verbose(\"logoutPopupAsync called\");\r\n        this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\r\n\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\r\n\r\n        try {\r\n            // Clear cache on logout\r\n            await this.clearCacheOnLogout(validRequest.account);\r\n\r\n            // Initialize the client\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validRequest.correlationId);\r\n            const authClient = await this.createAuthCodeClient(serverTelemetryManager, requestAuthority);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            // Create logout string and navigate user window to logout.\r\n            const logoutUri: string = authClient.getLogoutUri(validRequest);\r\n\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\r\n\r\n            // Open the popup window to requestUrl.\r\n            const popupWindow = this.openPopup(logoutUri, {popupName, popupWindowAttributes, popup});\r\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {popupWindow}, null);\r\n\r\n            await this.waitForLogoutPopup(popupWindow);\r\n\r\n            if (mainWindowRedirectUri) {\r\n                const navigationOptions: NavigationOptions = {\r\n                    apiId: ApiId.logoutPopup,\r\n                    timeout: this.config.system.redirectNavigationTimeout,\r\n                    noHistory: false\r\n                };\r\n                const absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());\r\n\r\n                this.logger.verbose(\"Redirecting main window to url specified in the request\");\r\n                this.logger.verbosePii(`Redirecting main window to: ${absoluteUrl}`);\r\n                this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\r\n            } else {\r\n                this.logger.verbose(\"No main window navigation requested\");\r\n            }\r\n        } catch (e) {\r\n            if (popup) {\r\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\r\n                popup.close();\r\n            }\r\n\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n\r\n            this.browserStorage.setInteractionInProgress(false);\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e);\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            throw e;\r\n        }\r\n\r\n        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\r\n    }\r\n\r\n    /**\r\n     * Opens a popup window with given request Url.\r\n     * @param requestUrl\r\n     */\r\n    initiateAuthRequest(requestUrl: string, params: PopupParams): Window {\r\n        // Check that request url is not empty.\r\n        if (!StringUtils.isEmpty(requestUrl)) {\r\n            this.logger.infoPii(`Navigate to: ${requestUrl}`);\r\n            // Open the popup window to requestUrl.\r\n            return this.openPopup(requestUrl, params);\r\n        } else {\r\n            // Throw error if request URL is empty.\r\n            this.logger.error(\"Navigate url is empty\");\r\n            throw BrowserAuthError.createEmptyNavigationUriError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Monitors a window until it loads a url with the same origin.\r\n     * @param popupWindow - window that is being monitored\r\n     * @param timeout - timeout for processing hash once popup is redirected back to application\r\n     */\r\n    monitorPopupForHash(popupWindow: Window): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            /*\r\n             * Polling for popups needs to be tick-based,\r\n             * since a non-trivial amount of time can be spent on interaction (which should not count against the timeout).\r\n             */\r\n            const maxTicks = this.config.system.windowHashTimeout / this.config.system.pollIntervalMilliseconds;\r\n            let ticks = 0;\r\n\r\n            this.logger.verbose(\"PopupHandler.monitorPopupForHash - polling started\");\r\n\r\n            const intervalId = setInterval(() => {\r\n                // Window is closed\r\n                if (popupWindow.closed) {\r\n                    this.logger.error(\"PopupHandler.monitorPopupForHash - window closed\");\r\n                    this.cleanPopup();\r\n                    clearInterval(intervalId);\r\n                    reject(BrowserAuthError.createUserCancelledError());\r\n                    return;\r\n                }\r\n\r\n                let href: string = Constants.EMPTY_STRING;\r\n                let hash: string = Constants.EMPTY_STRING;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = popupWindow.location.href;\r\n                    hash = popupWindow.location.hash;\r\n                } catch (e) {}\r\n\r\n                // Don't process blank pages or cross domain\r\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\r\n                    return;\r\n                }\r\n\r\n                this.logger.verbose(\"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\");\r\n\r\n                /*\r\n                 * Only run clock when we are on same domain for popups\r\n                 * as popup operations can take a long time.\r\n                 */\r\n                ticks++;\r\n\r\n                if (hash) {\r\n                    this.logger.verbose(\"PopupHandler.monitorPopupForHash - found hash in url\");\r\n                    clearInterval(intervalId);\r\n                    this.cleanPopup(popupWindow);\r\n\r\n                    if (UrlString.hashContainsKnownProperties(hash)) {\r\n                        this.logger.verbose(\"PopupHandler.monitorPopupForHash - hash contains known properties, returning.\");\r\n                        resolve(hash);\r\n                    } else {\r\n                        this.logger.error(\"PopupHandler.monitorPopupForHash - found hash in url but it does not contain known properties. Check that your router is not changing the hash prematurely.\");\r\n                        this.logger.errorPii(`PopupHandler.monitorPopupForHash - hash found: ${hash}`);\r\n                        reject(BrowserAuthError.createHashDoesNotContainKnownPropertiesError());\r\n                    }\r\n                } else if (ticks > maxTicks) {\r\n                    this.logger.error(\"PopupHandler.monitorPopupForHash - unable to find hash in url, timing out\");\r\n                    clearInterval(intervalId);\r\n                    reject(BrowserAuthError.createMonitorPopupTimeoutError());\r\n                }\r\n            }, this.config.system.pollIntervalMilliseconds);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Waits for user interaction in logout popup window\r\n     * @param popupWindow\r\n     * @returns\r\n     */\r\n    waitForLogoutPopup(popupWindow: Window): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            this.logger.verbose(\"PopupHandler.waitForLogoutPopup - polling started\");\r\n\r\n            const intervalId = setInterval(() => {\r\n                // Window is closed\r\n                if (popupWindow.closed) {\r\n                    this.logger.error(\"PopupHandler.waitForLogoutPopup - window closed\");\r\n                    this.cleanPopup();\r\n                    clearInterval(intervalId);\r\n                    resolve();\r\n                }\r\n\r\n                let href: string = Constants.EMPTY_STRING;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = popupWindow.location.href;\r\n                } catch (e) {}\r\n\r\n                // Don't process blank pages or cross domain\r\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\r\n                    return;\r\n                }\r\n\r\n                this.logger.verbose(\"PopupHandler.waitForLogoutPopup - popup window is on same origin as caller, closing.\");\r\n\r\n                clearInterval(intervalId);\r\n                this.cleanPopup(popupWindow);\r\n                resolve();\r\n            }, this.config.system.pollIntervalMilliseconds);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Configures popup window for login.\r\n     *\r\n     * @param urlNavigate\r\n     * @param title\r\n     * @param popUpWidth\r\n     * @param popUpHeight\r\n     * @param popupWindowAttributes\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    openPopup(urlNavigate: string, popupParams: PopupParams): Window {\r\n        try {\r\n            let popupWindow;\r\n            // Popup window passed in, setting url to navigate to\r\n            if (popupParams.popup) {\r\n                popupWindow = popupParams.popup;\r\n                this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);\r\n                popupWindow.location.assign(urlNavigate);\r\n            } else if (typeof popupParams.popup === \"undefined\") {\r\n                // Popup will be undefined if it was not passed in\r\n                this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);\r\n                popupWindow = this.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes);\r\n            }\r\n\r\n            // Popup will be null if popups are blocked\r\n            if (!popupWindow) {\r\n                throw BrowserAuthError.createEmptyWindowCreatedError();\r\n            }\r\n            if (popupWindow.focus) {\r\n                popupWindow.focus();\r\n            }\r\n            this.currentWindow = popupWindow;\r\n            window.addEventListener(\"beforeunload\", this.unloadWindow);\r\n\r\n            return popupWindow;\r\n        } catch (e) {\r\n            this.logger.error(\"error opening popup \" + (e as AuthError).message);\r\n            this.browserStorage.setInteractionInProgress(false);\r\n            throw BrowserAuthError.createPopupWindowError((e as AuthError).toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to set popup window dimensions and position\r\n     * @param urlNavigate\r\n     * @param popupName\r\n     * @param popupWindowAttributes\r\n     * @returns\r\n     */\r\n    openSizedPopup(urlNavigate: string, popupName: string, popupWindowAttributes: PopupWindowAttributes): Window|null {\r\n        /**\r\n         * adding winLeft and winTop to account for dual monitor\r\n         * using screenLeft and screenTop for IE8 and earlier\r\n         */\r\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\r\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\r\n        /**\r\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n         * using document.documentElement.clientWidth for IE8 and earlier\r\n         */\r\n        const winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n        const winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n\r\n        let width = popupWindowAttributes.popupSize?.width;\r\n        let height = popupWindowAttributes.popupSize?.height;\r\n        let top = popupWindowAttributes.popupPosition?.top;\r\n        let left = popupWindowAttributes.popupPosition?.left;\r\n\r\n        if (!width || width < 0 || width > winWidth) {\r\n            this.logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\r\n            width = BrowserConstants.POPUP_WIDTH;\r\n        }\r\n\r\n        if (!height || height < 0 || height > winHeight) {\r\n            this.logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\r\n            height = BrowserConstants.POPUP_HEIGHT;\r\n        }\r\n\r\n        if (!top || top < 0 || top > winHeight) {\r\n            this.logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\r\n            top = Math.max(0, ((winHeight / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);\r\n        }\r\n\r\n        if (!left || left < 0 || left > winWidth) {\r\n            this.logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\r\n            left = Math.max(0, ((winWidth / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);\r\n        }\r\n\r\n        return window.open(urlNavigate, popupName, `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`);\r\n    }\r\n\r\n    /**\r\n     * Event callback to unload main window.\r\n     */\r\n    unloadWindow(e: Event): void {\r\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\r\n        if (this.currentWindow) {\r\n            this.currentWindow.close();\r\n        }\r\n        // Guarantees browser unload will happen, so no other errors will be thrown.\r\n        e.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Closes popup, removes any state vars created during popup calls.\r\n     * @param popupWindow\r\n     */\r\n    cleanPopup(popupWindow?: Window): void {\r\n        if (popupWindow) {\r\n            // Close window.\r\n            popupWindow.close();\r\n        }\r\n        // Remove window unload function\r\n        window.removeEventListener(\"beforeunload\", this.unloadWindow);\r\n\r\n        // Interaction is completed - remove interaction status.\r\n        this.browserStorage.setInteractionInProgress(false);\r\n    }\r\n\r\n    /**\r\n     * Generates the name for the popup based on the client id and request\r\n     * @param clientId\r\n     * @param request\r\n     */\r\n    generatePopupName(scopes: Array<string>, authority: string): string {\r\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${scopes.join(\"-\")}.${authority}.${this.correlationId}`;\r\n    }\r\n\r\n    /**\r\n     * Generates the name for the popup based on the client id and request for logouts\r\n     * @param clientId\r\n     * @param request\r\n     */\r\n    generateLogoutPopupName(request: CommonEndSessionRequest): string {\r\n        const homeAccountId = request.account && request.account.homeAccountId;\r\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${homeAccountId}.${this.correlationId}`;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}