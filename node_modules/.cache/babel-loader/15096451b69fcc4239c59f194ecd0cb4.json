{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __spread } from '../_virtual/_tslib.js';\nimport { CredentialType, RefreshTokenEntity, CacheManager, AccessTokenEntity, IdTokenEntity, AccountEntity, ClientAuthError, AppMetadataEntity, ServerTelemetryEntity, AuthorityMetadataEntity, Constants, PersistentCacheKeys, ThrottlingEntity, StringUtils, ProtocolUtils, CcsCredentialType, IdToken, DEFAULT_CRYPTO_IMPLEMENTATION } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserCacheLocation, StaticCacheKeys, InMemoryCacheKeys, TemporaryCacheKeys } from '../utils/BrowserConstants.js';\nimport { BrowserStorage } from './BrowserStorage.js';\nimport { MemoryStorage } from './MemoryStorage.js';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements the cache storage interface for MSAL through browser local or session storage.\r\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\r\n * parameters such as state and nonce, generally.\r\n */\n\nvar BrowserCacheManager =\n/** @class */\nfunction (_super) {\n  __extends(BrowserCacheManager, _super);\n\n  function BrowserCacheManager(clientId, cacheConfig, cryptoImpl, logger) {\n    var _this = _super.call(this, clientId, cryptoImpl, logger) || this; // Cookie life calculation (hours * minutes * seconds * ms)\n\n\n    _this.COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\n    _this.cacheConfig = cacheConfig;\n    _this.logger = logger;\n    _this.internalStorage = new MemoryStorage();\n    _this.browserStorage = _this.setupBrowserStorage(_this.cacheConfig.cacheLocation);\n    _this.temporaryCacheStorage = _this.setupTemporaryCacheStorage(_this.cacheConfig.temporaryCacheLocation, _this.cacheConfig.cacheLocation); // Migrate cache entries from older versions of MSAL.\n\n    if (cacheConfig.cacheMigrationEnabled) {\n      _this.migrateCacheEntries();\n\n      _this.createKeyMaps();\n    }\n\n    return _this;\n  }\n  /**\r\n   * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\r\n   * @param cacheLocation\r\n   */\n\n\n  BrowserCacheManager.prototype.setupBrowserStorage = function (cacheLocation) {\n    switch (cacheLocation) {\n      case BrowserCacheLocation.LocalStorage:\n      case BrowserCacheLocation.SessionStorage:\n        try {\n          return new BrowserStorage(cacheLocation);\n        } catch (e) {\n          this.logger.verbose(e);\n          break;\n        }\n\n    }\n\n    this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\n    return new MemoryStorage();\n  };\n  /**\r\n   * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured temporaryCacheLocation.\r\n   * @param temporaryCacheLocation\r\n   * @param cacheLocation\r\n   */\n\n\n  BrowserCacheManager.prototype.setupTemporaryCacheStorage = function (temporaryCacheLocation, cacheLocation) {\n    switch (cacheLocation) {\n      case BrowserCacheLocation.LocalStorage:\n      case BrowserCacheLocation.SessionStorage:\n        try {\n          /*\r\n           * When users do not explicitly choose their own temporaryCacheLocation,\r\n           * temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\r\n           */\n          return new BrowserStorage(temporaryCacheLocation || BrowserCacheLocation.SessionStorage);\n        } catch (e) {\n          this.logger.verbose(e);\n          return this.internalStorage;\n        }\n\n      case BrowserCacheLocation.MemoryStorage:\n      default:\n        return this.internalStorage;\n    }\n  };\n  /**\r\n   * Migrate all old cache entries to new schema. No rollback supported.\r\n   * @param storeAuthStateInCookie\r\n   */\n\n\n  BrowserCacheManager.prototype.migrateCacheEntries = function () {\n    var _this = this;\n\n    var idTokenKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ID_TOKEN;\n    var clientInfoKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.CLIENT_INFO;\n    var errorKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ERROR;\n    var errorDescKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ERROR_DESC;\n    var idTokenValue = this.browserStorage.getItem(idTokenKey);\n    var clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n    var errorValue = this.browserStorage.getItem(errorKey);\n    var errorDescValue = this.browserStorage.getItem(errorDescKey);\n    var values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\n    var keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];\n    keysToMigrate.forEach(function (cacheKey, index) {\n      return _this.migrateCacheEntry(cacheKey, values[index]);\n    });\n  };\n  /**\r\n   * Utility function to help with migration.\r\n   * @param newKey\r\n   * @param value\r\n   * @param storeAuthStateInCookie\r\n   */\n\n\n  BrowserCacheManager.prototype.migrateCacheEntry = function (newKey, value) {\n    if (value) {\n      this.setTemporaryCache(newKey, value, true);\n    }\n  };\n  /**\r\n   * Searches all cache entries for MSAL accounts and creates the account key map\r\n   * This is used to migrate users from older versions of MSAL which did not create the map.\r\n   * @returns\r\n   */\n\n\n  BrowserCacheManager.prototype.createKeyMaps = function () {\n    var _this = this;\n\n    this.logger.trace(\"BrowserCacheManager - createKeyMaps called.\");\n    var accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n    var tokenKeys = this.getItem(StaticCacheKeys.TOKEN_KEYS + \".\" + this.clientId);\n\n    if (accountKeys && tokenKeys) {\n      this.logger.verbose(\"BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.\"); // Key maps already exist, no need to iterate through cache\n\n      return;\n    }\n\n    var allKeys = this.browserStorage.getKeys();\n    allKeys.forEach(function (key) {\n      if (_this.isCredentialKey(key)) {\n        // Get item, parse, validate and write key to map\n        var value = _this.getItem(key);\n\n        if (value) {\n          var credObj = _this.validateAndParseJson(value);\n\n          if (credObj && credObj.hasOwnProperty(\"credentialType\")) {\n            switch (credObj[\"credentialType\"]) {\n              case CredentialType.ID_TOKEN:\n                if (IdTokenEntity.isIdTokenEntity(credObj)) {\n                  _this.logger.trace(\"BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map\");\n\n                  _this.logger.tracePii(\"BrowserCacheManager:createKeyMaps - idToken with key: \" + key + \" found, saving key to token key map\");\n\n                  var idTokenEntity = CacheManager.toObject(new IdTokenEntity(), credObj);\n\n                  var newKey = _this.updateCredentialCacheKey(key, idTokenEntity);\n\n                  _this.addTokenKey(newKey, CredentialType.ID_TOKEN);\n\n                  return;\n                } else {\n                  _this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping.\");\n\n                  _this.logger.tracePii(\"BrowserCacheManager:createKeyMaps - failed idToken validation on key: \" + key);\n                }\n\n                break;\n\n              case CredentialType.ACCESS_TOKEN:\n              case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                if (AccessTokenEntity.isAccessTokenEntity(credObj)) {\n                  _this.logger.trace(\"BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map\");\n\n                  _this.logger.tracePii(\"BrowserCacheManager:createKeyMaps - accessToken with key: \" + key + \" found, saving key to token key map\");\n\n                  var accessTokenEntity = CacheManager.toObject(new AccessTokenEntity(), credObj);\n\n                  var newKey = _this.updateCredentialCacheKey(key, accessTokenEntity);\n\n                  _this.addTokenKey(newKey, CredentialType.ACCESS_TOKEN);\n\n                  return;\n                } else {\n                  _this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping.\");\n\n                  _this.logger.tracePii(\"BrowserCacheManager:createKeyMaps - failed accessToken validation on key: \" + key);\n                }\n\n                break;\n\n              case CredentialType.REFRESH_TOKEN:\n                if (RefreshTokenEntity.isRefreshTokenEntity(credObj)) {\n                  _this.logger.trace(\"BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map\");\n\n                  _this.logger.tracePii(\"BrowserCacheManager:createKeyMaps - refreshToken with key: \" + key + \" found, saving key to token key map\");\n\n                  var refreshTokenEntity = CacheManager.toObject(new RefreshTokenEntity(), credObj);\n\n                  var newKey = _this.updateCredentialCacheKey(key, refreshTokenEntity);\n\n                  _this.addTokenKey(newKey, CredentialType.REFRESH_TOKEN);\n\n                  return;\n                } else {\n                  _this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping.\");\n\n                  _this.logger.tracePii(\"BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: \" + key);\n                }\n\n                break;\n              // If credentialType isn't one of our predefined ones, it may not be an MSAL cache value. Ignore.\n            }\n          }\n        }\n      }\n\n      if (_this.isAccountKey(key)) {\n        var value = _this.getItem(key);\n\n        if (value) {\n          var accountObj = _this.validateAndParseJson(value);\n\n          if (accountObj && AccountEntity.isAccountEntity(accountObj)) {\n            _this.logger.trace(\"BrowserCacheManager:createKeyMaps - account found, saving key to account key map\");\n\n            _this.logger.tracePii(\"BrowserCacheManager:createKeyMaps - account with key: \" + key + \" found, saving key to account key map\");\n\n            _this.addAccountKeyToMap(key);\n          }\n        }\n      }\n    });\n  };\n  /**\r\n   * Parses passed value as JSON object, JSON.parse() will throw an error.\r\n   * @param input\r\n   */\n\n\n  BrowserCacheManager.prototype.validateAndParseJson = function (jsonValue) {\n    try {\n      var parsedJson = JSON.parse(jsonValue);\n      /**\r\n       * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\r\n       * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\r\n       * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\r\n       *\r\n       */\n\n      return parsedJson && typeof parsedJson === \"object\" ? parsedJson : null;\n    } catch (error) {\n      return null;\n    }\n  };\n  /**\r\n   * fetches the entry from the browser storage based off the key\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.getItem = function (key) {\n    return this.browserStorage.getItem(key);\n  };\n  /**\r\n   * sets the entry in the browser storage\r\n   * @param key\r\n   * @param value\r\n   */\n\n\n  BrowserCacheManager.prototype.setItem = function (key, value) {\n    this.browserStorage.setItem(key, value);\n  };\n  /**\r\n   * fetch the account entity from the platform cache\r\n   * @param accountKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getAccount = function (accountKey) {\n    this.logger.trace(\"BrowserCacheManager.getAccount called\");\n    var account = this.getItem(accountKey);\n\n    if (!account) {\n      this.removeAccountKeyFromMap(accountKey);\n      return null;\n    }\n\n    var parsedAccount = this.validateAndParseJson(account);\n\n    if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\n      this.removeAccountKeyFromMap(accountKey);\n      return null;\n    }\n\n    return CacheManager.toObject(new AccountEntity(), parsedAccount);\n  };\n  /**\r\n   * set account entity in the platform cache\r\n   * @param key\r\n   * @param value\r\n   */\n\n\n  BrowserCacheManager.prototype.setAccount = function (account) {\n    this.logger.trace(\"BrowserCacheManager.setAccount called\");\n    var key = account.generateAccountKey();\n    this.setItem(key, JSON.stringify(account));\n    this.addAccountKeyToMap(key);\n  };\n  /**\r\n   * Returns the array of account keys currently cached\r\n   * @returns\r\n   */\n\n\n  BrowserCacheManager.prototype.getAccountKeys = function () {\n    this.logger.trace(\"BrowserCacheManager.getAccountKeys called\");\n    var accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n\n    if (accountKeys) {\n      return JSON.parse(accountKeys);\n    }\n\n    this.logger.verbose(\"BrowserCacheManager.getAccountKeys - No account keys found\");\n    return [];\n  };\n  /**\r\n   * Add a new account to the key map\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.addAccountKeyToMap = function (key) {\n    this.logger.trace(\"BrowserCacheManager.addAccountKeyToMap called\");\n    this.logger.tracePii(\"BrowserCacheManager.addAccountKeyToMap called with key: \" + key);\n    var accountKeys = this.getAccountKeys();\n\n    if (accountKeys.indexOf(key) === -1) {\n      // Only add key if it does not already exist in the map\n      accountKeys.push(key);\n      this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\n      this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key added\");\n    } else {\n      this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key already exists in map\");\n    }\n  };\n  /**\r\n   * Remove an account from the key map\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.removeAccountKeyFromMap = function (key) {\n    this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap called\");\n    this.logger.tracePii(\"BrowserCacheManager.removeAccountKeyFromMap called with key: \" + key);\n    var accountKeys = this.getAccountKeys();\n    var removalIndex = accountKeys.indexOf(key);\n\n    if (removalIndex > -1) {\n      accountKeys.splice(removalIndex, 1);\n      this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\n      this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap account key removed\");\n    } else {\n      this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap key not found in existing map\");\n    }\n  };\n  /**\r\n   * Extends inherited removeAccount function to include removal of the account key from the map\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.removeAccount = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        _super.prototype.removeAccount.call(this, key);\n\n        this.removeAccountKeyFromMap(key);\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\r\n   * Removes given idToken from the cache and from the key map\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.removeIdToken = function (key) {\n    _super.prototype.removeIdToken.call(this, key);\n\n    this.removeTokenKey(key, CredentialType.ID_TOKEN);\n  };\n  /**\r\n   * Removes given accessToken from the cache and from the key map\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.removeAccessToken = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        _super.prototype.removeAccessToken.call(this, key);\n\n        this.removeTokenKey(key, CredentialType.ACCESS_TOKEN);\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\r\n   * Removes given refreshToken from the cache and from the key map\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.removeRefreshToken = function (key) {\n    _super.prototype.removeRefreshToken.call(this, key);\n\n    this.removeTokenKey(key, CredentialType.REFRESH_TOKEN);\n  };\n  /**\r\n   * Gets the keys for the cached tokens associated with this clientId\r\n   * @returns\r\n   */\n\n\n  BrowserCacheManager.prototype.getTokenKeys = function () {\n    this.logger.trace(\"BrowserCacheManager.getTokenKeys called\");\n    var item = this.getItem(StaticCacheKeys.TOKEN_KEYS + \".\" + this.clientId);\n\n    if (item) {\n      var tokenKeys = this.validateAndParseJson(item);\n\n      if (tokenKeys && tokenKeys.hasOwnProperty(\"idToken\") && tokenKeys.hasOwnProperty(\"accessToken\") && tokenKeys.hasOwnProperty(\"refreshToken\")) {\n        return tokenKeys;\n      } else {\n        this.logger.error(\"BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.\");\n      }\n    } else {\n      this.logger.verbose(\"BrowserCacheManager.getTokenKeys - No token keys found\");\n    }\n\n    return {\n      idToken: [],\n      accessToken: [],\n      refreshToken: []\n    };\n  };\n  /**\r\n   * Adds the given key to the token key map\r\n   * @param key\r\n   * @param type\r\n   */\n\n\n  BrowserCacheManager.prototype.addTokenKey = function (key, type) {\n    this.logger.trace(\"BrowserCacheManager addTokenKey called\");\n    var tokenKeys = this.getTokenKeys();\n\n    switch (type) {\n      case CredentialType.ID_TOKEN:\n        if (tokenKeys.idToken.indexOf(key) === -1) {\n          this.logger.info(\"BrowserCacheManager: addTokenKey - idToken added to map\");\n          tokenKeys.idToken.push(key);\n        }\n\n        break;\n\n      case CredentialType.ACCESS_TOKEN:\n        if (tokenKeys.accessToken.indexOf(key) === -1) {\n          this.logger.info(\"BrowserCacheManager: addTokenKey - accessToken added to map\");\n          tokenKeys.accessToken.push(key);\n        }\n\n        break;\n\n      case CredentialType.REFRESH_TOKEN:\n        if (tokenKeys.refreshToken.indexOf(key) === -1) {\n          this.logger.info(\"BrowserCacheManager: addTokenKey - refreshToken added to map\");\n          tokenKeys.refreshToken.push(key);\n        }\n\n        break;\n\n      default:\n        this.logger.error(\"BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: \" + type);\n        ClientAuthError.createUnexpectedCredentialTypeError();\n    }\n\n    this.setItem(StaticCacheKeys.TOKEN_KEYS + \".\" + this.clientId, JSON.stringify(tokenKeys));\n  };\n  /**\r\n   * Removes the given key from the token key map\r\n   * @param key\r\n   * @param type\r\n   */\n\n\n  BrowserCacheManager.prototype.removeTokenKey = function (key, type) {\n    this.logger.trace(\"BrowserCacheManager removeTokenKey called\");\n    var tokenKeys = this.getTokenKeys();\n\n    switch (type) {\n      case CredentialType.ID_TOKEN:\n        this.logger.infoPii(\"BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: \" + key + \" from map\");\n        var idRemoval = tokenKeys.idToken.indexOf(key);\n\n        if (idRemoval > -1) {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken removed from map\");\n          tokenKeys.idToken.splice(idRemoval, 1);\n        } else {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.\");\n        }\n\n        break;\n\n      case CredentialType.ACCESS_TOKEN:\n        this.logger.infoPii(\"BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: \" + key + \" from map\");\n        var accessRemoval = tokenKeys.accessToken.indexOf(key);\n\n        if (accessRemoval > -1) {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken removed from map\");\n          tokenKeys.accessToken.splice(accessRemoval, 1);\n        } else {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.\");\n        }\n\n        break;\n\n      case CredentialType.REFRESH_TOKEN:\n        this.logger.infoPii(\"BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: \" + key + \" from map\");\n        var refreshRemoval = tokenKeys.refreshToken.indexOf(key);\n\n        if (refreshRemoval > -1) {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken removed from map\");\n          tokenKeys.refreshToken.splice(refreshRemoval, 1);\n        } else {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.\");\n        }\n\n        break;\n\n      default:\n        this.logger.error(\"BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: \" + type);\n        ClientAuthError.createUnexpectedCredentialTypeError();\n    }\n\n    this.setItem(StaticCacheKeys.TOKEN_KEYS + \".\" + this.clientId, JSON.stringify(tokenKeys));\n  };\n  /**\r\n   * generates idToken entity from a string\r\n   * @param idTokenKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getIdTokenCredential = function (idTokenKey) {\n    var value = this.getItem(idTokenKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n      return null;\n    }\n\n    var parsedIdToken = this.validateAndParseJson(value);\n\n    if (!parsedIdToken || !IdTokenEntity.isIdTokenEntity(parsedIdToken)) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\n    return CacheManager.toObject(new IdTokenEntity(), parsedIdToken);\n  };\n  /**\r\n   * set IdToken credential to the platform cache\r\n   * @param idToken\r\n   */\n\n\n  BrowserCacheManager.prototype.setIdTokenCredential = function (idToken) {\n    this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n    var idTokenKey = idToken.generateCredentialKey();\n    this.setItem(idTokenKey, JSON.stringify(idToken));\n    this.addTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n  };\n  /**\r\n   * generates accessToken entity from a string\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.getAccessTokenCredential = function (accessTokenKey) {\n    var value = this.getItem(accessTokenKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n      return null;\n    }\n\n    var parsedAccessToken = this.validateAndParseJson(value);\n\n    if (!parsedAccessToken || !AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\n    return CacheManager.toObject(new AccessTokenEntity(), parsedAccessToken);\n  };\n  /**\r\n   * set accessToken credential to the platform cache\r\n   * @param accessToken\r\n   */\n\n\n  BrowserCacheManager.prototype.setAccessTokenCredential = function (accessToken) {\n    this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\n    var accessTokenKey = accessToken.generateCredentialKey();\n    this.setItem(accessTokenKey, JSON.stringify(accessToken));\n    this.addTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n  };\n  /**\r\n   * generates refreshToken entity from a string\r\n   * @param refreshTokenKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getRefreshTokenCredential = function (refreshTokenKey) {\n    var value = this.getItem(refreshTokenKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n      return null;\n    }\n\n    var parsedRefreshToken = this.validateAndParseJson(value);\n\n    if (!parsedRefreshToken || !RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\n    return CacheManager.toObject(new RefreshTokenEntity(), parsedRefreshToken);\n  };\n  /**\r\n   * set refreshToken credential to the platform cache\r\n   * @param refreshToken\r\n   */\n\n\n  BrowserCacheManager.prototype.setRefreshTokenCredential = function (refreshToken) {\n    this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\n    var refreshTokenKey = refreshToken.generateCredentialKey();\n    this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n    this.addTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n  };\n  /**\r\n   * fetch appMetadata entity from the platform cache\r\n   * @param appMetadataKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getAppMetadata = function (appMetadataKey) {\n    var value = this.getItem(appMetadataKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n\n    var parsedMetadata = this.validateAndParseJson(value);\n\n    if (!parsedMetadata || !AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n    return CacheManager.toObject(new AppMetadataEntity(), parsedMetadata);\n  };\n  /**\r\n   * set appMetadata entity to the platform cache\r\n   * @param appMetadata\r\n   */\n\n\n  BrowserCacheManager.prototype.setAppMetadata = function (appMetadata) {\n    this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n    var appMetadataKey = appMetadata.generateAppMetadataKey();\n    this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n  };\n  /**\r\n   * fetch server telemetry entity from the platform cache\r\n   * @param serverTelemetryKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getServerTelemetry = function (serverTelemetryKey) {\n    var value = this.getItem(serverTelemetryKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n\n    var parsedMetadata = this.validateAndParseJson(value);\n\n    if (!parsedMetadata || !ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n    return CacheManager.toObject(new ServerTelemetryEntity(), parsedMetadata);\n  };\n  /**\r\n   * set server telemetry entity to the platform cache\r\n   * @param serverTelemetryKey\r\n   * @param serverTelemetry\r\n   */\n\n\n  BrowserCacheManager.prototype.setServerTelemetry = function (serverTelemetryKey, serverTelemetry) {\n    this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n    this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n  };\n  /**\r\n   *\r\n   */\n\n\n  BrowserCacheManager.prototype.getAuthorityMetadata = function (key) {\n    var value = this.internalStorage.getItem(key);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\n      return null;\n    }\n\n    var parsedMetadata = this.validateAndParseJson(value);\n\n    if (parsedMetadata && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\n      return CacheManager.toObject(new AuthorityMetadataEntity(), parsedMetadata);\n    }\n\n    return null;\n  };\n  /**\r\n   *\r\n   */\n\n\n  BrowserCacheManager.prototype.getAuthorityMetadataKeys = function () {\n    var _this = this;\n\n    var allKeys = this.internalStorage.getKeys();\n    return allKeys.filter(function (key) {\n      return _this.isAuthorityMetadata(key);\n    });\n  };\n  /**\r\n   * Sets wrapper metadata in memory\r\n   * @param wrapperSKU\r\n   * @param wrapperVersion\r\n   */\n\n\n  BrowserCacheManager.prototype.setWrapperMetadata = function (wrapperSKU, wrapperVersion) {\n    this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\n    this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_VER, wrapperVersion);\n  };\n  /**\r\n   * Returns wrapper metadata from in-memory storage\r\n   */\n\n\n  BrowserCacheManager.prototype.getWrapperMetadata = function () {\n    var sku = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU) || Constants.EMPTY_STRING;\n    var version = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER) || Constants.EMPTY_STRING;\n    return [sku, version];\n  };\n  /**\r\n   *\r\n   * @param entity\r\n   */\n\n\n  BrowserCacheManager.prototype.setAuthorityMetadata = function (key, entity) {\n    this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n    this.internalStorage.setItem(key, JSON.stringify(entity));\n  };\n  /**\r\n   * Gets the active account\r\n   */\n\n\n  BrowserCacheManager.prototype.getActiveAccount = function () {\n    var activeAccountKeyFilters = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n    var activeAccountValueFilters = this.getItem(activeAccountKeyFilters);\n\n    if (!activeAccountValueFilters) {\n      // if new active account cache type isn't found, it's an old version, so look for that instead\n      this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema\");\n      var activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n      var activeAccountValueLocal = this.getItem(activeAccountKeyLocal);\n\n      if (!activeAccountValueLocal) {\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\n        return null;\n      }\n\n      var activeAccount = this.getAccountInfoByFilter({\n        localAccountId: activeAccountValueLocal\n      })[0] || null;\n\n      if (activeAccount) {\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: Legacy active account cache schema found\");\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: Adding active account filters cache schema\");\n        this.setActiveAccount(activeAccount);\n        return activeAccount;\n      }\n\n      return null;\n    }\n\n    var activeAccountValueObj = this.validateAndParseJson(activeAccountValueFilters);\n\n    if (activeAccountValueObj) {\n      this.logger.trace(\"BrowserCacheManager.getActiveAccount: Active account filters schema found\");\n      return this.getAccountInfoByFilter({\n        homeAccountId: activeAccountValueObj.homeAccountId,\n        localAccountId: activeAccountValueObj.localAccountId\n      })[0] || null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\n    return null;\n  };\n  /**\r\n   * Sets the active account's localAccountId in cache\r\n   * @param account\r\n   */\n\n\n  BrowserCacheManager.prototype.setActiveAccount = function (account) {\n    var activeAccountKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n    var activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n\n    if (account) {\n      this.logger.verbose(\"setActiveAccount: Active account set\");\n      var activeAccountValue = {\n        homeAccountId: account.homeAccountId,\n        localAccountId: account.localAccountId\n      };\n      this.browserStorage.setItem(activeAccountKey, JSON.stringify(activeAccountValue));\n      this.browserStorage.setItem(activeAccountKeyLocal, account.localAccountId);\n    } else {\n      this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\n      this.browserStorage.removeItem(activeAccountKey);\n      this.browserStorage.removeItem(activeAccountKeyLocal);\n    }\n  };\n  /**\r\n   * Gets a list of accounts that match all of the filters provided\r\n   * @param account\r\n   */\n\n\n  BrowserCacheManager.prototype.getAccountInfoByFilter = function (accountFilter) {\n    var allAccounts = this.getAllAccounts();\n    this.logger.trace(\"BrowserCacheManager.getAccountInfoByFilter: total \" + allAccounts.length + \" accounts found\");\n    return allAccounts.filter(function (accountObj) {\n      if (accountFilter.username && accountFilter.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n        return false;\n      }\n\n      if (accountFilter.homeAccountId && accountFilter.homeAccountId !== accountObj.homeAccountId) {\n        return false;\n      }\n\n      if (accountFilter.localAccountId && accountFilter.localAccountId !== accountObj.localAccountId) {\n        return false;\n      }\n\n      if (accountFilter.tenantId && accountFilter.tenantId !== accountObj.tenantId) {\n        return false;\n      }\n\n      if (accountFilter.environment && accountFilter.environment !== accountObj.environment) {\n        return false;\n      }\n\n      return true;\n    });\n  };\n  /**\r\n   * Checks the cache for accounts matching loginHint or SID\r\n   * @param loginHint\r\n   * @param sid\r\n   */\n\n\n  BrowserCacheManager.prototype.getAccountInfoByHints = function (loginHint, sid) {\n    var matchingAccounts = this.getAllAccounts().filter(function (accountInfo) {\n      if (sid) {\n        var accountSid = accountInfo.idTokenClaims && accountInfo.idTokenClaims[\"sid\"];\n        return sid === accountSid;\n      }\n\n      if (loginHint) {\n        return loginHint === accountInfo.username;\n      }\n\n      return false;\n    });\n\n    if (matchingAccounts.length === 1) {\n      return matchingAccounts[0];\n    } else if (matchingAccounts.length > 1) {\n      throw ClientAuthError.createMultipleMatchingAccountsInCacheError();\n    }\n\n    return null;\n  };\n  /**\r\n   * fetch throttling entity from the platform cache\r\n   * @param throttlingCacheKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getThrottlingCache = function (throttlingCacheKey) {\n    var value = this.getItem(throttlingCacheKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n\n    var parsedThrottlingCache = this.validateAndParseJson(value);\n\n    if (!parsedThrottlingCache || !ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n    return CacheManager.toObject(new ThrottlingEntity(), parsedThrottlingCache);\n  };\n  /**\r\n   * set throttling entity to the platform cache\r\n   * @param throttlingCacheKey\r\n   * @param throttlingCache\r\n   */\n\n\n  BrowserCacheManager.prototype.setThrottlingCache = function (throttlingCacheKey, throttlingCache) {\n    this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n    this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n  };\n  /**\r\n   * Gets cache item with given key.\r\n   * Will retrieve from cookies if storeAuthStateInCookie is set to true.\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.getTemporaryCache = function (cacheKey, generateKey) {\n    var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      var itemCookie = this.getItemCookie(key);\n\n      if (itemCookie) {\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\n        return itemCookie;\n      }\n    }\n\n    var value = this.temporaryCacheStorage.getItem(key);\n\n    if (!value) {\n      // If temp cache item not found in session/memory, check local storage for items set by old versions\n      if (this.cacheConfig.cacheLocation === BrowserCacheLocation.LocalStorage) {\n        var item = this.browserStorage.getItem(key);\n\n        if (item) {\n          this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\n          return item;\n        }\n      }\n\n      this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\n    return value;\n  };\n  /**\r\n   * Sets the cache item with the key and value given.\r\n   * Stores in cookie if storeAuthStateInCookie is set to true.\r\n   * This can cause cookie overflow if used incorrectly.\r\n   * @param key\r\n   * @param value\r\n   */\n\n\n  BrowserCacheManager.prototype.setTemporaryCache = function (cacheKey, value, generateKey) {\n    var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n    this.temporaryCacheStorage.setItem(key, value);\n\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\n      this.setItemCookie(key, value);\n    }\n  };\n  /**\r\n   * Removes the cache item with the given key.\r\n   * Will also clear the cookie item if storeAuthStateInCookie is set to true.\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.removeItem = function (key) {\n    this.browserStorage.removeItem(key);\n    this.temporaryCacheStorage.removeItem(key);\n\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\n      this.clearItemCookie(key);\n    }\n  };\n  /**\r\n   * Checks whether key is in cache.\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.containsKey = function (key) {\n    return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);\n  };\n  /**\r\n   * Gets all keys in window.\r\n   */\n\n\n  BrowserCacheManager.prototype.getKeys = function () {\n    return __spread(this.browserStorage.getKeys(), this.temporaryCacheStorage.getKeys());\n  };\n  /**\r\n   * Clears all cache entries created by MSAL.\r\n   */\n\n\n  BrowserCacheManager.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Removes all accounts and their credentials\n            return [4\n            /*yield*/\n            , this.removeAllAccounts()];\n\n          case 1:\n            // Removes all accounts and their credentials\n            _a.sent();\n\n            this.removeAppMetadata(); // Removes all remaining MSAL cache items\n\n            this.getKeys().forEach(function (cacheKey) {\n              // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js\n              if ((_this.browserStorage.containsKey(cacheKey) || _this.temporaryCacheStorage.containsKey(cacheKey)) && (cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 || cacheKey.indexOf(_this.clientId) !== -1)) {\n                _this.removeItem(cacheKey);\n              }\n            });\n            this.internalStorage.clear();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Add value to cookies\r\n   * @param cookieName\r\n   * @param cookieValue\r\n   * @param expires\r\n   */\n\n\n  BrowserCacheManager.prototype.setItemCookie = function (cookieName, cookieValue, expires) {\n    var cookieStr = encodeURIComponent(cookieName) + \"=\" + encodeURIComponent(cookieValue) + \";path=/;SameSite=Lax;\";\n\n    if (expires) {\n      var expireTime = this.getCookieExpirationTime(expires);\n      cookieStr += \"expires=\" + expireTime + \";\";\n    }\n\n    if (this.cacheConfig.secureCookies) {\n      cookieStr += \"Secure;\";\n    }\n\n    document.cookie = cookieStr;\n  };\n  /**\r\n   * Get one item by key from cookies\r\n   * @param cookieName\r\n   */\n\n\n  BrowserCacheManager.prototype.getItemCookie = function (cookieName) {\n    var name = encodeURIComponent(cookieName) + \"=\";\n    var cookieList = document.cookie.split(\";\");\n\n    for (var i = 0; i < cookieList.length; i++) {\n      var cookie = cookieList[i];\n\n      while (cookie.charAt(0) === \" \") {\n        cookie = cookie.substring(1);\n      }\n\n      if (cookie.indexOf(name) === 0) {\n        return decodeURIComponent(cookie.substring(name.length, cookie.length));\n      }\n    }\n\n    return Constants.EMPTY_STRING;\n  };\n  /**\r\n   * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\r\n   */\n\n\n  BrowserCacheManager.prototype.clearMsalCookies = function () {\n    var _this = this;\n\n    var cookiePrefix = Constants.CACHE_PREFIX + \".\" + this.clientId;\n    var cookieList = document.cookie.split(\";\");\n    cookieList.forEach(function (cookie) {\n      while (cookie.charAt(0) === \" \") {\n        // eslint-disable-next-line no-param-reassign\n        cookie = cookie.substring(1);\n      }\n\n      if (cookie.indexOf(cookiePrefix) === 0) {\n        var cookieKey = cookie.split(\"=\")[0];\n\n        _this.clearItemCookie(cookieKey);\n      }\n    });\n  };\n  /**\r\n   * Clear an item in the cookies by key\r\n   * @param cookieName\r\n   */\n\n\n  BrowserCacheManager.prototype.clearItemCookie = function (cookieName) {\n    this.setItemCookie(cookieName, Constants.EMPTY_STRING, -1);\n  };\n  /**\r\n   * Get cookie expiration time\r\n   * @param cookieLifeDays\r\n   */\n\n\n  BrowserCacheManager.prototype.getCookieExpirationTime = function (cookieLifeDays) {\n    var today = new Date();\n    var expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);\n    return expr.toUTCString();\n  };\n  /**\r\n   * Gets the cache object referenced by the browser\r\n   */\n\n\n  BrowserCacheManager.prototype.getCache = function () {\n    return this.browserStorage;\n  };\n  /**\r\n   * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser\r\n   */\n\n\n  BrowserCacheManager.prototype.setCache = function () {// sets nothing\n  };\n  /**\r\n   * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\r\n   * @param key\r\n   * @param addInstanceId\r\n   */\n\n\n  BrowserCacheManager.prototype.generateCacheKey = function (key) {\n    var generatedKey = this.validateAndParseJson(key);\n\n    if (!generatedKey) {\n      if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {\n        return key;\n      }\n\n      return Constants.CACHE_PREFIX + \".\" + this.clientId + \".\" + key;\n    }\n\n    return JSON.stringify(key);\n  };\n  /**\r\n   * Create authorityKey to cache authority\r\n   * @param state\r\n   */\n\n\n  BrowserCacheManager.prototype.generateAuthorityKey = function (stateString) {\n    var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\n    return this.generateCacheKey(TemporaryCacheKeys.AUTHORITY + \".\" + stateId);\n  };\n  /**\r\n   * Create Nonce key to cache nonce\r\n   * @param state\r\n   */\n\n\n  BrowserCacheManager.prototype.generateNonceKey = function (stateString) {\n    var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\n    return this.generateCacheKey(TemporaryCacheKeys.NONCE_IDTOKEN + \".\" + stateId);\n  };\n  /**\r\n   * Creates full cache key for the request state\r\n   * @param stateString State string for the request\r\n   */\n\n\n  BrowserCacheManager.prototype.generateStateKey = function (stateString) {\n    // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n    var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\n    return this.generateCacheKey(TemporaryCacheKeys.REQUEST_STATE + \".\" + stateId);\n  };\n  /**\r\n   * Gets the cached authority based on the cached state. Returns empty if no cached state found.\r\n   */\n\n\n  BrowserCacheManager.prototype.getCachedAuthority = function (cachedState) {\n    var stateCacheKey = this.generateStateKey(cachedState);\n    var state = this.getTemporaryCache(stateCacheKey);\n\n    if (!state) {\n      return null;\n    }\n\n    var authorityCacheKey = this.generateAuthorityKey(state);\n    return this.getTemporaryCache(authorityCacheKey);\n  };\n  /**\r\n   * Updates account, authority, and state in cache\r\n   * @param serverAuthenticationRequest\r\n   * @param account\r\n   */\n\n\n  BrowserCacheManager.prototype.updateCacheEntries = function (state, nonce, authorityInstance, loginHint, account) {\n    this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\"); // Cache the request state\n\n    var stateCacheKey = this.generateStateKey(state);\n    this.setTemporaryCache(stateCacheKey, state, false); // Cache the nonce\n\n    var nonceCacheKey = this.generateNonceKey(state);\n    this.setTemporaryCache(nonceCacheKey, nonce, false); // Cache authorityKey\n\n    var authorityCacheKey = this.generateAuthorityKey(state);\n    this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n\n    if (account) {\n      var ccsCredential = {\n        credential: account.homeAccountId,\n        type: CcsCredentialType.HOME_ACCOUNT_ID\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    } else if (!StringUtils.isEmpty(loginHint)) {\n      var ccsCredential = {\n        credential: loginHint,\n        type: CcsCredentialType.UPN\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    }\n  };\n  /**\r\n   * Reset all temporary cache items\r\n   * @param state\r\n   */\n\n\n  BrowserCacheManager.prototype.resetRequestCache = function (state) {\n    var _this = this;\n\n    this.logger.trace(\"BrowserCacheManager.resetRequestCache called\"); // check state and remove associated cache items\n\n    if (!StringUtils.isEmpty(state)) {\n      this.getKeys().forEach(function (key) {\n        if (key.indexOf(state) !== -1) {\n          _this.removeItem(key);\n        }\n      });\n    } // delete generic interactive request parameters\n\n\n    if (state) {\n      this.removeItem(this.generateStateKey(state));\n      this.removeItem(this.generateNonceKey(state));\n      this.removeItem(this.generateAuthorityKey(state));\n    }\n\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST));\n    this.setInteractionInProgress(false);\n  };\n  /**\r\n   * Removes temporary cache for the provided state\r\n   * @param stateString\r\n   */\n\n\n  BrowserCacheManager.prototype.cleanRequestByState = function (stateString) {\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\"); // Interaction is completed - remove interaction status.\n\n    if (stateString) {\n      var stateKey = this.generateStateKey(stateString);\n      var cachedState = this.temporaryCacheStorage.getItem(stateKey);\n      this.logger.infoPii(\"BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: \" + cachedState);\n      this.resetRequestCache(cachedState || Constants.EMPTY_STRING);\n    }\n\n    this.clearMsalCookies();\n  };\n  /**\r\n   * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\r\n   * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\r\n   * @param interactionType\r\n   */\n\n\n  BrowserCacheManager.prototype.cleanRequestByInteractionType = function (interactionType) {\n    var _this = this;\n\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\"); // Loop through all keys to find state key\n\n    this.getKeys().forEach(function (key) {\n      // If this key is not the state key, move on\n      if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\n        return;\n      } // Retrieve state value, return if not a valid value\n\n\n      var stateValue = _this.temporaryCacheStorage.getItem(key);\n\n      if (!stateValue) {\n        return;\n      } // Extract state and ensure it matches given InteractionType, then clean request cache\n\n\n      var parsedState = BrowserProtocolUtils.extractBrowserRequestState(_this.cryptoImpl, stateValue);\n\n      if (parsedState && parsedState.interactionType === interactionType) {\n        _this.logger.infoPii(\"BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: \" + stateValue);\n\n        _this.resetRequestCache(stateValue);\n      }\n    });\n    this.clearMsalCookies();\n    this.setInteractionInProgress(false);\n  };\n\n  BrowserCacheManager.prototype.cacheCodeRequest = function (authCodeRequest, browserCrypto) {\n    this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n    var encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));\n    this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\n  };\n  /**\r\n   * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\r\n   */\n\n\n  BrowserCacheManager.prototype.getCachedRequest = function (state, browserCrypto) {\n    this.logger.trace(\"BrowserCacheManager.getCachedRequest called\"); // Get token request from cache and parse as TokenExchangeParameters.\n\n    var encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);\n\n    if (!encodedTokenRequest) {\n      throw BrowserAuthError.createNoTokenRequestCacheError();\n    }\n\n    var parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest));\n\n    if (!parsedRequest) {\n      throw BrowserAuthError.createUnableToParseTokenRequestCacheError();\n    }\n\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS)); // Get cached authority and use if no authority is cached with request.\n\n    if (StringUtils.isEmpty(parsedRequest.authority)) {\n      var authorityCacheKey = this.generateAuthorityKey(state);\n      var cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n\n      if (!cachedAuthority) {\n        throw BrowserAuthError.createNoCachedAuthorityError();\n      }\n\n      parsedRequest.authority = cachedAuthority;\n    }\n\n    return parsedRequest;\n  };\n  /**\r\n   * Gets cached native request for redirect flows\r\n   */\n\n\n  BrowserCacheManager.prototype.getCachedNativeRequest = function () {\n    this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest called\");\n    var cachedRequest = this.getTemporaryCache(TemporaryCacheKeys.NATIVE_REQUEST, true);\n\n    if (!cachedRequest) {\n      this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest: No cached native request found\");\n      return null;\n    }\n\n    var parsedRequest = this.validateAndParseJson(cachedRequest);\n\n    if (!parsedRequest) {\n      this.logger.error(\"BrowserCacheManager.getCachedNativeRequest: Unable to parse native request\");\n      return null;\n    }\n\n    return parsedRequest;\n  };\n\n  BrowserCacheManager.prototype.isInteractionInProgress = function (matchClientId) {\n    var clientId = this.getInteractionInProgress();\n\n    if (matchClientId) {\n      return clientId === this.clientId;\n    } else {\n      return !!clientId;\n    }\n  };\n\n  BrowserCacheManager.prototype.getInteractionInProgress = function () {\n    var key = Constants.CACHE_PREFIX + \".\" + TemporaryCacheKeys.INTERACTION_STATUS_KEY;\n    return this.getTemporaryCache(key, false);\n  };\n\n  BrowserCacheManager.prototype.setInteractionInProgress = function (inProgress) {\n    // Ensure we don't overwrite interaction in progress for a different clientId\n    var key = Constants.CACHE_PREFIX + \".\" + TemporaryCacheKeys.INTERACTION_STATUS_KEY;\n\n    if (inProgress) {\n      if (this.getInteractionInProgress()) {\n        throw BrowserAuthError.createInteractionInProgressError();\n      } else {\n        // No interaction is in progress\n        this.setTemporaryCache(key, this.clientId, false);\n      }\n    } else if (!inProgress && this.getInteractionInProgress() === this.clientId) {\n      this.removeItem(key);\n    }\n  };\n  /**\r\n   * Returns username retrieved from ADAL or MSAL v1 idToken\r\n   */\n\n\n  BrowserCacheManager.prototype.getLegacyLoginHint = function () {\n    // Only check for adal/msal token if no SSO params are being used\n    var adalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ADAL_ID_TOKEN);\n\n    if (adalIdTokenString) {\n      this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);\n      this.logger.verbose(\"Cached ADAL id token retrieved.\");\n    } // Check for cached MSAL v1 id token\n\n\n    var msalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ID_TOKEN, true);\n\n    if (msalIdTokenString) {\n      this.removeItem(this.generateCacheKey(PersistentCacheKeys.ID_TOKEN));\n      this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\n    }\n\n    var cachedIdTokenString = msalIdTokenString || adalIdTokenString;\n\n    if (cachedIdTokenString) {\n      var cachedIdToken = new IdToken(cachedIdTokenString, this.cryptoImpl);\n\n      if (cachedIdToken.claims && cachedIdToken.claims.preferred_username) {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\");\n        return cachedIdToken.claims.preferred_username;\n      } else if (cachedIdToken.claims && cachedIdToken.claims.upn) {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\");\n        return cachedIdToken.claims.upn;\n      } else {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\");\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Updates a credential's cache key if the current cache key is outdated\r\n   */\n\n\n  BrowserCacheManager.prototype.updateCredentialCacheKey = function (currentCacheKey, credential) {\n    var updatedCacheKey = credential.generateCredentialKey();\n\n    if (currentCacheKey !== updatedCacheKey) {\n      var cacheItem = this.getItem(currentCacheKey);\n\n      if (cacheItem) {\n        this.removeItem(currentCacheKey);\n        this.setItem(updatedCacheKey, cacheItem);\n        this.logger.verbose(\"Updated an outdated \" + credential.credentialType + \" cache key\");\n        return updatedCacheKey;\n      } else {\n        this.logger.error(\"Attempted to update an outdated \" + credential.credentialType + \" cache key but no item matching the outdated key was found in storage\");\n      }\n    }\n\n    return currentCacheKey;\n  };\n  /**\r\n   * Returns application id as redirect context during AcquireTokenRedirect flow.\r\n   */\n\n\n  BrowserCacheManager.prototype.getRedirectRequestContext = function () {\n    return this.getTemporaryCache(TemporaryCacheKeys.REDIRECT_CONTEXT, true);\n  };\n  /**\r\n   * Sets application id as the redirect context during AcquireTokenRedirect flow.\r\n   * @param value\r\n   */\n\n\n  BrowserCacheManager.prototype.setRedirectRequestContext = function (value) {\n    this.setTemporaryCache(TemporaryCacheKeys.REDIRECT_CONTEXT, value, true);\n  };\n\n  return BrowserCacheManager;\n}(CacheManager);\n\nvar DEFAULT_BROWSER_CACHE_MANAGER = function (clientId, logger) {\n  var cacheOptions = {\n    cacheLocation: BrowserCacheLocation.MemoryStorage,\n    temporaryCacheLocation: BrowserCacheLocation.MemoryStorage,\n    storeAuthStateInCookie: false,\n    secureCookies: false,\n    cacheMigrationEnabled: false\n  };\n  return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);\n};\n\nexport { BrowserCacheManager, DEFAULT_BROWSER_CACHE_MANAGER };","map":{"version":3,"mappings":"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","names":["__extends","clientId","cacheConfig","cryptoImpl","logger","_super","_this","internalStorage","MemoryStorage","browserStorage","setupBrowserStorage","cacheLocation","temporaryCacheStorage","setupTemporaryCacheStorage","temporaryCacheLocation","cacheMigrationEnabled","migrateCacheEntries","createKeyMaps","BrowserCacheManager","BrowserCacheLocation","LocalStorage","SessionStorage","BrowserStorage","e","verbose","idTokenKey","Constants","CACHE_PREFIX","PersistentCacheKeys","ID_TOKEN","clientInfoKey","CLIENT_INFO","errorKey","ERROR","errorDescKey","ERROR_DESC","idTokenValue","getItem","clientInfoValue","errorValue","errorDescValue","values","keysToMigrate","forEach","cacheKey","index","migrateCacheEntry","newKey","value","setTemporaryCache","trace","accountKeys","StaticCacheKeys","ACCOUNT_KEYS","tokenKeys","TOKEN_KEYS","allKeys","getKeys","key","isCredentialKey","credObj","validateAndParseJson","hasOwnProperty","CredentialType","IdTokenEntity","isIdTokenEntity","tracePii","idTokenEntity","CacheManager","toObject","updateCredentialCacheKey","addTokenKey","ACCESS_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","AccessTokenEntity","isAccessTokenEntity","accessTokenEntity","REFRESH_TOKEN","RefreshTokenEntity","isRefreshTokenEntity","refreshTokenEntity","isAccountKey","accountObj","AccountEntity","isAccountEntity","addAccountKeyToMap","jsonValue","parsedJson","JSON","parse","error","setItem","accountKey","account","removeAccountKeyFromMap","parsedAccount","generateAccountKey","stringify","getAccountKeys","indexOf","push","removalIndex","splice","removeAccount","call","removeIdToken","removeTokenKey","removeAccessToken","removeRefreshToken","item","idToken","accessToken","refreshToken","type","getTokenKeys","info","ClientAuthError","createUnexpectedCredentialTypeError","infoPii","idRemoval","accessRemoval","refreshRemoval","parsedIdToken","generateCredentialKey","accessTokenKey","parsedAccessToken","refreshTokenKey","parsedRefreshToken","appMetadataKey","parsedMetadata","AppMetadataEntity","isAppMetadataEntity","appMetadata","generateAppMetadataKey","serverTelemetryKey","ServerTelemetryEntity","isServerTelemetryEntity","serverTelemetry","AuthorityMetadataEntity","isAuthorityMetadataEntity","filter","isAuthorityMetadata","wrapperSKU","wrapperVersion","InMemoryCacheKeys","WRAPPER_SKU","WRAPPER_VER","sku","EMPTY_STRING","version","entity","activeAccountKeyFilters","generateCacheKey","ACTIVE_ACCOUNT_FILTERS","activeAccountValueFilters","activeAccountKeyLocal","ACTIVE_ACCOUNT","activeAccountValueLocal","activeAccount","getAccountInfoByFilter","localAccountId","setActiveAccount","activeAccountValueObj","homeAccountId","activeAccountKey","activeAccountValue","removeItem","accountFilter","allAccounts","getAllAccounts","length","username","toLowerCase","tenantId","environment","loginHint","sid","matchingAccounts","accountInfo","accountSid","idTokenClaims","createMultipleMatchingAccountsInCacheError","throttlingCacheKey","parsedThrottlingCache","ThrottlingEntity","isThrottlingEntity","throttlingCache","generateKey","storeAuthStateInCookie","itemCookie","getItemCookie","setItemCookie","clearItemCookie","containsKey","removeAllAccounts","_a","removeAppMetadata","clear","cookieName","cookieValue","expires","cookieStr","encodeURIComponent","expireTime","getCookieExpirationTime","secureCookies","document","cookie","name","cookieList","split","i","charAt","substring","decodeURIComponent","cookiePrefix","cookieKey","cookieLifeDays","today","Date","expr","getTime","COOKIE_LIFE_MULTIPLIER","toUTCString","generatedKey","StringUtils","startsWith","ADAL_ID_TOKEN","stateString","stateId","ProtocolUtils","parseRequestState","libraryState","id","TemporaryCacheKeys","AUTHORITY","NONCE_IDTOKEN","REQUEST_STATE","cachedState","stateCacheKey","generateStateKey","state","getTemporaryCache","authorityCacheKey","generateAuthorityKey","nonce","authorityInstance","nonceCacheKey","generateNonceKey","ccsCredential","credential","CcsCredentialType","HOME_ACCOUNT_ID","CCS_CREDENTIAL","isEmpty","UPN","REQUEST_PARAMS","ORIGIN_URI","URL_HASH","CORRELATION_ID","NATIVE_REQUEST","setInteractionInProgress","stateKey","resetRequestCache","clearMsalCookies","interactionType","stateValue","parsedState","BrowserProtocolUtils","extractBrowserRequestState","authCodeRequest","browserCrypto","encodedValue","base64Encode","encodedTokenRequest","BrowserAuthError","createNoTokenRequestCacheError","parsedRequest","base64Decode","createUnableToParseTokenRequestCacheError","authority","cachedAuthority","createNoCachedAuthorityError","cachedRequest","matchClientId","getInteractionInProgress","INTERACTION_STATUS_KEY","inProgress","createInteractionInProgressError","adalIdTokenString","msalIdTokenString","cachedIdTokenString","cachedIdToken","IdToken","claims","preferred_username","upn","currentCacheKey","updatedCacheKey","cacheItem","credentialType","REDIRECT_CONTEXT","DEFAULT_BROWSER_CACHE_MANAGER","cacheOptions","DEFAULT_CRYPTO_IMPLEMENTATION"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-browser/src/cache/BrowserCacheManager.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Constants, PersistentCacheKeys, StringUtils, CommonAuthorizationCodeRequest, ICrypto, AccountEntity, IdTokenEntity, AccessTokenEntity, RefreshTokenEntity, AppMetadataEntity, CacheManager, ServerTelemetryEntity, ThrottlingEntity, ProtocolUtils, Logger, AuthorityMetadataEntity, DEFAULT_CRYPTO_IMPLEMENTATION, AccountInfo, ActiveAccountFilters, CcsCredential, CcsCredentialType, IdToken, ValidCredentialType, ClientAuthError, TokenKeys, CredentialType } from \"@azure/msal-common\";\r\nimport { CacheOptions } from \"../config/Configuration\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { BrowserCacheLocation, InteractionType, TemporaryCacheKeys, InMemoryCacheKeys, StaticCacheKeys } from \"../utils/BrowserConstants\";\r\nimport { BrowserStorage } from \"./BrowserStorage\";\r\nimport { MemoryStorage } from \"./MemoryStorage\";\r\nimport { IWindowStorage } from \"./IWindowStorage\";\r\nimport { BrowserProtocolUtils } from \"../utils/BrowserProtocolUtils\";\r\nimport { NativeTokenRequest } from \"../broker/nativeBroker/NativeRequest\";\r\n\r\n/**\r\n * This class implements the cache storage interface for MSAL through browser local or session storage.\r\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\r\n * parameters such as state and nonce, generally.\r\n */\r\nexport class BrowserCacheManager extends CacheManager {\r\n\r\n    // Cache configuration, either set by user or default values.\r\n    protected cacheConfig: Required<CacheOptions>;\r\n    // Window storage object (either local or sessionStorage)\r\n    protected browserStorage: IWindowStorage<string>;\r\n    // Internal in-memory storage object used for data used by msal that does not need to persist across page loads\r\n    protected internalStorage: MemoryStorage<string>;\r\n    // Temporary cache\r\n    protected temporaryCacheStorage: IWindowStorage<string>;\r\n    // Logger instance\r\n    protected logger: Logger;\r\n\r\n    // Cookie life calculation (hours * minutes * seconds * ms)\r\n    protected readonly COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\r\n\r\n    constructor(clientId: string, cacheConfig: Required<CacheOptions>, cryptoImpl: ICrypto, logger: Logger) {\r\n        super(clientId, cryptoImpl, logger);\r\n        this.cacheConfig = cacheConfig;\r\n        this.logger = logger;\r\n        this.internalStorage = new MemoryStorage();\r\n        this.browserStorage = this.setupBrowserStorage(this.cacheConfig.cacheLocation);\r\n        this.temporaryCacheStorage = this.setupTemporaryCacheStorage(this.cacheConfig.temporaryCacheLocation, this.cacheConfig.cacheLocation);\r\n\r\n        // Migrate cache entries from older versions of MSAL.\r\n        if (cacheConfig.cacheMigrationEnabled) {\r\n            this.migrateCacheEntries();\r\n            this.createKeyMaps();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\r\n     * @param cacheLocation\r\n     */\r\n    protected setupBrowserStorage(cacheLocation: BrowserCacheLocation | string): IWindowStorage<string> {\r\n        switch (cacheLocation) {\r\n            case BrowserCacheLocation.LocalStorage:\r\n            case BrowserCacheLocation.SessionStorage:\r\n                try {\r\n                    return new BrowserStorage(cacheLocation);\r\n                } catch (e) {\r\n                    this.logger.verbose(e);\r\n                    break;\r\n                }\r\n            case BrowserCacheLocation.MemoryStorage:\r\n            default:\r\n                break;\r\n        }\r\n        this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\r\n        return new MemoryStorage();\r\n    }\r\n\r\n    /**\r\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured temporaryCacheLocation.\r\n     * @param temporaryCacheLocation\r\n     * @param cacheLocation\r\n     */\r\n    protected setupTemporaryCacheStorage(temporaryCacheLocation: BrowserCacheLocation | string, cacheLocation: BrowserCacheLocation | string): IWindowStorage<string> {\r\n        switch (cacheLocation) {\r\n            case BrowserCacheLocation.LocalStorage:\r\n            case BrowserCacheLocation.SessionStorage:\r\n                try {\r\n                    /*\r\n                     * When users do not explicitly choose their own temporaryCacheLocation, \r\n                     * temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\r\n                     */\r\n                    return new BrowserStorage(temporaryCacheLocation || BrowserCacheLocation.SessionStorage);\r\n                } catch (e) {\r\n                    this.logger.verbose(e);\r\n                    return this.internalStorage;\r\n                }\r\n            case BrowserCacheLocation.MemoryStorage:\r\n            default:\r\n                return this.internalStorage;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Migrate all old cache entries to new schema. No rollback supported.\r\n     * @param storeAuthStateInCookie\r\n     */\r\n    protected migrateCacheEntries(): void {\r\n        const idTokenKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ID_TOKEN}`;\r\n        const clientInfoKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.CLIENT_INFO}`;\r\n        const errorKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR}`;\r\n        const errorDescKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR_DESC}`;\r\n\r\n        const idTokenValue = this.browserStorage.getItem(idTokenKey);\r\n        const clientInfoValue = this.browserStorage.getItem(clientInfoKey);\r\n        const errorValue = this.browserStorage.getItem(errorKey);\r\n        const errorDescValue = this.browserStorage.getItem(errorDescKey);\r\n\r\n        const values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\r\n        const keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];\r\n\r\n        keysToMigrate.forEach((cacheKey: string, index: number) => this.migrateCacheEntry(cacheKey, values[index]));\r\n    }\r\n\r\n    /**\r\n     * Utility function to help with migration.\r\n     * @param newKey\r\n     * @param value\r\n     * @param storeAuthStateInCookie\r\n     */\r\n    protected migrateCacheEntry(newKey: string, value: string | null): void {\r\n        if (value) {\r\n            this.setTemporaryCache(newKey, value, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Searches all cache entries for MSAL accounts and creates the account key map\r\n     * This is used to migrate users from older versions of MSAL which did not create the map.\r\n     * @returns \r\n     */\r\n    private createKeyMaps(): void {\r\n        this.logger.trace(\"BrowserCacheManager - createKeyMaps called.\");\r\n        const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\r\n        const tokenKeys = this.getItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);\r\n        if (accountKeys && tokenKeys) {\r\n            this.logger.verbose(\"BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.\");\r\n            // Key maps already exist, no need to iterate through cache\r\n            return;\r\n        }\r\n\r\n        const allKeys = this.browserStorage.getKeys();\r\n        allKeys.forEach((key) => {\r\n            if (this.isCredentialKey(key)) {\r\n                // Get item, parse, validate and write key to map\r\n                const value = this.getItem(key);\r\n                if (value) {\r\n                    const credObj = this.validateAndParseJson(value);\r\n                    if (credObj && credObj.hasOwnProperty(\"credentialType\")) {\r\n                        switch (credObj[\"credentialType\"]) {\r\n                            case CredentialType.ID_TOKEN:\r\n                                if (IdTokenEntity.isIdTokenEntity(credObj)) {\r\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map\");\r\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - idToken with key: ${key} found, saving key to token key map`);\r\n                                    const idTokenEntity = CacheManager.toObject(new IdTokenEntity(), credObj);\r\n                                    const newKey = this.updateCredentialCacheKey(key, idTokenEntity);\r\n                                    this.addTokenKey(newKey, CredentialType.ID_TOKEN);\r\n                                    return;\r\n                                } else {\r\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping.\");\r\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed idToken validation on key: ${key}`);\r\n                                }\r\n                                break;\r\n                            case CredentialType.ACCESS_TOKEN:\r\n                            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\r\n                                if (AccessTokenEntity.isAccessTokenEntity(credObj)) {\r\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map\");\r\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - accessToken with key: ${key} found, saving key to token key map`);\r\n                                    const accessTokenEntity = CacheManager.toObject(new AccessTokenEntity(), credObj);\r\n                                    const newKey = this.updateCredentialCacheKey(key, accessTokenEntity);\r\n                                    this.addTokenKey(newKey, CredentialType.ACCESS_TOKEN);\r\n                                    return;\r\n                                } else {\r\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping.\");\r\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed accessToken validation on key: ${key}`);\r\n                                }\r\n                                break;\r\n                            case CredentialType.REFRESH_TOKEN:\r\n                                if (RefreshTokenEntity.isRefreshTokenEntity(credObj)) {\r\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map\");\r\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - refreshToken with key: ${key} found, saving key to token key map`);\r\n                                    const refreshTokenEntity = CacheManager.toObject(new RefreshTokenEntity(), credObj);\r\n                                    const newKey = this.updateCredentialCacheKey(key, refreshTokenEntity);\r\n                                    this.addTokenKey(newKey, CredentialType.REFRESH_TOKEN);\r\n                                    return;\r\n                                } else {\r\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping.\");\r\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: ${key}`);\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // If credentialType isn't one of our predefined ones, it may not be an MSAL cache value. Ignore.\r\n                        }\r\n                    }\r\n                }\r\n            } \r\n            \r\n            if (this.isAccountKey(key)) {\r\n                const value = this.getItem(key);\r\n                if (value) {\r\n                    const accountObj = this.validateAndParseJson(value);\r\n                    if (accountObj && AccountEntity.isAccountEntity(accountObj)) {\r\n                        this.logger.trace(\"BrowserCacheManager:createKeyMaps - account found, saving key to account key map\");\r\n                        this.logger.tracePii(`BrowserCacheManager:createKeyMaps - account with key: ${key} found, saving key to account key map`);\r\n                        this.addAccountKeyToMap(key);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parses passed value as JSON object, JSON.parse() will throw an error.\r\n     * @param input\r\n     */\r\n    protected validateAndParseJson(jsonValue: string): object | null {\r\n        try {\r\n            const parsedJson = JSON.parse(jsonValue);\r\n            /**\r\n             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\r\n             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\r\n             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\r\n             *\r\n             */\r\n            return (parsedJson && typeof parsedJson === \"object\") ? parsedJson : null;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * fetches the entry from the browser storage based off the key\r\n     * @param key\r\n     */\r\n    getItem(key: string): string | null {\r\n        return this.browserStorage.getItem(key);\r\n    }\r\n\r\n    /**\r\n     * sets the entry in the browser storage\r\n     * @param key\r\n     * @param value\r\n     */\r\n    setItem(key: string, value: string): void {\r\n        this.browserStorage.setItem(key, value);\r\n    }\r\n\r\n    /**\r\n     * fetch the account entity from the platform cache\r\n     * @param accountKey\r\n     */\r\n    getAccount(accountKey: string): AccountEntity | null {\r\n        this.logger.trace(\"BrowserCacheManager.getAccount called\");\r\n        const account = this.getItem(accountKey);\r\n        if (!account) {\r\n            this.removeAccountKeyFromMap(accountKey);\r\n            return null;\r\n        }\r\n\r\n        const parsedAccount = this.validateAndParseJson(account);\r\n        if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\r\n            this.removeAccountKeyFromMap(accountKey);\r\n            return null;\r\n        }\r\n\r\n        return CacheManager.toObject<AccountEntity>(new AccountEntity(), parsedAccount);\r\n    }\r\n\r\n    /**\r\n     * set account entity in the platform cache\r\n     * @param key\r\n     * @param value\r\n     */\r\n    setAccount(account: AccountEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setAccount called\");\r\n        const key = account.generateAccountKey();\r\n        this.setItem(key, JSON.stringify(account));\r\n        this.addAccountKeyToMap(key);\r\n    }\r\n\r\n    /**\r\n     * Returns the array of account keys currently cached\r\n     * @returns \r\n     */\r\n    getAccountKeys(): Array<string> {\r\n        this.logger.trace(\"BrowserCacheManager.getAccountKeys called\");\r\n        const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\r\n        if (accountKeys) {\r\n            return JSON.parse(accountKeys);\r\n        }\r\n\r\n        this.logger.verbose(\"BrowserCacheManager.getAccountKeys - No account keys found\");\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Add a new account to the key map\r\n     * @param key \r\n     */\r\n    addAccountKeyToMap(key: string): void {\r\n        this.logger.trace(\"BrowserCacheManager.addAccountKeyToMap called\");\r\n        this.logger.tracePii(`BrowserCacheManager.addAccountKeyToMap called with key: ${key}`);\r\n        const accountKeys = this.getAccountKeys();\r\n        if (accountKeys.indexOf(key) === -1) {\r\n            // Only add key if it does not already exist in the map\r\n            accountKeys.push(key);\r\n            this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\r\n            this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key added\");\r\n        } else {\r\n            this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key already exists in map\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove an account from the key map\r\n     * @param key \r\n     */\r\n    removeAccountKeyFromMap(key: string): void {\r\n        this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap called\");\r\n        this.logger.tracePii(`BrowserCacheManager.removeAccountKeyFromMap called with key: ${key}`);\r\n        const accountKeys = this.getAccountKeys();\r\n        const removalIndex = accountKeys.indexOf(key);\r\n        if (removalIndex > -1) {\r\n            accountKeys.splice(removalIndex, 1);\r\n            this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\r\n            this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap account key removed\");\r\n        } else {\r\n            this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap key not found in existing map\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extends inherited removeAccount function to include removal of the account key from the map\r\n     * @param key \r\n     */\r\n    async removeAccount(key: string): Promise<void> {\r\n        super.removeAccount(key);\r\n        this.removeAccountKeyFromMap(key);\r\n    }\r\n\r\n    /**\r\n     * Removes given idToken from the cache and from the key map\r\n     * @param key \r\n     */\r\n    removeIdToken(key: string): void {\r\n        super.removeIdToken(key);\r\n        this.removeTokenKey(key, CredentialType.ID_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * Removes given accessToken from the cache and from the key map\r\n     * @param key \r\n     */\r\n    async removeAccessToken(key: string): Promise<void> {\r\n        super.removeAccessToken(key);\r\n        this.removeTokenKey(key, CredentialType.ACCESS_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * Removes given refreshToken from the cache and from the key map\r\n     * @param key \r\n     */\r\n    removeRefreshToken(key: string): void {\r\n        super.removeRefreshToken(key);\r\n        this.removeTokenKey(key, CredentialType.REFRESH_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * Gets the keys for the cached tokens associated with this clientId\r\n     * @returns \r\n     */\r\n    getTokenKeys(): TokenKeys {\r\n        this.logger.trace(\"BrowserCacheManager.getTokenKeys called\");\r\n        const item = this.getItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);\r\n        if (item) {\r\n            const tokenKeys = this.validateAndParseJson(item);\r\n            if (tokenKeys && \r\n                tokenKeys.hasOwnProperty(\"idToken\") &&\r\n                tokenKeys.hasOwnProperty(\"accessToken\") &&\r\n                tokenKeys.hasOwnProperty(\"refreshToken\")\r\n            ) {\r\n                return tokenKeys as TokenKeys;\r\n            } else {\r\n                this.logger.error(\"BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.\");\r\n            }\r\n        } else {\r\n            this.logger.verbose(\"BrowserCacheManager.getTokenKeys - No token keys found\");\r\n        }\r\n\r\n        return {\r\n            idToken: [],\r\n            accessToken: [],\r\n            refreshToken: []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Adds the given key to the token key map\r\n     * @param key \r\n     * @param type \r\n     */\r\n    addTokenKey(key: string, type: CredentialType): void {\r\n        this.logger.trace(\"BrowserCacheManager addTokenKey called\");\r\n        const tokenKeys = this.getTokenKeys();\r\n\r\n        switch (type) {\r\n            case CredentialType.ID_TOKEN:\r\n                if (tokenKeys.idToken.indexOf(key) === -1) {\r\n                    this.logger.info(\"BrowserCacheManager: addTokenKey - idToken added to map\");\r\n                    tokenKeys.idToken.push(key);\r\n                }\r\n                break;\r\n            case CredentialType.ACCESS_TOKEN:\r\n                if (tokenKeys.accessToken.indexOf(key) === -1) {\r\n                    this.logger.info(\"BrowserCacheManager: addTokenKey - accessToken added to map\");\r\n                    tokenKeys.accessToken.push(key);\r\n                }\r\n                break;\r\n            case CredentialType.REFRESH_TOKEN:\r\n                if (tokenKeys.refreshToken.indexOf(key) === -1) {\r\n                    this.logger.info(\"BrowserCacheManager: addTokenKey - refreshToken added to map\");\r\n                    tokenKeys.refreshToken.push(key);\r\n                }\r\n                break;\r\n            default:\r\n                this.logger.error(`BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: ${type}`);\r\n                ClientAuthError.createUnexpectedCredentialTypeError();\r\n        }\r\n\r\n        this.setItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));\r\n    }\r\n\r\n    /**\r\n     * Removes the given key from the token key map\r\n     * @param key \r\n     * @param type \r\n     */\r\n    removeTokenKey(key: string, type: CredentialType): void {\r\n        this.logger.trace(\"BrowserCacheManager removeTokenKey called\");\r\n        const tokenKeys = this.getTokenKeys();\r\n\r\n        switch (type) {\r\n            case CredentialType.ID_TOKEN:\r\n                this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: ${key} from map`);\r\n                const idRemoval = tokenKeys.idToken.indexOf(key);\r\n                if (idRemoval > -1) {\r\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken removed from map\");\r\n                    tokenKeys.idToken.splice(idRemoval, 1);\r\n                } else {\r\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.\");\r\n                }\r\n                break;\r\n            case CredentialType.ACCESS_TOKEN:\r\n                this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: ${key} from map`);\r\n                const accessRemoval = tokenKeys.accessToken.indexOf(key);\r\n                if (accessRemoval > -1) {\r\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken removed from map\");\r\n                    tokenKeys.accessToken.splice(accessRemoval, 1);\r\n                } else {\r\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.\");\r\n                }\r\n                break;\r\n            case CredentialType.REFRESH_TOKEN:\r\n                this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: ${key} from map`);\r\n                const refreshRemoval = tokenKeys.refreshToken.indexOf(key);\r\n                if (refreshRemoval > -1) {\r\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken removed from map\");\r\n                    tokenKeys.refreshToken.splice(refreshRemoval, 1);\r\n                } else {\r\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.\");\r\n                }\r\n                break;\r\n            default:\r\n                this.logger.error(`BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: ${type}`);\r\n                ClientAuthError.createUnexpectedCredentialTypeError();\r\n        }\r\n\r\n        this.setItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));\r\n    }\r\n\r\n    /**\r\n     * generates idToken entity from a string\r\n     * @param idTokenKey\r\n     */\r\n    getIdTokenCredential(idTokenKey: string): IdTokenEntity | null {\r\n        const value = this.getItem(idTokenKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\r\n            this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\r\n            return null;\r\n        }\r\n\r\n        const parsedIdToken = this.validateAndParseJson(value);\r\n        if (!parsedIdToken || !IdTokenEntity.isIdTokenEntity(parsedIdToken)) {\r\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\r\n            this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\r\n        return CacheManager.toObject(new IdTokenEntity(), parsedIdToken);\r\n    }\r\n\r\n    /**\r\n     * set IdToken credential to the platform cache\r\n     * @param idToken\r\n     */\r\n    setIdTokenCredential(idToken: IdTokenEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\r\n        const idTokenKey = idToken.generateCredentialKey();\r\n\r\n        this.setItem(idTokenKey, JSON.stringify(idToken));\r\n\r\n        this.addTokenKey(idTokenKey, CredentialType.ID_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * generates accessToken entity from a string\r\n     * @param key\r\n     */\r\n    getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null {\r\n        const value = this.getItem(accessTokenKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\r\n            this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\r\n            return null;\r\n        }\r\n        const parsedAccessToken = this.validateAndParseJson(value);\r\n        if (!parsedAccessToken || !AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {\r\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\r\n            this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\r\n        return CacheManager.toObject(new AccessTokenEntity(), parsedAccessToken);\r\n    }\r\n\r\n    /**\r\n     * set accessToken credential to the platform cache\r\n     * @param accessToken\r\n     */\r\n    setAccessTokenCredential(accessToken: AccessTokenEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\r\n        const accessTokenKey = accessToken.generateCredentialKey();\r\n        this.setItem(accessTokenKey, JSON.stringify(accessToken));\r\n\r\n        this.addTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * generates refreshToken entity from a string\r\n     * @param refreshTokenKey\r\n     */\r\n    getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null {\r\n        const value = this.getItem(refreshTokenKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\r\n            this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\r\n            return null;\r\n        }\r\n        const parsedRefreshToken = this.validateAndParseJson(value);\r\n        if (!parsedRefreshToken || !RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {\r\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\r\n            this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\r\n        return CacheManager.toObject(new RefreshTokenEntity(), parsedRefreshToken);\r\n    }\r\n\r\n    /**\r\n     * set refreshToken credential to the platform cache\r\n     * @param refreshToken\r\n     */\r\n    setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\r\n        const refreshTokenKey = refreshToken.generateCredentialKey();\r\n        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\r\n\r\n        this.addTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * fetch appMetadata entity from the platform cache\r\n     * @param appMetadataKey\r\n     */\r\n    getAppMetadata(appMetadataKey: string): AppMetadataEntity | null {\r\n        const value = this.getItem(appMetadataKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        const parsedMetadata = this.validateAndParseJson(value);\r\n        if (!parsedMetadata || !AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\r\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\r\n        return CacheManager.toObject(new AppMetadataEntity(), parsedMetadata);\r\n    }\r\n\r\n    /**\r\n     * set appMetadata entity to the platform cache\r\n     * @param appMetadata\r\n     */\r\n    setAppMetadata(appMetadata: AppMetadataEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\r\n        const appMetadataKey = appMetadata.generateAppMetadataKey();\r\n        this.setItem(appMetadataKey, JSON.stringify(appMetadata));\r\n    }\r\n\r\n    /**\r\n     * fetch server telemetry entity from the platform cache\r\n     * @param serverTelemetryKey\r\n     */\r\n    getServerTelemetry(serverTelemetryKey: string): ServerTelemetryEntity | null {\r\n        const value = this.getItem(serverTelemetryKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\r\n            return null;\r\n        }\r\n        const parsedMetadata = this.validateAndParseJson(value);\r\n        if (!parsedMetadata || !ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {\r\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\r\n        return CacheManager.toObject(new ServerTelemetryEntity(), parsedMetadata);\r\n    }\r\n\r\n    /**\r\n     * set server telemetry entity to the platform cache\r\n     * @param serverTelemetryKey\r\n     * @param serverTelemetry\r\n     */\r\n    setServerTelemetry(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\r\n        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getAuthorityMetadata(key: string): AuthorityMetadataEntity | null {\r\n        const value = this.internalStorage.getItem(key);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\r\n            return null;\r\n        }\r\n        const parsedMetadata = this.validateAndParseJson(value);\r\n        if (parsedMetadata && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {\r\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\r\n            return CacheManager.toObject(new AuthorityMetadataEntity(), parsedMetadata);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getAuthorityMetadataKeys(): Array<string> {\r\n        const allKeys = this.internalStorage.getKeys();\r\n        return allKeys.filter((key) => {\r\n            return this.isAuthorityMetadata(key);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets wrapper metadata in memory\r\n     * @param wrapperSKU\r\n     * @param wrapperVersion\r\n     */\r\n    setWrapperMetadata(wrapperSKU: string, wrapperVersion: string): void {\r\n        this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\r\n        this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_VER, wrapperVersion);\r\n    }\r\n\r\n    /**\r\n     * Returns wrapper metadata from in-memory storage\r\n     */\r\n    getWrapperMetadata(): [string, string] {\r\n        const sku = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU) || Constants.EMPTY_STRING;\r\n        const version = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER) || Constants.EMPTY_STRING;\r\n        return [sku, version];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param entity\r\n     */\r\n    setAuthorityMetadata(key: string, entity: AuthorityMetadataEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\r\n        this.internalStorage.setItem(key, JSON.stringify(entity));\r\n    }\r\n\r\n    /**\r\n     * Gets the active account\r\n     */\r\n    getActiveAccount(): AccountInfo | null {\r\n        const activeAccountKeyFilters = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\r\n        const activeAccountValueFilters = this.getItem(activeAccountKeyFilters);\r\n        if (!activeAccountValueFilters) {\r\n            // if new active account cache type isn't found, it's an old version, so look for that instead\r\n            this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema\");\r\n            const activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\r\n            const activeAccountValueLocal = this.getItem(activeAccountKeyLocal);\r\n            if (!activeAccountValueLocal) {\r\n                this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\r\n                return null;\r\n            }\r\n            const activeAccount = this.getAccountInfoByFilter({ localAccountId: activeAccountValueLocal })[0] || null;\r\n            if (activeAccount) {\r\n                this.logger.trace(\"BrowserCacheManager.getActiveAccount: Legacy active account cache schema found\");\r\n                this.logger.trace(\"BrowserCacheManager.getActiveAccount: Adding active account filters cache schema\");\r\n                this.setActiveAccount(activeAccount);\r\n                return activeAccount;\r\n            }\r\n            return null;\r\n        }\r\n        const activeAccountValueObj = this.validateAndParseJson(activeAccountValueFilters) as AccountInfo;\r\n        if (activeAccountValueObj) {\r\n            this.logger.trace(\"BrowserCacheManager.getActiveAccount: Active account filters schema found\");\r\n            return this.getAccountInfoByFilter({\r\n                homeAccountId: activeAccountValueObj.homeAccountId,\r\n                localAccountId: activeAccountValueObj.localAccountId\r\n            })[0] || null;\r\n        }\r\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the active account's localAccountId in cache\r\n     * @param account\r\n     */\r\n    setActiveAccount(account: AccountInfo | null): void {\r\n        const activeAccountKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\r\n        const activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\r\n        if (account) {\r\n            this.logger.verbose(\"setActiveAccount: Active account set\");\r\n            const activeAccountValue: ActiveAccountFilters = {\r\n                homeAccountId: account.homeAccountId,\r\n                localAccountId: account.localAccountId\r\n            };\r\n            this.browserStorage.setItem(activeAccountKey, JSON.stringify(activeAccountValue));\r\n            this.browserStorage.setItem(activeAccountKeyLocal, account.localAccountId);\r\n        } else {\r\n            this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\r\n            this.browserStorage.removeItem(activeAccountKey);\r\n            this.browserStorage.removeItem(activeAccountKeyLocal);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a list of accounts that match all of the filters provided\r\n     * @param account\r\n     */\r\n    getAccountInfoByFilter(accountFilter: Partial<Omit<AccountInfo, \"idTokenClaims\" | \"name\">>): AccountInfo[] {\r\n        const allAccounts = this.getAllAccounts();\r\n        this.logger.trace(`BrowserCacheManager.getAccountInfoByFilter: total ${allAccounts.length} accounts found`);\r\n\r\n        return allAccounts.filter((accountObj) => {\r\n            if (accountFilter.username && accountFilter.username.toLowerCase() !== accountObj.username.toLowerCase()) {\r\n                return false;\r\n            }\r\n\r\n            if (accountFilter.homeAccountId && accountFilter.homeAccountId !== accountObj.homeAccountId) {\r\n                return false;\r\n            }\r\n\r\n            if (accountFilter.localAccountId && accountFilter.localAccountId !== accountObj.localAccountId) {\r\n                return false;\r\n            }\r\n\r\n            if (accountFilter.tenantId && accountFilter.tenantId !== accountObj.tenantId) {\r\n                return false;\r\n            }\r\n\r\n            if (accountFilter.environment && accountFilter.environment !== accountObj.environment) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks the cache for accounts matching loginHint or SID\r\n     * @param loginHint\r\n     * @param sid\r\n     */\r\n    getAccountInfoByHints(loginHint?: string, sid?: string): AccountInfo | null {\r\n        const matchingAccounts = this.getAllAccounts().filter((accountInfo) => {\r\n            if (sid) {\r\n                const accountSid = accountInfo.idTokenClaims && accountInfo.idTokenClaims[\"sid\"];\r\n                return sid === accountSid;\r\n            }\r\n\r\n            if (loginHint) {\r\n                return loginHint === accountInfo.username;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        if (matchingAccounts.length === 1) {\r\n            return matchingAccounts[0];\r\n        } else if (matchingAccounts.length > 1) {\r\n            throw ClientAuthError.createMultipleMatchingAccountsInCacheError();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * fetch throttling entity from the platform cache\r\n     * @param throttlingCacheKey\r\n     */\r\n    getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null {\r\n        const value = this.getItem(throttlingCacheKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        const parsedThrottlingCache = this.validateAndParseJson(value);\r\n        if (!parsedThrottlingCache || !ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\r\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\r\n        return CacheManager.toObject(new ThrottlingEntity(), parsedThrottlingCache);\r\n    }\r\n\r\n    /**\r\n     * set throttling entity to the platform cache\r\n     * @param throttlingCacheKey\r\n     * @param throttlingCache\r\n     */\r\n    setThrottlingCache(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\r\n        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\r\n    }\r\n\r\n    /**\r\n     * Gets cache item with given key.\r\n     * Will retrieve from cookies if storeAuthStateInCookie is set to true.\r\n     * @param key\r\n     */\r\n    getTemporaryCache(cacheKey: string, generateKey?: boolean): string | null {\r\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\r\n        if (this.cacheConfig.storeAuthStateInCookie) {\r\n            const itemCookie = this.getItemCookie(key);\r\n            if (itemCookie) {\r\n                this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\r\n                return itemCookie;\r\n            }\r\n        }\r\n\r\n        const value = this.temporaryCacheStorage.getItem(key);\r\n        if (!value) {\r\n            // If temp cache item not found in session/memory, check local storage for items set by old versions\r\n            if (this.cacheConfig.cacheLocation === BrowserCacheLocation.LocalStorage) {\r\n                const item = this.browserStorage.getItem(key);\r\n                if (item) {\r\n                    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\r\n                    return item;\r\n                }\r\n            }\r\n            this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\r\n            return null;\r\n        }\r\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Sets the cache item with the key and value given.\r\n     * Stores in cookie if storeAuthStateInCookie is set to true.\r\n     * This can cause cookie overflow if used incorrectly.\r\n     * @param key\r\n     * @param value\r\n     */\r\n    setTemporaryCache(cacheKey: string, value: string, generateKey?: boolean): void {\r\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\r\n\r\n        this.temporaryCacheStorage.setItem(key, value);\r\n        if (this.cacheConfig.storeAuthStateInCookie) {\r\n            this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\r\n            this.setItemCookie(key, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the cache item with the given key.\r\n     * Will also clear the cookie item if storeAuthStateInCookie is set to true.\r\n     * @param key\r\n     */\r\n    removeItem(key: string): void {\r\n        this.browserStorage.removeItem(key);\r\n        this.temporaryCacheStorage.removeItem(key);\r\n        if (this.cacheConfig.storeAuthStateInCookie) {\r\n            this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\r\n            this.clearItemCookie(key);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether key is in cache.\r\n     * @param key\r\n     */\r\n    containsKey(key: string): boolean {\r\n        return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);\r\n    }\r\n\r\n    /**\r\n     * Gets all keys in window.\r\n     */\r\n    getKeys(): string[] {\r\n        return [\r\n            ...this.browserStorage.getKeys(),\r\n            ...this.temporaryCacheStorage.getKeys()\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Clears all cache entries created by MSAL.\r\n     */\r\n    async clear(): Promise<void> {\r\n        // Removes all accounts and their credentials\r\n        await this.removeAllAccounts();\r\n        this.removeAppMetadata();\r\n\r\n        // Removes all remaining MSAL cache items\r\n        this.getKeys().forEach((cacheKey: string) => {\r\n            // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js\r\n            if ((this.browserStorage.containsKey(cacheKey) || this.temporaryCacheStorage.containsKey(cacheKey)) && ((cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1) || (cacheKey.indexOf(this.clientId) !== -1))) {\r\n                this.removeItem(cacheKey);\r\n            }\r\n        });\r\n\r\n        this.internalStorage.clear();\r\n    }\r\n\r\n    /**\r\n     * Add value to cookies\r\n     * @param cookieName\r\n     * @param cookieValue\r\n     * @param expires\r\n     */\r\n    setItemCookie(cookieName: string, cookieValue: string, expires?: number): void {\r\n        let cookieStr = `${encodeURIComponent(cookieName)}=${encodeURIComponent(cookieValue)};path=/;SameSite=Lax;`;\r\n        if (expires) {\r\n            const expireTime = this.getCookieExpirationTime(expires);\r\n            cookieStr += `expires=${expireTime};`;\r\n        }\r\n\r\n        if (this.cacheConfig.secureCookies) {\r\n            cookieStr += \"Secure;\";\r\n        }\r\n\r\n        document.cookie = cookieStr;\r\n    }\r\n\r\n    /**\r\n     * Get one item by key from cookies\r\n     * @param cookieName\r\n     */\r\n    getItemCookie(cookieName: string): string {\r\n        const name = `${encodeURIComponent(cookieName)}=`;\r\n        const cookieList = document.cookie.split(\";\");\r\n        for (let i: number = 0; i < cookieList.length; i++) {\r\n            let cookie = cookieList[i];\r\n            while (cookie.charAt(0) === \" \") {\r\n                cookie = cookie.substring(1);\r\n            }\r\n            if (cookie.indexOf(name) === 0) {\r\n                return decodeURIComponent(cookie.substring(name.length, cookie.length));\r\n            }\r\n        }\r\n        return Constants.EMPTY_STRING;\r\n    }\r\n\r\n    /**\r\n     * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\r\n     */\r\n    clearMsalCookies(): void {\r\n        const cookiePrefix = `${Constants.CACHE_PREFIX}.${this.clientId}`;\r\n        const cookieList = document.cookie.split(\";\");\r\n        cookieList.forEach((cookie: string): void => {\r\n            while (cookie.charAt(0) === \" \") {\r\n                // eslint-disable-next-line no-param-reassign\r\n                cookie = cookie.substring(1);\r\n            }\r\n            if (cookie.indexOf(cookiePrefix) === 0) {\r\n                const cookieKey = cookie.split(\"=\")[0];\r\n                this.clearItemCookie(cookieKey);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear an item in the cookies by key\r\n     * @param cookieName\r\n     */\r\n    clearItemCookie(cookieName: string): void {\r\n        this.setItemCookie(cookieName, Constants.EMPTY_STRING, -1);\r\n    }\r\n\r\n    /**\r\n     * Get cookie expiration time\r\n     * @param cookieLifeDays\r\n     */\r\n    getCookieExpirationTime(cookieLifeDays: number): string {\r\n        const today = new Date();\r\n        const expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);\r\n        return expr.toUTCString();\r\n    }\r\n\r\n    /**\r\n     * Gets the cache object referenced by the browser\r\n     */\r\n    getCache(): object {\r\n        return this.browserStorage;\r\n    }\r\n\r\n    /**\r\n     * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser\r\n     */\r\n    setCache(): void {\r\n        // sets nothing\r\n    }\r\n\r\n    /**\r\n     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\r\n     * @param key\r\n     * @param addInstanceId\r\n     */\r\n    generateCacheKey(key: string): string {\r\n        const generatedKey = this.validateAndParseJson(key);\r\n        if (!generatedKey) {\r\n            if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {\r\n                return key;\r\n            }\r\n            return `${Constants.CACHE_PREFIX}.${this.clientId}.${key}`;\r\n        }\r\n\r\n        return JSON.stringify(key);\r\n    }\r\n\r\n    /**\r\n     * Create authorityKey to cache authority\r\n     * @param state\r\n     */\r\n    generateAuthorityKey(stateString: string): string {\r\n        const {\r\n            libraryState: {\r\n                id: stateId\r\n            }\r\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\r\n\r\n        return this.generateCacheKey(`${TemporaryCacheKeys.AUTHORITY}.${stateId}`);\r\n    }\r\n\r\n    /**\r\n     * Create Nonce key to cache nonce\r\n     * @param state\r\n     */\r\n    generateNonceKey(stateString: string): string {\r\n        const {\r\n            libraryState: {\r\n                id: stateId\r\n            }\r\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\r\n\r\n        return this.generateCacheKey(`${TemporaryCacheKeys.NONCE_IDTOKEN}.${stateId}`);\r\n    }\r\n\r\n    /**\r\n     * Creates full cache key for the request state\r\n     * @param stateString State string for the request\r\n     */\r\n    generateStateKey(stateString: string): string {\r\n        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\r\n        const {\r\n            libraryState: {\r\n                id: stateId\r\n            }\r\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\r\n        return this.generateCacheKey(`${TemporaryCacheKeys.REQUEST_STATE}.${stateId}`);\r\n    }\r\n\r\n    /**\r\n     * Gets the cached authority based on the cached state. Returns empty if no cached state found.\r\n     */\r\n    getCachedAuthority(cachedState: string): string | null {\r\n        const stateCacheKey = this.generateStateKey(cachedState);\r\n        const state = this.getTemporaryCache(stateCacheKey);\r\n        if (!state) {\r\n            return null;\r\n        }\r\n\r\n        const authorityCacheKey = this.generateAuthorityKey(state);\r\n        return this.getTemporaryCache(authorityCacheKey);\r\n    }\r\n\r\n    /**\r\n     * Updates account, authority, and state in cache\r\n     * @param serverAuthenticationRequest\r\n     * @param account\r\n     */\r\n    updateCacheEntries(state: string, nonce: string, authorityInstance: string, loginHint: string, account: AccountInfo | null): void {\r\n        this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\r\n        // Cache the request state\r\n        const stateCacheKey = this.generateStateKey(state);\r\n        this.setTemporaryCache(stateCacheKey, state, false);\r\n\r\n        // Cache the nonce\r\n        const nonceCacheKey = this.generateNonceKey(state);\r\n        this.setTemporaryCache(nonceCacheKey, nonce, false);\r\n\r\n        // Cache authorityKey\r\n        const authorityCacheKey = this.generateAuthorityKey(state);\r\n        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\r\n\r\n        if (account) {\r\n            const ccsCredential: CcsCredential = {\r\n                credential: account.homeAccountId,\r\n                type: CcsCredentialType.HOME_ACCOUNT_ID\r\n            };\r\n            this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\r\n        } else if (!StringUtils.isEmpty(loginHint)) {\r\n            const ccsCredential: CcsCredential = {\r\n                credential: loginHint,\r\n                type: CcsCredentialType.UPN\r\n            };\r\n            this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset all temporary cache items\r\n     * @param state\r\n     */\r\n    resetRequestCache(state: string): void {\r\n        this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\r\n        // check state and remove associated cache items\r\n        if (!StringUtils.isEmpty(state)) {\r\n            this.getKeys().forEach(key => {\r\n                if (key.indexOf(state) !== -1) {\r\n                    this.removeItem(key);\r\n                }\r\n            });\r\n        }\r\n\r\n        // delete generic interactive request parameters\r\n        if (state) {\r\n            this.removeItem(this.generateStateKey(state));\r\n            this.removeItem(this.generateNonceKey(state));\r\n            this.removeItem(this.generateAuthorityKey(state));\r\n        }\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST));\r\n        this.setInteractionInProgress(false);\r\n    }\r\n\r\n    /**\r\n     * Removes temporary cache for the provided state\r\n     * @param stateString\r\n     */\r\n    cleanRequestByState(stateString: string): void {\r\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\r\n        // Interaction is completed - remove interaction status.\r\n        if (stateString) {\r\n            const stateKey = this.generateStateKey(stateString);\r\n            const cachedState = this.temporaryCacheStorage.getItem(stateKey);\r\n            this.logger.infoPii(`BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${cachedState}`);\r\n            this.resetRequestCache(cachedState || Constants.EMPTY_STRING);\r\n        }\r\n        this.clearMsalCookies();\r\n    }\r\n\r\n    /**\r\n     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\r\n     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\r\n     * @param interactionType\r\n     */\r\n    cleanRequestByInteractionType(interactionType: InteractionType): void {\r\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\");\r\n        // Loop through all keys to find state key\r\n        this.getKeys().forEach((key) => {\r\n            // If this key is not the state key, move on\r\n            if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\r\n                return;\r\n            }\r\n\r\n            // Retrieve state value, return if not a valid value\r\n            const stateValue = this.temporaryCacheStorage.getItem(key);\r\n            if (!stateValue) {\r\n                return;\r\n            }\r\n            // Extract state and ensure it matches given InteractionType, then clean request cache\r\n            const parsedState = BrowserProtocolUtils.extractBrowserRequestState(this.cryptoImpl, stateValue);\r\n            if (parsedState && parsedState.interactionType === interactionType) {\r\n                this.logger.infoPii(`BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${stateValue}`);\r\n                this.resetRequestCache(stateValue);\r\n            }\r\n        });\r\n        this.clearMsalCookies();\r\n        this.setInteractionInProgress(false);\r\n    }\r\n\r\n    cacheCodeRequest(authCodeRequest: CommonAuthorizationCodeRequest, browserCrypto: ICrypto): void {\r\n        this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\r\n\r\n        const encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));\r\n        this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\r\n     */\r\n    getCachedRequest(state: string, browserCrypto: ICrypto): CommonAuthorizationCodeRequest {\r\n        this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\r\n        // Get token request from cache and parse as TokenExchangeParameters.\r\n        const encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);\r\n        if (!encodedTokenRequest) {\r\n            throw BrowserAuthError.createNoTokenRequestCacheError();\r\n        }\r\n\r\n        const parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest)) as CommonAuthorizationCodeRequest;\r\n        if (!parsedRequest) {\r\n            throw BrowserAuthError.createUnableToParseTokenRequestCacheError();\r\n        }\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\r\n\r\n        // Get cached authority and use if no authority is cached with request.\r\n        if (StringUtils.isEmpty(parsedRequest.authority)) {\r\n            const authorityCacheKey: string = this.generateAuthorityKey(state);\r\n            const cachedAuthority = this.getTemporaryCache(authorityCacheKey);\r\n            if (!cachedAuthority) {\r\n                throw BrowserAuthError.createNoCachedAuthorityError();\r\n            }\r\n            parsedRequest.authority = cachedAuthority;\r\n        }\r\n\r\n        return parsedRequest;\r\n    }\r\n\r\n    /**\r\n     * Gets cached native request for redirect flows\r\n     */\r\n    getCachedNativeRequest(): NativeTokenRequest | null {\r\n        this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest called\");\r\n        const cachedRequest = this.getTemporaryCache(TemporaryCacheKeys.NATIVE_REQUEST, true);\r\n        if (!cachedRequest) {\r\n            this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest: No cached native request found\");\r\n            return null;\r\n        }\r\n\r\n        const parsedRequest = this.validateAndParseJson(cachedRequest) as NativeTokenRequest;\r\n        if (!parsedRequest) {\r\n            this.logger.error(\"BrowserCacheManager.getCachedNativeRequest: Unable to parse native request\");\r\n            return null;\r\n        }\r\n\r\n        return parsedRequest;\r\n    }\r\n\r\n    isInteractionInProgress(matchClientId?: boolean): boolean {\r\n        const clientId = this.getInteractionInProgress();\r\n\r\n        if (matchClientId) {\r\n            return clientId === this.clientId;\r\n        } else {\r\n            return !!clientId;\r\n        }\r\n    }\r\n\r\n    getInteractionInProgress(): string | null {\r\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\r\n        return this.getTemporaryCache(key, false);\r\n    }\r\n\r\n    setInteractionInProgress(inProgress: boolean): void {\r\n        // Ensure we don't overwrite interaction in progress for a different clientId\r\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\r\n        if (inProgress) {\r\n            if (this.getInteractionInProgress()) {\r\n                throw BrowserAuthError.createInteractionInProgressError();\r\n            } else {\r\n                // No interaction is in progress\r\n                this.setTemporaryCache(key, this.clientId, false);\r\n            }\r\n        } else if (!inProgress && this.getInteractionInProgress() === this.clientId) {\r\n            this.removeItem(key);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns username retrieved from ADAL or MSAL v1 idToken\r\n     */\r\n    getLegacyLoginHint(): string | null {\r\n        // Only check for adal/msal token if no SSO params are being used\r\n        const adalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ADAL_ID_TOKEN);\r\n        if (adalIdTokenString) {\r\n            this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);\r\n            this.logger.verbose(\"Cached ADAL id token retrieved.\");\r\n        }\r\n\r\n        // Check for cached MSAL v1 id token\r\n        const msalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ID_TOKEN, true);\r\n        if (msalIdTokenString) {\r\n            this.removeItem(this.generateCacheKey(PersistentCacheKeys.ID_TOKEN));\r\n            this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\r\n        }\r\n\r\n        const cachedIdTokenString = msalIdTokenString || adalIdTokenString;\r\n        if (cachedIdTokenString) {\r\n            const cachedIdToken = new IdToken(cachedIdTokenString, this.cryptoImpl);\r\n            if (cachedIdToken.claims && cachedIdToken.claims.preferred_username) {\r\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\");\r\n                return cachedIdToken.claims.preferred_username;\r\n            }\r\n            else if (cachedIdToken.claims && cachedIdToken.claims.upn) {\r\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\");\r\n                return cachedIdToken.claims.upn;\r\n            }\r\n            else {\r\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\");\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Updates a credential's cache key if the current cache key is outdated\r\n     */\r\n    updateCredentialCacheKey(currentCacheKey: string, credential: ValidCredentialType): string {\r\n        const updatedCacheKey = credential.generateCredentialKey();\r\n\r\n        if (currentCacheKey !== updatedCacheKey) {\r\n            const cacheItem = this.getItem(currentCacheKey);\r\n            if (cacheItem) {\r\n                this.removeItem(currentCacheKey);\r\n                this.setItem(updatedCacheKey, cacheItem);\r\n                this.logger.verbose(`Updated an outdated ${credential.credentialType} cache key`);\r\n                return updatedCacheKey;\r\n            } else {\r\n                this.logger.error(`Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`);\r\n            }\r\n        }\r\n\r\n        return currentCacheKey;\r\n    }\r\n\r\n    /**\r\n     * Returns application id as redirect context during AcquireTokenRedirect flow.\r\n     */\r\n    getRedirectRequestContext(): string | null {\r\n        return this.getTemporaryCache(TemporaryCacheKeys.REDIRECT_CONTEXT, true);\r\n    }\r\n\r\n    /**\r\n     * Sets application id as the redirect context during AcquireTokenRedirect flow.\r\n     * @param value\r\n     */\r\n    setRedirectRequestContext(value: string): void {\r\n        this.setTemporaryCache(TemporaryCacheKeys.REDIRECT_CONTEXT, value, true);\r\n    }\r\n}\r\n\r\nexport const DEFAULT_BROWSER_CACHE_MANAGER = (clientId: string, logger: Logger): BrowserCacheManager => {\r\n    const cacheOptions: Required<CacheOptions> = {\r\n        cacheLocation: BrowserCacheLocation.MemoryStorage,\r\n        temporaryCacheLocation: BrowserCacheLocation.MemoryStorage,\r\n        storeAuthStateInCookie: false,\r\n        secureCookies: false,\r\n        cacheMigrationEnabled: false\r\n    };\r\n    return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}