{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { AccountEntity, CacheManager } from '@azure/msal-common';\nimport { EventType } from './EventType.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar EventHandler =\n/** @class */\nfunction () {\n  function EventHandler(logger, browserCrypto) {\n    this.eventCallbacks = new Map();\n    this.logger = logger;\n    this.browserCrypto = browserCrypto;\n    this.listeningToStorageEvents = false;\n    this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);\n  }\n  /**\r\n   * Adds event callbacks to array\r\n   * @param callback\r\n   */\n\n\n  EventHandler.prototype.addEventCallback = function (callback) {\n    if (typeof window !== \"undefined\") {\n      var callbackId = this.browserCrypto.createNewGuid();\n      this.eventCallbacks.set(callbackId, callback);\n      this.logger.verbose(\"Event callback registered with id: \" + callbackId);\n      return callbackId;\n    }\n\n    return null;\n  };\n  /**\r\n   * Removes callback with provided id from callback array\r\n   * @param callbackId\r\n   */\n\n\n  EventHandler.prototype.removeEventCallback = function (callbackId) {\n    this.eventCallbacks.delete(callbackId);\n    this.logger.verbose(\"Event callback \" + callbackId + \" removed.\");\n  };\n  /**\r\n   * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n   */\n\n\n  EventHandler.prototype.enableAccountStorageEvents = function () {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    if (!this.listeningToStorageEvents) {\n      this.logger.verbose(\"Adding account storage listener.\");\n      this.listeningToStorageEvents = true;\n      window.addEventListener(\"storage\", this.handleAccountCacheChange);\n    } else {\n      this.logger.verbose(\"Account storage listener already registered.\");\n    }\n  };\n  /**\r\n   * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n   */\n\n\n  EventHandler.prototype.disableAccountStorageEvents = function () {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    if (this.listeningToStorageEvents) {\n      this.logger.verbose(\"Removing account storage listener.\");\n      window.removeEventListener(\"storage\", this.handleAccountCacheChange);\n      this.listeningToStorageEvents = false;\n    } else {\n      this.logger.verbose(\"No account storage listener registered.\");\n    }\n  };\n  /**\r\n   * Emits events by calling callback with event message\r\n   * @param eventType\r\n   * @param interactionType\r\n   * @param payload\r\n   * @param error\r\n   */\n\n\n  EventHandler.prototype.emitEvent = function (eventType, interactionType, payload, error) {\n    var _this = this;\n\n    if (typeof window !== \"undefined\") {\n      var message_1 = {\n        eventType: eventType,\n        interactionType: interactionType || null,\n        payload: payload || null,\n        error: error || null,\n        timestamp: Date.now()\n      };\n      this.logger.info(\"Emitting event: \" + eventType);\n      this.eventCallbacks.forEach(function (callback, callbackId) {\n        _this.logger.verbose(\"Emitting event to callback \" + callbackId + \": \" + eventType);\n\n        callback.apply(null, [message_1]);\n      });\n    }\n  };\n  /**\r\n   * Emit account added/removed events when cached accounts are changed in a different tab or frame\r\n   */\n\n\n  EventHandler.prototype.handleAccountCacheChange = function (e) {\n    try {\n      var cacheValue = e.newValue || e.oldValue;\n\n      if (!cacheValue) {\n        return;\n      }\n\n      var parsedValue = JSON.parse(cacheValue);\n\n      if (typeof parsedValue !== \"object\" || !AccountEntity.isAccountEntity(parsedValue)) {\n        return;\n      }\n\n      var accountEntity = CacheManager.toObject(new AccountEntity(), parsedValue);\n      var accountInfo = accountEntity.getAccountInfo();\n\n      if (!e.oldValue && e.newValue) {\n        this.logger.info(\"Account was added to cache in a different window\");\n        this.emitEvent(EventType.ACCOUNT_ADDED, undefined, accountInfo);\n      } else if (!e.newValue && e.oldValue) {\n        this.logger.info(\"Account was removed from cache in a different window\");\n        this.emitEvent(EventType.ACCOUNT_REMOVED, undefined, accountInfo);\n      }\n    } catch (e) {\n      return;\n    }\n  };\n\n  return EventHandler;\n}();\n\nexport { EventHandler };","map":{"version":3,"mappings":"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","names":["logger","browserCrypto","eventCallbacks","Map","listeningToStorageEvents","handleAccountCacheChange","bind","EventHandler","callback","window","callbackId","createNewGuid","set","verbose","delete","addEventListener","removeEventListener","eventType","interactionType","payload","error","message_1","timestamp","Date","now","info","forEach","_this","apply","e","cacheValue","newValue","oldValue","parsedValue","JSON","parse","AccountEntity","isAccountEntity","accountEntity","CacheManager","toObject","accountInfo","getAccountInfo","emitEvent","EventType","ACCOUNT_ADDED","undefined","ACCOUNT_REMOVED"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-browser/src/event/EventHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICrypto, Logger, AccountEntity, CacheManager } from \"@azure/msal-common\";\r\nimport { InteractionType } from \"../utils/BrowserConstants\";\r\nimport { EventCallbackFunction, EventError, EventMessage, EventPayload } from \"./EventMessage\";\r\nimport { EventType } from \"./EventType\";\r\n\r\nexport class EventHandler {\r\n    // Callback for subscribing to events\r\n    private eventCallbacks: Map<string, EventCallbackFunction>;\r\n    private logger: Logger;\r\n    private browserCrypto: ICrypto;\r\n    private listeningToStorageEvents: boolean;\r\n\r\n    constructor(logger: Logger, browserCrypto: ICrypto) {\r\n        this.eventCallbacks = new Map();\r\n        this.logger = logger;\r\n        this.browserCrypto = browserCrypto;\r\n        this.listeningToStorageEvents = false;\r\n        this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     */\r\n    addEventCallback(callback: EventCallbackFunction): string | null {\r\n        if (typeof window !== \"undefined\") {\r\n            const callbackId = this.browserCrypto.createNewGuid();\r\n            this.eventCallbacks.set(callbackId, callback);\r\n            this.logger.verbose(`Event callback registered with id: ${callbackId}`);\r\n    \r\n            return callbackId;\r\n        }\r\n        \r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */\r\n    removeEventCallback(callbackId: string): void {\r\n        this.eventCallbacks.delete(callbackId);\r\n        this.logger.verbose(`Event callback ${callbackId} removed.`);\r\n    }\r\n\r\n    /**\r\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */\r\n    enableAccountStorageEvents(): void {\r\n        if (typeof window === \"undefined\") {\r\n            return;\r\n        }\r\n\r\n        if (!this.listeningToStorageEvents) {\r\n            this.logger.verbose(\"Adding account storage listener.\");\r\n            this.listeningToStorageEvents = true;\r\n            window.addEventListener(\"storage\", this.handleAccountCacheChange);\r\n        } else {\r\n            this.logger.verbose(\"Account storage listener already registered.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */\r\n    disableAccountStorageEvents(): void {\r\n        if (typeof window === \"undefined\") {\r\n            return;\r\n        }\r\n\r\n        if (this.listeningToStorageEvents) {\r\n            this.logger.verbose(\"Removing account storage listener.\");\r\n            window.removeEventListener(\"storage\", this.handleAccountCacheChange);\r\n            this.listeningToStorageEvents = false;\r\n        } else {\r\n            this.logger.verbose(\"No account storage listener registered.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emits events by calling callback with event message\r\n     * @param eventType\r\n     * @param interactionType\r\n     * @param payload\r\n     * @param error\r\n     */\r\n    emitEvent(eventType: EventType, interactionType?: InteractionType, payload?: EventPayload, error?: EventError): void {\r\n        if (typeof window !== \"undefined\") {\r\n            const message: EventMessage = {\r\n                eventType: eventType,\r\n                interactionType: interactionType || null,\r\n                payload: payload || null,\r\n                error: error || null,\r\n                timestamp: Date.now()\r\n            };\r\n\r\n            this.logger.info(`Emitting event: ${eventType}`);\r\n\r\n            this.eventCallbacks.forEach((callback: EventCallbackFunction, callbackId: string) => {\r\n                this.logger.verbose(`Emitting event to callback ${callbackId}: ${eventType}`);\r\n                callback.apply(null, [message]);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emit account added/removed events when cached accounts are changed in a different tab or frame\r\n     */\r\n    private handleAccountCacheChange(e: StorageEvent): void {\r\n        try {\r\n            const cacheValue = e.newValue || e.oldValue;\r\n            if (!cacheValue) {\r\n                return;\r\n            }\r\n            const parsedValue = JSON.parse(cacheValue);\r\n            if (typeof parsedValue !== \"object\" || !AccountEntity.isAccountEntity(parsedValue)) {\r\n                return;\r\n            }\r\n            const accountEntity = CacheManager.toObject<AccountEntity>(new AccountEntity(), parsedValue);\r\n            const accountInfo = accountEntity.getAccountInfo();\r\n            if (!e.oldValue && e.newValue) {\r\n                this.logger.info(\"Account was added to cache in a different window\");\r\n                this.emitEvent(EventType.ACCOUNT_ADDED, undefined, accountInfo);\r\n            } else if (!e.newValue && e.oldValue) {\r\n                this.logger.info(\"Account was removed from cache in a different window\");\r\n                this.emitEvent(EventType.ACCOUNT_REMOVED, undefined, accountInfo);\r\n            }\r\n        } catch (e) {\r\n            return;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}