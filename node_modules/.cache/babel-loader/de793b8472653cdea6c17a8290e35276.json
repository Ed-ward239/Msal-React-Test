{"ast":null,"code":"/*! @azure/msal-common v13.0.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { AuthenticationScheme, GrantType, HeaderNames, Errors } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from '../error/InteractionRequiredAuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 refresh token client\r\n */\n\nvar RefreshTokenClient =\n/** @class */\nfunction (_super) {\n  __extends(RefreshTokenClient, _super);\n\n  function RefreshTokenClient(configuration, performanceClient) {\n    return _super.call(this, configuration, performanceClient) || this;\n  }\n\n  RefreshTokenClient.prototype.acquireToken = function (request) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, reqTimestamp, response, httpVerToken, requestId, responseHandler;\n\n      var _this = this;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n            atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n            this.logger.verbose(\"RefreshTokenClientAcquireToken called\", request.correlationId);\n            reqTimestamp = TimeUtils.nowSeconds();\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            response = _h.sent();\n            httpVerToken = (_d = response.headers) === null || _d === void 0 ? void 0 : _d[HeaderNames.X_MS_HTTP_VERSION];\n            atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n              refreshTokenSize: ((_e = response.body.refresh_token) === null || _e === void 0 ? void 0 : _e.length) || 0\n            });\n\n            if (httpVerToken) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n                httpVerToken: httpVerToken\n              });\n            }\n\n            requestId = (_f = response.headers) === null || _f === void 0 ? void 0 : _f[HeaderNames.X_MS_REQUEST_ID];\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            (_g = this.performanceClient) === null || _g === void 0 ? void 0 : _g.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\n            return [2\n            /*return*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId).then(function (result) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              _this.logger.verbose(\"Error in fetching refresh token\", request.correlationId);\n\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;\n      return __generator(this, function (_e) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n          throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n\n        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId); // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n\n        if (!request.account) {\n          throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n\n        isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment); // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n\n        if (isFOCI) {\n          try {\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n            return [2\n            /*return*/\n            , this.acquireTokenWithCachedRefreshToken(request, true)];\n          } catch (e) {\n            noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n            clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR; // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n\n            if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n              (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n              return [2\n              /*return*/\n              , this.acquireTokenWithCachedRefreshToken(request, false)]; // throw in all other cases\n            } else {\n              throw e;\n            }\n          }\n        } // fall back to application refresh token acquisition\n\n\n        (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        return [2\n        /*return*/\n        , this.acquireTokenWithCachedRefreshToken(request, false)];\n      });\n    });\n  };\n  /**\r\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, refreshToken, refreshTokenRequest;\n      return __generator(this, function (_d) {\n        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        this.logger.verbose(\"RefreshTokenClientAcquireTokenWithCachedRefreshToken called\", request.correlationId);\n        refreshToken = this.cacheManager.getRefreshToken(request.account, foci);\n\n        if (!refreshToken) {\n          atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.discardMeasurement();\n          throw InteractionRequiredAuthError.createNoTokensFoundError();\n        } // attach cached RT size to the current measurement\n\n\n        atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n          success: true\n        });\n        refreshTokenRequest = __assign(__assign({}, request), {\n          refreshToken: refreshToken.secret,\n          authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n          ccsCredential: {\n            credential: request.account.homeAccountId,\n            type: CcsCredentialType.HOME_ACCOUNT_ID\n          }\n        });\n        (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n        return [2\n        /*return*/\n        , this.acquireToken(refreshTokenRequest)];\n      });\n    });\n  };\n  /**\r\n   * Constructs the network message and makes a NW call to the underlying secure token service\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenMeasurement, queryParametersString, endpoint, requestBody, headers, thumbprint;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n            acquireTokenMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            return [4\n            /*yield*/\n            , this.createTokenRequestBody(request)];\n\n          case 1:\n            requestBody = _d.sent();\n            headers = this.createTokenRequestHeaders(request.ccsCredential);\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [2\n            /*return*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint).then(function (result) {\n              acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                success: false\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper function to create the token request body\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.createTokenRequestBody = function (request) {\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, acquireTokenMeasurement, parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, clientInfo;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n            correlationId = request.correlationId;\n            acquireTokenMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            parameterBuilder.addScopes(request.scopes);\n            parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n            parameterBuilder.addClientInfo();\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            parameterBuilder.addThrottling();\n\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n\n            parameterBuilder.addCorrelationId(correlationId);\n            parameterBuilder.addRefreshToken(request.refreshToken);\n\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n            return [4\n            /*yield*/\n            , popTokenGenerator.generateCnf(request)];\n\n          case 1:\n            reqCnfData = _d.sent(); // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                  success: false\n                });\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n\n            _d.label = 3;\n\n          case 3:\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n\n            if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n              switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n\n                  break;\n\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                  break;\n              }\n            }\n\n            acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n              success: true\n            });\n            return [2\n            /*return*/\n            , parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n\n  return RefreshTokenClient;\n}(BaseClient);\n\nexport { RefreshTokenClient };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;AAGG;;AA0BH;;AAEG;;AACH;AAAA;AAAA;EAAwCA,SAAU,4BAAV;;EACpC,SAAYC,kBAAZ,CAAYC,aAAZ,EAAgDC,iBAAhD,EAAsF;WAClFC,MAAM,KAAN,CAAM,IAAN,EAAMF,aAAN,EAAqBC,iBAArB,KAAuC;EAE1C;;EACYF,kBAAY,UAAZ,CAAYI,YAAZ,GAAb,UAA0BC,OAA1B,EAA4D;;;;;;;;;;;YACxD,WAAKH,iBAAL,MAAsB,IAAtB,IAAsBI,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,mBAAF,CAAsBC,iBAAiB,CAACC,8BAAxC,EAAwEJ,OAAO,CAACK,aAAhF,CAAtB;YAEMC,cAAc,GAAG,WAAKT,iBAAL,MAAsB,IAAtB,IAAsBU,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,gBAAF,CAAmBL,iBAAiB,CAACC,8BAArC,EAAqEJ,OAAO,CAACK,aAA7E,CAAvC;YACN,KAAKI,MAAL,CAAYC,OAAZ,CAAoB,uCAApB,EAA6DV,OAAO,CAACK,aAArE;YACMM,YAAY,GAAGC,SAAS,CAACC,UAAV,EAAf;YACN,WAAKhB,iBAAL,MAAsB,IAAtB,IAAsBiB,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,eAAF,CAAkBZ,iBAAiB,CAACa,qCAApC,EAA2EhB,OAAO,CAACK,aAAnF,CAAtB;YACiB,OAAM;YAAA;YAAA,OAAKY,mBAAL,CAAyBjB,OAAzB,EAAkC,KAAKkB,SAAvC,EAAN;;;YAAXC,QAAQ,GAAGC,EAAuD,KAAvD,EAAX;YACAC,YAAY,SAAGF,QAAQ,CAACG,OAAZ,MAAmB,IAAnB,IAAmBC,aAAnB,GAAmB,MAAnB,GAAmBA,GAAGC,WAAW,CAACC,iBAAf,CAA/B;YACNnB,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAEoB,eAAhB,CAAgC;cAC5BC,gBAAgB,EAAE,eAAQ,CAACC,IAAT,CAAcC,aAAd,MAA2B,IAA3B,IAA2BC,aAA3B,GAA2B,MAA3B,GAA2BA,GAAEC,MAA7B,KAAuC;YAD7B,CAAhC;;YAGA,IAAGV,YAAH,EACA;cACIf,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAEoB,eAAhB,CAAgC;gBAC5BL,YAAY;cADgB,CAAhC;YAGH;;YAGKW,SAAS,SAAGb,QAAQ,CAACG,OAAZ,MAAmB,IAAnB,IAAmBW,aAAnB,GAAmB,MAAnB,GAAmBA,GAAGT,WAAW,CAACU,eAAf,CAA5B;YACAC,eAAe,GAAG,IAAIC,eAAJ,CACpB,KAAKC,MAAL,CAAYC,WAAZ,CAAwBC,QADJ,EAEpB,KAAKC,YAFe,EAGpB,KAAKC,WAHe,EAIpB,KAAKhC,MAJe,EAKpB,KAAK4B,MAAL,CAAYK,iBALQ,EAMpB,KAAKL,MAAL,CAAYM,iBANQ,CAAlB;YAQNR,eAAe,CAACS,qBAAhB,CAAsCzB,QAAQ,CAACS,IAA/C;YAEA,WAAK/B,iBAAL,MAAsB,IAAtB,IAAsBgD,aAAtB,GAAsB,MAAtB,GAAsBA,GAAE9B,eAAF,CAAkBZ,iBAAiB,CAAC2C,yBAApC,EAA+D9C,OAAO,CAACK,aAAvE,CAAtB;YACA;YAAA;YAAA,EAAO8B,eAAe,CAACY,yBAAhB,CACH5B,QAAQ,CAACS,IADN,EAEH,KAAKV,SAFF,EAGHP,YAHG,EAIHX,OAJG,EAKHgD,SALG,EAMHA,SANG,EAOH,IAPG,EAQHhD,OAAO,CAACiD,UARL,EASHjB,SATG,EAULkB,IAVK,CAUA,UAACC,MAAD,EAA6B;cAChC7C,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAE8C,cAAhB,CAA+B;gBAC3BC,OAAO,EAAE;cADkB,CAA/B;cAGA,OAAOF,MAAP;YACH,CAfM,EAgBFG,KAhBE,CAgBI,UAACC,KAAD,EAAM;cACTC,KAAI,CAAC/C,MAAL,CAAYC,OAAZ,CAAoB,iCAApB,EAAuDV,OAAO,CAACK,aAA/D;;cACAC,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAE8C,cAAhB,CAA+B;gBAC3BK,SAAS,EAAEF,KAAK,CAACE,SADU;gBAE3BC,YAAY,EAAEH,KAAK,CAACI,QAFO;gBAG3BN,OAAO,EAAE;cAHkB,CAA/B;cAKA,MAAME,KAAN;YACH,CAxBE,CAAP;;;;EAyBH,CAzDY;EA2Db;;;AAGG;;;EACU5D,kBAA0B,UAA1B,CAA0BiE,0BAA1B,GAAb,UAAwC5D,OAAxC,EAAwE;;;;;;;QAEpE,IAAI,CAACA,OAAL,EAAc;UACV,MAAM6D,wBAAwB,CAACC,4BAAzB,EAAN;QACH;;QAED,WAAKjE,iBAAL,MAAsB,IAAtB,IAAsBI,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,mBAAF,CAAsBC,iBAAiB,CAAC4D,4CAAxC,EAAsF/D,OAAO,CAACK,aAA9F,CAAtB;;QAGA,IAAI,CAACL,OAAO,CAACgE,OAAb,EAAsB;UAClB,MAAMC,eAAe,CAACC,mCAAhB,EAAN;QACH;;QAGKC,MAAM,GAAG,KAAK3B,YAAL,CAAkB4B,iBAAlB,CAAoCpE,OAAO,CAACgE,OAAR,CAAgBK,WAApD,CAAT;;QAGN,IAAIF,MAAJ,EAAY;UACR,IAAI;YACA,WAAKtE,iBAAL,MAAsB,IAAtB,IAAsBU,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEQ,eAAF,CAAkBZ,iBAAiB,CAACmE,oDAApC,EAA0FtE,OAAO,CAACK,aAAlG,CAAtB;YACA,OAAO;YAAA;YAAA,OAAKkE,kCAAL,CAAwCvE,OAAxC,EAAiD,IAAjD,EAAP;UACH,CAHD,CAGE,OAAOwE,CAAP,EAAU;YACFC,iBAAiB,GAAGD,CAAC,YAAYE,4BAAb,IAA6CF,CAAC,CAACf,SAAF,KAAgBkB,mCAAmC,CAACC,kBAApC,CAAuDC,IAAxI;YACAC,+BAA+B,GAAGN,CAAC,YAAYO,WAAb,IAA4BP,CAAC,CAACf,SAAF,KAAgBuB,MAAM,CAACC,mBAAnD,IAA0ET,CAAC,CAACb,QAAF,KAAeqB,MAAM,CAACE,qBAAlI,CAFE;;YAKR,IAAIT,iBAAiB,IAAIK,+BAAzB,EAA0D;cACtD,WAAKjF,iBAAL,MAAsB,IAAtB,IAAsBiB,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,eAAF,CAAkBZ,iBAAiB,CAACmE,oDAApC,EAA0FtE,OAAO,CAACK,aAAlG,CAAtB;cACA,OAAO;cAAA;cAAA,OAAKkE,kCAAL,CAAwCvE,OAAxC,EAAiD,KAAjD,EAAP,CAFsD;YAIzD,CAJD,MAIO;cACH,MAAMwE,CAAN;YACH;UACJ;QACJ;;;QAED,WAAK3E,iBAAL,MAAsB,IAAtB,IAAsB0B,aAAtB,GAAsB,MAAtB,GAAsBA,GAAER,eAAF,CAAkBZ,iBAAiB,CAACmE,oDAApC,EAA0FtE,OAAO,CAACK,aAAlG,CAAtB;QACA,OAAO;QAAA;QAAA,OAAKkE,kCAAL,CAAwCvE,OAAxC,EAAiD,KAAjD,EAAP;;;EAEH,CAvCY;EAyCb;;;AAGG;;;EACWL,kEAAd,UAAiDK,OAAjD,EAAmFmF,IAAnF,EAAgG;;;;;;QAC5F,WAAKtF,iBAAL,MAAsB,IAAtB,IAAsBI,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,mBAAF,CAAsBC,iBAAiB,CAACmE,oDAAxC,EAA8FtE,OAAO,CAACK,aAAtG,CAAtB;QAIMC,cAAc,GAAG,WAAKT,iBAAL,MAAsB,IAAtB,IAAsBU,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,gBAAF,CAAmBL,iBAAiB,CAACmE,oDAArC,EAA2FtE,OAAO,CAACK,aAAnG,CAAvC;QACN,KAAKI,MAAL,CAAYC,OAAZ,CAAoB,6DAApB,EAAmFV,OAAO,CAACK,aAA3F;QACM+E,YAAY,GAAG,KAAK5C,YAAL,CAAkB6C,eAAlB,CAAkCrF,OAAO,CAACgE,OAA1C,EAAmDmB,IAAnD,CAAf;;QAEN,IAAI,CAACC,YAAL,EAAmB;UACf9E,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAEgF,kBAAhB;UACA,MAAMZ,4BAA4B,CAACa,wBAA7B,EAAN;QACH;;;QAEDjF,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAE8C,cAAhB,CAA+B;UAC3BC,OAAO,EAAE;QADkB,CAA/B;QAIMmC,mBAAmB,yBAClBxF,OADkB,GAErB;UAAAoF,YAAY,EAAEA,YAAY,CAACK,MAA3B;UACAC,oBAAoB,EAAE1F,OAAO,CAAC0F,oBAAR,IAAgCC,oBAAoB,CAACC,MAD3E;UAEAC,aAAa,EAAE;YACXC,UAAU,EAAE9F,OAAO,CAACgE,OAAR,CAAgB+B,aADjB;YAEXC,IAAI,EAAEC,iBAAiB,CAACC;UAFb;QAFf,CAFqB,CAAnB;QAUN,WAAKrG,iBAAL,MAAsB,IAAtB,IAAsBiB,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,eAAF,CAAkBZ,iBAAiB,CAACC,8BAApC,EAAoEJ,OAAO,CAACK,aAA5E,CAAtB;QACA;QAAA;QAAA,EAAO,KAAKN,YAAL,CAAkByF,mBAAlB,CAAP;;;EACH,CA9Ba;EAgCd;;;;AAIG;;;EACW7F,mDAAd,UAAkCK,OAAlC,EAAsEkB,SAAtE,EAA0F;;;;;;;;YAEtF,WAAKrB,iBAAL,MAAsB,IAAtB,IAAsBI,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,mBAAF,CAAsBC,iBAAiB,CAACa,qCAAxC,EAA+EhB,OAAO,CAACK,aAAvF,CAAtB;YACM8F,uBAAuB,GAAG,WAAKtG,iBAAL,MAAsB,IAAtB,IAAsBU,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,gBAAF,CAAmBL,iBAAiB,CAACa,qCAArC,EAA4EhB,OAAO,CAACK,aAApF,CAAhD;YACN,WAAKR,iBAAL,MAAsB,IAAtB,IAAsBiB,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,eAAF,CAAkBZ,iBAAiB,CAACiG,wCAApC,EAA8EpG,OAAO,CAACK,aAAtF,CAAtB;YAEMgG,qBAAqB,GAAG,KAAKC,0BAAL,CAAgCtG,OAAhC,CAAxB;YACAuG,QAAQ,GAAGC,SAAS,CAACC,iBAAV,CAA4BvF,SAAS,CAACwF,aAAtC,EAAqDL,qBAArD,CAAX;YAEc;YAAA;YAAA,EAAM,KAAKM,sBAAL,CAA4B3G,OAA5B,CAAN;;;YAAd4G,WAAW,GAAGrF,EAA0C,KAA1C,EAAd;YACAD,OAAO,GAA2B,KAAKuF,yBAAL,CAA+B7G,OAAO,CAAC6F,aAAvC,CAAlC;YACAiB,UAAU,GAAsB;cAClCvE,QAAQ,EAAE,KAAKF,MAAL,CAAYC,WAAZ,CAAwBC,QADA;cAElCrB,SAAS,EAAEA,SAAS,CAAC6F,kBAFa;cAGlCC,MAAM,EAAEhH,OAAO,CAACgH,MAHkB;cAIlCC,MAAM,EAAEjH,OAAO,CAACiH,MAJkB;cAKlCvB,oBAAoB,EAAE1F,OAAO,CAAC0F,oBALI;cAMlCwB,qBAAqB,EAAElH,OAAO,CAACkH,qBANG;cAOlCC,kBAAkB,EAAEnH,OAAO,CAACmH,kBAPM;cAQlCC,SAAS,EAAEpH,OAAO,CAACoH,SARe;cASlCC,MAAM,EAAErH,OAAO,CAACqH;YATkB,CAAhC;YAYN,OAAO;YAAA;YAAA,OAAKC,0BAAL,CAAgCf,QAAhC,EAA0CK,WAA1C,EAAuDtF,OAAvD,EAAgEwF,UAAhE,EACF5D,IADE,CACG,UAACC,MAAD,EAAO;cACTgD,uBAAuB,SAAvB,2BAAuB,WAAvB,GAAuB,MAAvB,0BAAuB,CAAE/C,cAAzB,CAAwC;gBACpCC,OAAO,EAAE;cAD2B,CAAxC;cAGA,OAAOF,MAAP;YACH,CANE,EAOFG,KAPE,CAOI,UAACC,KAAD,EAAM;cACT4C,uBAAuB,SAAvB,2BAAuB,WAAvB,GAAuB,MAAvB,0BAAuB,CAAE/C,cAAzB,CAAwC;gBACpCC,OAAO,EAAE;cAD2B,CAAxC;cAGA,MAAME,KAAN;YACH,CAZE,EAAP;;;;EAaH,CApCa;EAsCd;;;AAGG;;;EACW5D,kBAAsB,UAAtB,CAAsBgH,sBAAtB,GAAd,UAAqC3G,OAArC,EAAuE;;;;;;;;YACnE,WAAKH,iBAAL,MAAsB,IAAtB,IAAsBI,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,mBAAF,CAAsBC,iBAAiB,CAACiG,wCAAxC,EAAkFpG,OAAO,CAACK,aAA1F,CAAtB;YAEMA,aAAa,GAAGL,OAAO,CAACK,aAAxB;YACA8F,uBAAuB,GAAG,WAAKtG,iBAAL,MAAwB,IAAxB,IAAwBU,aAAxB,GAAwB,MAAxB,GAAwBA,oBAAiBJ,iBAAiB,CAACoH,mCAAnC,EAAwElH,aAAxE,CAAlD;YACAmH,gBAAgB,GAAG,IAAIC,uBAAJ,EAAnB;YAEND,gBAAgB,CAACE,WAAjB,CAA6B,KAAKrF,MAAL,CAAYC,WAAZ,CAAwBC,QAArD;YAEAiF,gBAAgB,CAACG,SAAjB,CAA2B3H,OAAO,CAACgH,MAAnC;YAEAQ,gBAAgB,CAACI,YAAjB,CAA8BC,SAAS,CAACC,mBAAxC;YAEAN,gBAAgB,CAACO,aAAjB;YAEAP,gBAAgB,CAACQ,cAAjB,CAAgC,KAAK3F,MAAL,CAAY4F,WAA5C;YACAT,gBAAgB,CAACU,uBAAjB,CAAyC,KAAK7F,MAAL,CAAY8F,SAAZ,CAAsBC,WAA/D;YACAZ,gBAAgB,CAACa,aAAjB;;YAEA,IAAI,KAAKC,sBAAT,EAAiC;cAC7Bd,gBAAgB,CAACe,kBAAjB,CAAoC,KAAKD,sBAAzC;YACH;;YAEDd,gBAAgB,CAACgB,gBAAjB,CAAkCnI,aAAlC;YAEAmH,gBAAgB,CAACiB,eAAjB,CAAiCzI,OAAO,CAACoF,YAAzC;;YAEA,IAAI,KAAK/C,MAAL,CAAYqG,iBAAZ,CAA8BC,YAAlC,EAAgD;cAC5CnB,gBAAgB,CAACoB,eAAjB,CAAiC,KAAKvG,MAAL,CAAYqG,iBAAZ,CAA8BC,YAA/D;YACH;;YAED,IAAI,KAAKtG,MAAL,CAAYqG,iBAAZ,CAA8BG,eAAlC,EAAmD;cACzCA,eAAe,GAAG,KAAKxG,MAAL,CAAYqG,iBAAZ,CAA8BG,eAAhD;cACNrB,gBAAgB,CAACsB,kBAAjB,CAAoCD,eAAe,CAACE,SAApD;cACAvB,gBAAgB,CAACwB,sBAAjB,CAAwCH,eAAe,CAACI,aAAxD;YACH;;kBAEGjJ,OAAO,CAAC0F,oBAAR,KAAiCC,oBAAoB,CAACuD,MAAtD,OAAyD;YAAA;YAAA,IAAzD;YACMC,iBAAiB,GAAG,IAAIC,iBAAJ,CAAsB,KAAK3G,WAA3B,EAAwC,KAAK5C,iBAA7C,CAApB;YACN,WAAKA,iBAAL,MAAsB,IAAtB,IAAsBiB,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,eAAF,CAAkBZ,iBAAiB,CAACkJ,mBAApC,EAAyDrJ,OAAO,CAACK,aAAjE,CAAtB;YACmB;YAAA;YAAA,EAAM8I,iBAAiB,CAACG,WAAlB,CAA8BtJ,OAA9B,CAAN;;;YAAbuJ,UAAU,GAAGhI,EAA4C,KAA5C,EAAb;;YAENiG,gBAAgB,CAACgC,WAAjB,CAA6BD,UAAU,CAACE,YAAxC;;;;;;YACG,IAAIzJ,OAAO,CAAC0F,oBAAR,KAAiCC,oBAAoB,CAAC+D,GAA1D,EAA+D;cAClE,IAAI1J,OAAO,CAAC2J,MAAZ,EAAoB;gBAChBnC,gBAAgB,CAACoC,SAAjB,CAA2B5J,OAAO,CAAC2J,MAAnC;cACH,CAFD,MAEO;gBACHxD,uBAAuB,SAAvB,2BAAuB,WAAvB,GAAuB,MAAvB,0BAAuB,CAAE/C,cAAzB,CAAwC;kBACpCC,OAAO,EAAE;gBAD2B,CAAxC;gBAGA,MAAMQ,wBAAwB,CAACgG,wBAAzB,EAAN;cACH;YACJ;;;;;YAED,IAAI,CAACC,WAAW,CAACC,UAAZ,CAAuB/J,OAAO,CAACiH,MAA/B,CAAD,IAA2C,KAAK5E,MAAL,CAAYC,WAAZ,CAAwB0H,kBAAxB,IAA8C,KAAK3H,MAAL,CAAYC,WAAZ,CAAwB0H,kBAAxB,CAA2CjI,MAA3C,GAAoD,CAAjJ,EAAoJ;cAChJyF,gBAAgB,CAACyC,SAAjB,CAA2BjK,OAAO,CAACiH,MAAnC,EAA2C,KAAK5E,MAAL,CAAYC,WAAZ,CAAwB0H,kBAAnE;YACH;;YAED,IAAI,KAAK3H,MAAL,CAAY6H,aAAZ,CAA0BC,oBAA1B,IAAkDnK,OAAO,CAAC6F,aAA9D,EAA6E;cACzE,QAAQ7F,OAAO,CAAC6F,aAAR,CAAsBG,IAA9B;gBACI,KAAKC,iBAAiB,CAACC,eAAvB;kBACI,IAAI;oBACMkE,UAAU,GAAGC,gCAAgC,CAACrK,OAAO,CAAC6F,aAAR,CAAsBC,UAAvB,CAA7C;oBACN0B,gBAAgB,CAAC8C,SAAjB,CAA2BF,UAA3B;kBACH,CAHD,CAGE,OAAO5F,CAAP,EAAU;oBACR,KAAK/D,MAAL,CAAYC,OAAZ,CAAoB,qDAAqD8D,CAAzE;kBACH;;kBACD;;gBACJ,KAAKyB,iBAAiB,CAACsE,GAAvB;kBACI/C,gBAAgB,CAACgD,SAAjB,CAA2BxK,OAAO,CAAC6F,aAAR,CAAsBC,UAAjD;kBACA;cAXR;YAaH;;YACDK,uBAAuB,SAAvB,2BAAuB,WAAvB,GAAuB,MAAvB,0BAAuB,CAAE/C,cAAzB,CAAwC;cACpCC,OAAO,EAAE;YAD2B,CAAxC;YAGA;YAAA;YAAA,EAAOmE,gBAAgB,CAACiD,iBAAjB,EAAP;;;;EACH,CA7Ea;;EA8ElB,OAAC9K,kBAAD;AA9QA,EAAwC+K,UAAxC","names":["__extends","RefreshTokenClient","configuration","performanceClient","_super","acquireToken","request","_a","addQueueMeasurement","PerformanceEvents","RefreshTokenClientAcquireToken","correlationId","atsMeasurement","_b","startMeasurement","logger","verbose","reqTimestamp","TimeUtils","nowSeconds","_c","setPreQueueTime","RefreshTokenClientExecuteTokenRequest","executeTokenRequest","authority","response","_h","httpVerToken","headers","_d","HeaderNames","X_MS_HTTP_VERSION","addStaticFields","refreshTokenSize","body","refresh_token","_e","length","requestId","_f","X_MS_REQUEST_ID","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","_g","HandleServerTokenResponse","handleServerTokenResponse","undefined","forceCache","then","result","endMeasurement","success","catch","error","_this","errorCode","subErrorCode","subError","acquireTokenByRefreshToken","ClientConfigurationError","createEmptyTokenRequestError","RefreshTokenClientAcquireTokenByRefreshToken","account","ClientAuthError","createNoAccountInSilentRequestError","isFOCI","isAppMetadataFOCI","environment","RefreshTokenClientAcquireTokenWithCachedRefreshToken","acquireTokenWithCachedRefreshToken","e","noFamilyRTInCache","InteractionRequiredAuthError","InteractionRequiredAuthErrorMessage","noTokensFoundError","code","clientMismatchErrorWithFamilyRT","ServerError","Errors","INVALID_GRANT_ERROR","CLIENT_MISMATCH_ERROR","foci","refreshToken","getRefreshToken","discardMeasurement","createNoTokensFoundError","refreshTokenRequest","secret","authenticationScheme","AuthenticationScheme","BEARER","ccsCredential","credential","homeAccountId","type","CcsCredentialType","HOME_ACCOUNT_ID","acquireTokenMeasurement","RefreshTokenClientCreateTokenRequestBody","queryParametersString","createTokenQueryParameters","endpoint","UrlString","appendQueryString","tokenEndpoint","createTokenRequestBody","requestBody","createTokenRequestHeaders","thumbprint","canonicalAuthority","scopes","claims","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","BaseClientCreateTokenRequestHeaders","parameterBuilder","RequestParameterBuilder","addClientId","addScopes","addGrantType","GrantType","REFRESH_TOKEN_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","addCorrelationId","addRefreshToken","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","POP","popTokenGenerator","PopTokenGenerator","PopTokenGenerateCnf","generateCnf","reqCnfData","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","StringUtils","isEmptyObj","clientCapabilities","addClaims","systemOptions","preventCorsPreflight","clientInfo","buildClientInfoFromHomeAccountId","addCcsOid","UPN","addCcsUpn","createQueryString","BaseClient"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-common/src/client/RefreshTokenClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonRefreshTokenRequest } from \"../request/CommonRefreshTokenRequest\";\nimport { Authority } from \"../authority/Authority\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType, AuthenticationScheme, Errors, HeaderNames } from \"../utils/Constants\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { ServerError } from \"../error/ServerError\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\nimport { CcsCredentialType } from \"../account/CcsCredential\";\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from \"../error/InteractionRequiredAuthError\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\n/**\n * OAuth2.0 refresh token client\n */\nexport class RefreshTokenClient extends BaseClient {\n    constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient) {\n        super(configuration, performanceClient);\n\n    }\n    public async acquireToken(request: CommonRefreshTokenRequest): Promise<AuthenticationResult> {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n\n        const atsMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n        this.logger.verbose(\"RefreshTokenClientAcquireToken called\", request.correlationId);\n        const reqTimestamp = TimeUtils.nowSeconds();\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n        const response = await this.executeTokenRequest(request, this.authority);\n        const httpVerToken = response.headers?.[HeaderNames.X_MS_HTTP_VERSION];\n        atsMeasurement?.addStaticFields({\n            refreshTokenSize: response.body.refresh_token?.length || 0,\n        });\n        if(httpVerToken)\n        {\n            atsMeasurement?.addStaticFields({\n                httpVerToken,\n            });\n        }\n\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n        responseHandler.validateTokenResponse(response.body);\n\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\n        return responseHandler.handleServerTokenResponse(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request,\n            undefined,\n            undefined,\n            true,\n            request.forceCache,\n            requestId\n        ).then((result: AuthenticationResult) => {\n            atsMeasurement?.endMeasurement({\n                success: true\n            });\n            return result;\n        })\n            .catch((error) => {\n                this.logger.verbose(\"Error in fetching refresh token\", request.correlationId);\n                atsMeasurement?.endMeasurement({\n                    errorCode: error.errorCode,\n                    subErrorCode: error.subError,\n                    success: false\n                });\n                throw error;\n            });\n    }\n\n    /**\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\n     * @param request\n     */\n    public async acquireTokenByRefreshToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n\n        // try checking if FOCI is enabled for the given application\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);\n\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n            try {\n                this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n                return this.acquireTokenWithCachedRefreshToken(request, true);\n            } catch (e) {\n                const noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n                    this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n                    return this.acquireTokenWithCachedRefreshToken(request, false);\n                    // throw in all other cases\n                } else {\n                    throw e;\n                }\n            }\n        }\n        // fall back to application refresh token acquisition\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        return this.acquireTokenWithCachedRefreshToken(request, false);\n\n    }\n\n    /**\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\n     * @param request\n     */\n    private async acquireTokenWithCachedRefreshToken(request: CommonSilentFlowRequest, foci: boolean) {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n\n        // fetches family RT or application RT based on FOCI value\n\n        const atsMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        this.logger.verbose(\"RefreshTokenClientAcquireTokenWithCachedRefreshToken called\", request.correlationId);\n        const refreshToken = this.cacheManager.getRefreshToken(request.account, foci);\n\n        if (!refreshToken) {\n            atsMeasurement?.discardMeasurement();\n            throw InteractionRequiredAuthError.createNoTokensFoundError();\n        }\n        // attach cached RT size to the current measurement\n        atsMeasurement?.endMeasurement({\n            success: true\n        });\n\n        const refreshTokenRequest: CommonRefreshTokenRequest = {\n            ...request,\n            refreshToken: refreshToken.secret,\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n            ccsCredential: {\n                credential: request.account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID\n            }\n        };\n\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n        return this.acquireToken(refreshTokenRequest);\n    }\n\n    /**\n     * Constructs the network message and makes a NW call to the underlying secure token service\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(request: CommonRefreshTokenRequest, authority: Authority)\n        : Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n        const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n        \n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        \n        const requestBody = await this.createTokenRequestBody(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders(request.ccsCredential);\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)\n            .then((result) => {\n                acquireTokenMeasurement?.endMeasurement({\n                    success: true\n                });\n                return result;\n            })\n            .catch((error) => {\n                acquireTokenMeasurement?.endMeasurement({\n                    success: false\n                });\n                throw error;\n            });\n    }\n\n    /**\n     * Helper function to create the token request body\n     * @param request\n     */\n    private async createTokenRequestBody(request: CommonRefreshTokenRequest): Promise<string> {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n\n        const correlationId = request.correlationId;\n        const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n\n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        parameterBuilder.addCorrelationId(correlationId);\n\n        parameterBuilder.addRefreshToken(request.refreshToken);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            this.performanceClient?.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n            const reqCnfData = await popTokenGenerator.generateCnf(request);\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                acquireTokenMeasurement?.endMeasurement({\n                    success: false\n                });\n                throw ClientConfigurationError.createMissingSshJwkError();\n            }\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n            switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                    break;\n            }\n        }\n        acquireTokenMeasurement?.endMeasurement({\n            success: true\n        });\n        return parameterBuilder.createQueryString();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}