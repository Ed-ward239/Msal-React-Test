{"ast":null,"code":"/*! @azure/msal-common v13.0.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { Constants, CredentialType, GrantType, CacheOutcome, AuthenticationScheme } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 client credential grant\r\n */\n\nvar ClientCredentialClient =\n/** @class */\nfunction (_super) {\n  __extends(ClientCredentialClient, _super);\n\n  function ClientCredentialClient(configuration, appTokenProvider) {\n    var _this = _super.call(this, configuration) || this;\n\n    _this.appTokenProvider = appTokenProvider;\n    return _this;\n  }\n  /**\r\n   * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n   * @param request\r\n   */\n\n\n  ClientCredentialClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []);\n            if (!request.skipCache) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.getCachedAuthenticationResult(request)];\n\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3\n            /*break*/\n            , 4];\n            return [2\n            /*return*/\n            , cachedAuthenticationResult];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 5:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * looks up cache if the tokens are cached already\r\n   */\n\n\n  ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n\n            if (!cachedAccessToken) {\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: null,\n              idToken: null,\n              accessToken: cachedAccessToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _c.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Reads access token from the cache\r\n   */\n\n\n  ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      homeAccountId: Constants.EMPTY_STRING,\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: ScopeSet.createSearchScopes(this.scopeSet.asArray())\n    };\n    var accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\n\n    if (accessTokens.length < 1) {\n      return null;\n    } else if (accessTokens.length > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n\n    return accessTokens[0];\n  };\n  /**\r\n   * Makes a network call to request the token from the service\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTokenResponse, reqTimestamp, appTokenPropviderParameters, appTokenProviderResult, queryParametersString, endpoint, requestBody, headers, thumbprint, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.appTokenProvider) return [3\n            /*break*/\n            , 2];\n            this.logger.info(\"Using appTokenProvider extensibility.\");\n            appTokenPropviderParameters = {\n              correlationId: request.correlationId,\n              tenantId: this.config.authOptions.authority.tenant,\n              scopes: request.scopes,\n              claims: request.claims\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.appTokenProvider(appTokenPropviderParameters)];\n\n          case 1:\n            appTokenProviderResult = _a.sent();\n            serverTokenResponse = {\n              access_token: appTokenProviderResult.accessToken,\n              expires_in: appTokenProviderResult.expiresInSeconds,\n              refresh_in: appTokenProviderResult.refreshInSeconds,\n              token_type: AuthenticationScheme.BEARER\n            };\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n\n          case 3:\n            response = _a.sent();\n            serverTokenResponse = response.body;\n            _a.label = 4;\n\n          case 4:\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(serverTokenResponse);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(serverTokenResponse, this.authority, reqTimestamp, request)];\n\n          case 5:\n            tokenResponse = _a.sent();\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate the request to the server in the acceptable format\r\n   * @param request\r\n   */\n\n\n  ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes, false);\n    parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    } // Use clientAssertion from request, fallback to client assertion in base configuration\n\n\n    var clientAssertion = request.clientAssertion || this.config.clientCredentials.clientAssertion;\n\n    if (clientAssertion) {\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return ClientCredentialClient;\n}(BaseClient);\n\nexport { ClientCredentialClient };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;;AAGG;;AAqBH;;AAEG;;AACH;AAAA;AAAA;EAA4CA,SAAU,gCAAV;;EAKxC,SAAYC,sBAAZ,CAAYC,aAAZ,EAAgDC,gBAAhD,EAAoF;IAApF,IACIC,0BAAMF,aAAN,KAEH,IAHD;;IAEIE,KAAI,CAACD,gBAAL,GAAwBA,gBAAxB;;EACH;EAED;;;AAGG;;;EACUF,sBAAY,UAAZ,CAAYI,YAAZ,GAAb,UAA0BC,OAA1B,EAAgE;;;;;;YAE5D,KAAKC,QAAL,GAAgB,IAAIC,QAAJ,CAAaF,OAAO,CAACG,MAAR,IAAkB,EAA/B,CAAhB;iBAEIH,OAAO,CAACI,WAAR,OAAiB;YAAA;YAAA,IAAjB;YACO,OAAM;YAAA;YAAA,OAAKC,mBAAL,CAAyBL,OAAzB,EAAkC,KAAKM,SAAvC,EAAN;;UAAP;YAAA;YAAA;YAAA,EAAOC,SAAP;;UAG+B;YAAA;YAAA;YAAA,EAAM,KAAKC,6BAAL,CAAmCR,OAAnC,CAAN;;;YAA7BS,0BAA0B,GAAGF,EAAiD,KAAjD,EAA7B;YACF,wCAA0B;YAAA;YAAA,IAA1B;YACA;YAAA;YAAA,EAAOE,0BAAP;;;YAEO,OAAM;YAAA;YAAA,OAAKJ,mBAAL,CAAyBL,OAAzB,EAAkC,KAAKM,SAAvC,EAAN;;UAAP;YAAA;YAAA;YAAA,EAAOC,SAAP;;;;EAEP,CAdY;EAgBb;;AAEG;;;EACWZ,sBAA6B,UAA7B,CAA6Ba,6BAA7B,GAAd,UAA4CR,OAA5C,EAAkF;;;;;;;;YAExEU,iBAAiB,GAAG,KAAKC,wBAAL,EAApB;;YAEN,IAAI,CAACD,iBAAL,EAAwB;cACpB,WAAKE,sBAAL,MAA2B,IAA3B,IAA2BL,aAA3B,GAA2B,MAA3B,GAA2BA,GAAEM,eAAF,CAAkBC,YAAY,CAACC,sBAA/B,CAA3B;cACA;cAAA;cAAA,EAAO,IAAP;YACH;;YAED,IAAIC,SAAS,CAACC,cAAV,CAAyBP,iBAAiB,CAACQ,SAA3C,EAAsD,KAAKC,MAAL,CAAYC,aAAZ,CAA0BC,yBAAhF,CAAJ,EAAgH;cAC5G,WAAKT,sBAAL,MAA2B,IAA3B,IAA2BU,aAA3B,GAA2B,MAA3B,GAA2BA,GAAET,eAAF,CAAkBC,YAAY,CAACS,2BAA/B,CAA3B;cACA;cAAA;cAAA,EAAO,IAAP;YACH;;YAEM,OAAM;YAAA;YAAA,iBAAe,CAACC,4BAAhB,CACT,KAAKC,WADI,EAET,KAAKnB,SAFI,EAGT;cACIoB,OAAO,EAAE,IADb;cAEIC,OAAO,EAAE,IAFb;cAGIC,WAAW,EAAElB,iBAHjB;cAIImB,YAAY,EAAE,IAJlB;cAKIC,WAAW,EAAE;YALjB,CAHS,EAUT,IAVS,EAWT9B,OAXS,EAAN;;UAAP;YAAA;YAAA;YAAA,EAAO+B,SAAP;;;;EAaH,CA3Ba;EA6Bd;;AAEG;;;EACKpC,4DAAR;IACI,IAAMqC,iBAAiB,GAAqB;MACxCC,aAAa,EAAEC,SAAS,CAACC,YADe;MAExCC,WAAW,EAAE,KAAK9B,SAAL,CAAe+B,+BAAf,CAA+CC,eAFpB;MAGxCC,cAAc,EAAEC,cAAc,CAACC,YAHS;MAIxCC,QAAQ,EAAE,KAAKvB,MAAL,CAAYwB,WAAZ,CAAwBD,QAJM;MAKxCE,KAAK,EAAE,KAAKtC,SAAL,CAAeuC,MALkB;MAMxCC,MAAM,EAAE5C,QAAQ,CAAC6C,kBAAT,CAA4B,KAAK9C,QAAL,CAAc+C,OAAd,EAA5B;IANgC,CAA5C;IASA,IAAMC,YAAY,GAAG,KAAKC,YAAL,CAAkBC,uBAAlB,CAA0CnB,iBAA1C,CAArB;;IACA,IAAIiB,YAAY,CAACG,MAAb,GAAsB,CAA1B,EAA6B;MACzB,OAAO,IAAP;IACH,CAFD,MAEO,IAAIH,YAAY,CAACG,MAAb,GAAsB,CAA1B,EAA6B;MAChC,MAAMC,eAAe,CAACC,wCAAhB,EAAN;IACH;;IACD,OAAOL,YAAY,CAAC,CAAD,CAAnB;EACH,CAjBO;EAmBR;;;;AAIG;;;EACWtD,uDAAd,UAAkCK,OAAlC,EAA0EM,SAA1E,EAA8F;;;;;;iBAMtF,KAAKT,kBAAL,OAAqB;YAAA;YAAA,IAArB;YACA,KAAK0D,MAAL,CAAYC,IAAZ,CAAiB,uCAAjB;YAEMC,2BAA2B,GAAG;cAChCC,aAAa,EAAE1D,OAAO,CAAC0D,aADS;cAEhCC,QAAQ,EAAE,KAAKxC,MAAL,CAAYwB,WAAZ,CAAwBrC,SAAxB,CAAkCuC,MAFZ;cAGhC1C,MAAM,EAAEH,OAAO,CAACG,MAHgB;cAIhCyD,MAAM,EAAE5D,OAAO,CAAC4D;YAJgB,CAA9B;YAONC,YAAY,GAAG7C,SAAS,CAAC8C,UAAV,EAAf;YAC+B;YAAA;YAAA,EAAM,KAAKjE,gBAAL,CAAsB4D,2BAAtB,CAAN;;;YAAzBM,sBAAsB,GAAGxD,EAAwD,KAAxD,EAAzB;YAENyD,mBAAmB,GAAG;cAClBC,YAAY,EAAEF,sBAAsB,CAACnC,WADnB;cAElBsC,UAAU,EAAEH,sBAAsB,CAACI,gBAFjB;cAGlBC,UAAU,EAAEL,sBAAsB,CAACM,gBAHjB;cAIlBC,UAAU,EAAGC,oBAAoB,CAACC;YAJhB,CAAtB;;;;;;YAOMC,qBAAqB,GAAG,KAAKC,0BAAL,CAAgC1E,OAAhC,CAAxB;YACA2E,QAAQ,GAAGC,SAAS,CAACC,iBAAV,CAA4BvE,SAAS,CAACwE,aAAtC,EAAqDL,qBAArD,CAAX;YACAM,WAAW,GAAG,KAAKC,sBAAL,CAA4BhF,OAA5B,CAAd;YACAiF,OAAO,GAA2B,KAAKC,yBAAL,EAAlC;YACAC,UAAU,GAAsB;cAClCzC,QAAQ,EAAE,KAAKvB,MAAL,CAAYwB,WAAZ,CAAwBD,QADA;cAElCpC,SAAS,EAAEN,OAAO,CAACM,SAFe;cAGlCH,MAAM,EAAEH,OAAO,CAACG,MAHkB;cAIlCyD,MAAM,EAAE5D,OAAO,CAAC4D,MAJkB;cAKlCwB,oBAAoB,EAAEpF,OAAO,CAACoF,oBALI;cAMlCC,qBAAqB,EAAErF,OAAO,CAACqF,qBANG;cAOlCC,kBAAkB,EAAEtF,OAAO,CAACsF,kBAPM;cAQlCC,SAAS,EAAEvF,OAAO,CAACuF,SARe;cASlCC,MAAM,EAAExF,OAAO,CAACwF;YATkB,CAAhC;YAYN3B,YAAY,GAAG7C,SAAS,CAAC8C,UAAV,EAAf;YACiB;YAAA;YAAA,EAAM,KAAK2B,0BAAL,CAAgCd,QAAhC,EAA0CI,WAA1C,EAAuDE,OAAvD,EAAgEE,UAAhE,CAAN;;;YAAXO,QAAQ,GAAGnF,EAAiF,KAAjF,EAAX;YACNyD,mBAAmB,GAAG0B,QAAQ,CAACC,IAA/B;;;;YAGEC,eAAe,GAAG,IAAIC,eAAJ,CACpB,KAAK1E,MAAL,CAAYwB,WAAZ,CAAwBD,QADJ,EAEpB,KAAKQ,YAFe,EAGpB,KAAKzB,WAHe,EAIpB,KAAK8B,MAJe,EAKpB,KAAKpC,MAAL,CAAY2E,iBALQ,EAMpB,KAAK3E,MAAL,CAAY4E,iBANQ,CAAlB;YASNH,eAAe,CAACI,qBAAhB,CAAsChC,mBAAtC;YAEsB;YAAA;YAAA,EAAM4B,eAAe,CAACK,yBAAhB,CACxBjC,mBADwB,EAExB,KAAK1D,SAFmB,EAGxBuD,YAHwB,EAIxB7D,OAJwB,CAAN;;;YAAhBkG,aAAa,GAAG3F,EAKrB,KALqB,EAAhB;YAON;YAAA;YAAA,EAAO2F,aAAP;;;;EACH,CAlEa;EAoEd;;;AAGG;;;EACKvG,sBAAsB,UAAtB,CAAsBqF,sBAAtB,GAAR,UAA+BhF,OAA/B,EAAqE;IACjE,IAAMmG,gBAAgB,GAAG,IAAIC,uBAAJ,EAAzB;IAEAD,gBAAgB,CAACE,WAAjB,CAA6B,KAAKlF,MAAL,CAAYwB,WAAZ,CAAwBD,QAArD;IAEAyD,gBAAgB,CAACG,SAAjB,CAA2BtG,OAAO,CAACG,MAAnC,EAA2C,KAA3C;IAEAgG,gBAAgB,CAACI,YAAjB,CAA8BC,SAAS,CAACC,wBAAxC;IAEAN,gBAAgB,CAACO,cAAjB,CAAgC,KAAKvF,MAAL,CAAYwF,WAA5C;IACAR,gBAAgB,CAACS,uBAAjB,CAAyC,KAAKzF,MAAL,CAAY0F,SAAZ,CAAsBC,WAA/D;IAEAX,gBAAgB,CAACY,aAAjB;;IAEA,IAAI,KAAKnG,sBAAT,EAAiC;MAC7BuF,gBAAgB,CAACa,kBAAjB,CAAoC,KAAKpG,sBAAzC;IACH;;IAED,IAAM8C,aAAa,GAAG1D,OAAO,CAAC0D,aAAR,IAAyB,KAAKvC,MAAL,CAAY8F,eAAZ,CAA4BC,aAA5B,EAA/C;IACAf,gBAAgB,CAACgB,gBAAjB,CAAkCzD,aAAlC;;IAEA,IAAI,KAAKvC,MAAL,CAAYiG,iBAAZ,CAA8BC,YAAlC,EAAgD;MAC5ClB,gBAAgB,CAACmB,eAAjB,CAAiC,KAAKnG,MAAL,CAAYiG,iBAAZ,CAA8BC,YAA/D;IACH,CAvBgE;;;IA0BjE,IAAME,eAAe,GAAGvH,OAAO,CAACuH,eAAR,IAA2B,KAAKpG,MAAL,CAAYiG,iBAAZ,CAA8BG,eAAjF;;IAEA,IAAIA,eAAJ,EAAqB;MACjBpB,gBAAgB,CAACqB,kBAAjB,CAAoCD,eAAe,CAACE,SAApD;MACAtB,gBAAgB,CAACuB,sBAAjB,CAAwCH,eAAe,CAACI,aAAxD;IACH;;IAED,IAAI,CAACC,WAAW,CAACC,UAAZ,CAAuB7H,OAAO,CAAC4D,MAA/B,CAAD,IAA2C,KAAKzC,MAAL,CAAYwB,WAAZ,CAAwBmF,kBAAxB,IAA8C,KAAK3G,MAAL,CAAYwB,WAAZ,CAAwBmF,kBAAxB,CAA2C1E,MAA3C,GAAoD,CAAjJ,EAAoJ;MAChJ+C,gBAAgB,CAAC4B,SAAjB,CAA2B/H,OAAO,CAAC4D,MAAnC,EAA2C,KAAKzC,MAAL,CAAYwB,WAAZ,CAAwBmF,kBAAnE;IACH;;IAED,OAAO3B,gBAAgB,CAAC6B,iBAAjB,EAAP;EACH,CAtCO;;EAuCZ,OAACrI,sBAAD;AAxMA,EAA4CsI,UAA5C","names":["__extends","ClientCredentialClient","configuration","appTokenProvider","_this","acquireToken","request","scopeSet","ScopeSet","scopes","skipCache","executeTokenRequest","authority","_a","getCachedAuthenticationResult","cachedAuthenticationResult","cachedAccessToken","readAccessTokenFromCache","serverTelemetryManager","setCacheOutcome","CacheOutcome","NO_CACHED_ACCESS_TOKEN","TimeUtils","isTokenExpired","expiresOn","config","systemOptions","tokenRenewalOffsetSeconds","_b","CACHED_ACCESS_TOKEN_EXPIRED","generateAuthenticationResult","cryptoUtils","account","idToken","accessToken","refreshToken","appMetadata","_c","accessTokenFilter","homeAccountId","Constants","EMPTY_STRING","environment","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","CredentialType","ACCESS_TOKEN","clientId","authOptions","realm","tenant","target","createSearchScopes","asArray","accessTokens","cacheManager","getAccessTokensByFilter","length","ClientAuthError","createMultipleMatchingTokensInCacheError","logger","info","appTokenPropviderParameters","correlationId","tenantId","claims","reqTimestamp","nowSeconds","appTokenProviderResult","serverTokenResponse","access_token","expires_in","expiresInSeconds","refresh_in","refreshInSeconds","token_type","AuthenticationScheme","BEARER","queryParametersString","createTokenQueryParameters","endpoint","UrlString","appendQueryString","tokenEndpoint","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","thumbprint","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","response","body","responseHandler","ResponseHandler","serializableCache","persistencePlugin","validateTokenResponse","handleServerTokenResponse","tokenResponse","parameterBuilder","RequestParameterBuilder","addClientId","addScopes","addGrantType","GrantType","CLIENT_CREDENTIALS_GRANT","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","addServerTelemetry","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","StringUtils","isEmptyObj","clientCapabilities","addClaims","createQueryString","BaseClient"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-common/src/client/ClientCredentialClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { Authority } from \"../authority/Authority\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { GrantType , CredentialType, CacheOutcome, Constants, AuthenticationScheme } from \"../utils/Constants\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { CommonClientCredentialRequest } from \"../request/CommonClientCredentialRequest\";\nimport { CredentialFilter } from \"../cache/utils/CacheTypes\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { IAppTokenProvider } from \"../config/AppTokenProvider\";\nimport { UrlString } from \"../url/UrlString\";\n\n/**\n * OAuth2.0 client credential grant\n */\nexport class ClientCredentialClient extends BaseClient {\n\n    private scopeSet: ScopeSet;\n    private readonly appTokenProvider?: IAppTokenProvider;\n\n    constructor(configuration: ClientConfiguration, appTokenProvider?: IAppTokenProvider) {\n        super(configuration);\n        this.appTokenProvider = appTokenProvider;\n    }\n\n    /**\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\n     * @param request\n     */\n    public async acquireToken(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\n\n        this.scopeSet = new ScopeSet(request.scopes || []);\n\n        if (request.skipCache) {\n            return await this.executeTokenRequest(request, this.authority);\n        }\n\n        const cachedAuthenticationResult = await this.getCachedAuthenticationResult(request);\n        if (cachedAuthenticationResult) {\n            return cachedAuthenticationResult;\n        } else {\n            return await this.executeTokenRequest(request, this.authority);\n        }\n    }\n\n    /**\n     * looks up cache if the tokens are cached already\n     */\n    private async getCachedAuthenticationResult(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\n        \n        const cachedAccessToken = this.readAccessTokenFromCache();\n\n        if (!cachedAccessToken) {\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n            return null;\n        }\n\n        if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n            return null;\n        }\n\n        return await ResponseHandler.generateAuthenticationResult(\n            this.cryptoUtils,\n            this.authority,\n            {\n                account: null,\n                idToken: null,\n                accessToken: cachedAccessToken,\n                refreshToken: null,\n                appMetadata: null\n            },\n            true,\n            request\n        );\n    }\n\n    /**\n     * Reads access token from the cache\n     */\n    private readAccessTokenFromCache(): AccessTokenEntity | null {\n        const accessTokenFilter: CredentialFilter = {\n            homeAccountId: Constants.EMPTY_STRING,\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n            credentialType: CredentialType.ACCESS_TOKEN,\n            clientId: this.config.authOptions.clientId,\n            realm: this.authority.tenant,\n            target: ScopeSet.createSearchScopes(this.scopeSet.asArray())\n        };\n\n        const accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\n        if (accessTokens.length < 1) {\n            return null;\n        } else if (accessTokens.length > 1) {\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n        }\n        return accessTokens[0] as AccessTokenEntity;\n    }\n\n    /**\n     * Makes a network call to request the token from the service\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(request: CommonClientCredentialRequest, authority: Authority)\n        : Promise<AuthenticationResult | null> {\n        \n        let serverTokenResponse: ServerAuthorizationTokenResponse;\n        let reqTimestamp: number;\n\n        if (this.appTokenProvider) {\n            this.logger.info(\"Using appTokenProvider extensibility.\");\n\n            const appTokenPropviderParameters = {\n                correlationId: request.correlationId,\n                tenantId: this.config.authOptions.authority.tenant,\n                scopes: request.scopes,\n                claims: request.claims,\n            };\n\n            reqTimestamp = TimeUtils.nowSeconds();\n            const appTokenProviderResult = await this.appTokenProvider(appTokenPropviderParameters);\n\n            serverTokenResponse = {\n                access_token: appTokenProviderResult.accessToken, \n                expires_in: appTokenProviderResult.expiresInSeconds,\n                refresh_in: appTokenProviderResult.refreshInSeconds,\n                token_type : AuthenticationScheme.BEARER\n            };\n        } else {\n            const queryParametersString = this.createTokenQueryParameters(request);\n            const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            const requestBody = this.createTokenRequestBody(request);\n            const headers: Record<string, string> = this.createTokenRequestHeaders();\n            const thumbprint: RequestThumbprint = {\n                clientId: this.config.authOptions.clientId,\n                authority: request.authority,\n                scopes: request.scopes,\n                claims: request.claims,\n                authenticationScheme: request.authenticationScheme,\n                resourceRequestMethod: request.resourceRequestMethod,\n                resourceRequestUri: request.resourceRequestUri,\n                shrClaims: request.shrClaims,\n                sshKid: request.sshKid\n            };\n    \n            reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\n            serverTokenResponse = response.body;\n        }\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        responseHandler.validateTokenResponse(serverTokenResponse);\n       \n        const tokenResponse = await responseHandler.handleServerTokenResponse(\n            serverTokenResponse,\n            this.authority,\n            reqTimestamp,\n            request\n        );\n\n        return tokenResponse;\n    }\n\n    /**\n     * generate the request to the server in the acceptable format\n     * @param request\n     */\n    private createTokenRequestBody(request: CommonClientCredentialRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        parameterBuilder.addScopes(request.scopes, false);\n\n        parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n\n        parameterBuilder.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        // Use clientAssertion from request, fallback to client assertion in base configuration\n        const clientAssertion = request.clientAssertion || this.config.clientCredentials.clientAssertion;\n\n        if (clientAssertion) {\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}