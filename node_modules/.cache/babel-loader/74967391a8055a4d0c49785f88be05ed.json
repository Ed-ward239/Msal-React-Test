{"ast":null,"code":"/*! @azure/msal-common v13.0.0 2023-05-01 */\n'use strict';\n\nimport { __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthorityType } from './AuthorityType.js';\nimport { isOpenIdConfigResponse } from './OpenIdConfigResponse.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { Constants, AuthorityMetadataSource, RegionDiscoveryOutcomes } from '../utils/Constants.js';\nimport { EndpointMetadata, InstanceDiscoveryMetadata } from './AuthorityMetadata.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ProtocolMode } from './ProtocolMode.js';\nimport { AuthorityMetadataEntity } from '../cache/entities/AuthorityMetadataEntity.js';\nimport { AzureCloudInstance } from './AuthorityOptions.js';\nimport { isCloudInstanceDiscoveryResponse } from './CloudInstanceDiscoveryResponse.js';\nimport { isCloudInstanceDiscoveryErrorResponse } from './CloudInstanceDiscoveryErrorResponse.js';\nimport { RegionDiscovery } from './RegionDiscovery.js';\nimport { AuthError } from '../error/AuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n */\n\nvar Authority =\n/** @class */\nfunction () {\n  function Authority(authority, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    this.canonicalAuthority = authority;\n\n    this._canonicalAuthority.validateAsUri();\n\n    this.networkInterface = networkInterface;\n    this.cacheManager = cacheManager;\n    this.authorityOptions = authorityOptions;\n    this.regionDiscoveryMetadata = {\n      region_used: undefined,\n      region_source: undefined,\n      region_outcome: undefined\n    };\n    this.logger = logger;\n    this.performanceClient = performanceClient;\n    this.correlationId = correlationId;\n    this.regionDiscovery = new RegionDiscovery(networkInterface, this.performanceClient, this.correlationId);\n  }\n\n  Object.defineProperty(Authority.prototype, \"authorityType\", {\n    // See above for AuthorityType\n    get: function () {\n      // CIAM auth url pattern is being standardized as: <tenant>.ciamlogin.com\n      if (this.canonicalAuthorityUrlComponents.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {\n        return AuthorityType.Ciam;\n      }\n\n      var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\n\n      if (pathSegments.length) {\n        switch (pathSegments[0].toLowerCase()) {\n          case Constants.ADFS:\n            return AuthorityType.Adfs;\n\n          case Constants.DSTS:\n            return AuthorityType.Dsts;\n        }\n      }\n\n      return AuthorityType.Default;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"protocolMode\", {\n    /**\r\n     * ProtocolMode enum representing the way endpoints are constructed.\r\n     */\n    get: function () {\n      return this.authorityOptions.protocolMode;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"options\", {\n    /**\r\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n     */\n    get: function () {\n      return this.authorityOptions;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"canonicalAuthority\", {\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */\n    get: function () {\n      return this._canonicalAuthority.urlString;\n    },\n\n    /**\r\n     * Sets canonical authority.\r\n     */\n    set: function (url) {\n      this._canonicalAuthority = new UrlString(url);\n\n      this._canonicalAuthority.validateAsUri();\n\n      this._canonicalAuthorityUrlComponents = null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"canonicalAuthorityUrlComponents\", {\n    /**\r\n     * Get authority components.\r\n     */\n    get: function () {\n      if (!this._canonicalAuthorityUrlComponents) {\n        this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n      }\n\n      return this._canonicalAuthorityUrlComponents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"hostnameAndPort\", {\n    /**\r\n     * Get hostname and port i.e. login.microsoftonline.com\r\n     */\n    get: function () {\n      return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"tenant\", {\n    /**\r\n     * Get tenant for authority.\r\n     */\n    get: function () {\n      return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"authorizationEndpoint\", {\n    /**\r\n     * OAuth /authorize endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.authorization_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"tokenEndpoint\", {\n    /**\r\n     * OAuth /token endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.token_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"deviceCodeEndpoint\", {\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"endSessionEndpoint\", {\n    /**\r\n     * OAuth logout endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        // ROPC policies may not have end_session_endpoint set\n        if (!this.metadata.end_session_endpoint) {\n          throw ClientAuthError.createLogoutNotSupportedError();\n        }\n\n        var endpoint = this.replacePath(this.metadata.end_session_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"selfSignedJwtAudience\", {\n    /**\r\n     * OAuth issuer for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.issuer);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"jwksUri\", {\n    /**\r\n     * Jwks_uri for token signing keys\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.jwks_uri);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Replaces tenant in url path with current tenant. Defaults to common.\r\n   * @param urlString\r\n   */\n\n  Authority.prototype.replaceTenant = function (urlString) {\n    return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n  };\n  /**\r\n   * Replaces path such as tenant or policy with the current tenant or policy.\r\n   * @param urlString\r\n   */\n\n\n  Authority.prototype.replacePath = function (urlString) {\n    var endpoint = urlString;\n    var cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\n    var cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n    var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n    currentAuthorityParts.forEach(function (currentPart, index) {\n      var cachedPart = cachedAuthorityParts[index];\n\n      if (currentPart !== cachedPart) {\n        endpoint = endpoint.replace(\"/\" + cachedPart + \"/\", \"/\" + currentPart + \"/\");\n      }\n    });\n    return endpoint;\n  };\n\n  Object.defineProperty(Authority.prototype, \"defaultOpenIdConfigurationEndpoint\", {\n    /**\r\n     * The default open id configuration endpoint for any canonical authority.\r\n     */\n    get: function () {\n      if (this.authorityType === AuthorityType.Adfs || this.authorityType === AuthorityType.Dsts || this.protocolMode === ProtocolMode.OIDC) {\n        return this.canonicalAuthority + \".well-known/openid-configuration\";\n      }\n\n      return this.canonicalAuthority + \"v2.0/.well-known/openid-configuration\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Boolean that returns whethr or not tenant discovery has been completed.\r\n   */\n\n  Authority.prototype.discoveryComplete = function () {\n    return !!this.metadata;\n  };\n  /**\r\n   * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n   * and the /authorize, /token and logout endpoints.\r\n   */\n\n\n  Authority.prototype.resolveEndpointsAsync = function () {\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityResolveEndpointsAsync, this.correlationId);\n            metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n\n            if (!metadataEntity) {\n              metadataEntity = new AuthorityMetadataEntity();\n              metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n            }\n\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);\n            return [4\n            /*yield*/\n            , this.updateCloudDiscoveryMetadata(metadataEntity)];\n\n          case 1:\n            cloudDiscoverySource = _d.sent();\n            this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\n            return [4\n            /*yield*/\n            , this.updateEndpointMetadata(metadataEntity)];\n\n          case 2:\n            endpointSource = _d.sent();\n\n            if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\n              // Reset the expiration time unless both values came from a successful cache lookup\n              metadataEntity.resetExpiresAt();\n              metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n            }\n\n            cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n            this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n            this.metadata = metadataEntity;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n   * @param metadataEntity\r\n   */\n\n\n  Authority.prototype.updateEndpointMetadata = function (metadataEntity) {\n    var _a, _b, _c, _d, _e, _f;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata, harcodedMetadata;\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\n            metadata = this.getEndpointMetadataFromConfig();\n\n            if (metadata) {\n              metadataEntity.updateEndpointMetadata(metadata, false);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CONFIG];\n            }\n\n            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\n              // No need to update\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CACHE];\n            }\n\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getEndpointMetadataFromNetwork()];\n\n          case 1:\n            metadata = _g.sent();\n            if (!metadata) return [3\n            /*break*/\n            , 4];\n            if (!((_c = this.authorityOptions.azureRegionConfiguration) === null || _c === void 0 ? void 0 : _c.azureRegion)) return [3\n            /*break*/\n            , 3];\n            (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\n            return [4\n            /*yield*/\n            , this.updateMetadataWithRegionalInformation(metadata)];\n\n          case 2:\n            metadata = _g.sent();\n            _g.label = 3;\n\n          case 3:\n            metadataEntity.updateEndpointMetadata(metadata, true);\n            return [2\n            /*return*/\n            , AuthorityMetadataSource.NETWORK];\n\n          case 4:\n            harcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\n            if (!(harcodedMetadata && !this.authorityOptions.skipAuthorityMetadataCache)) return [3\n            /*break*/\n            , 7];\n            if (!((_e = this.authorityOptions.azureRegionConfiguration) === null || _e === void 0 ? void 0 : _e.azureRegion)) return [3\n            /*break*/\n            , 6];\n            (_f = this.performanceClient) === null || _f === void 0 ? void 0 : _f.setPreQueueTime(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\n            return [4\n            /*yield*/\n            , this.updateMetadataWithRegionalInformation(harcodedMetadata)];\n\n          case 5:\n            harcodedMetadata = _g.sent();\n            _g.label = 6;\n\n          case 6:\n            metadataEntity.updateEndpointMetadata(harcodedMetadata, false);\n            return [2\n            /*return*/\n            , AuthorityMetadataSource.HARDCODED_VALUES];\n\n          case 7:\n            throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\n        }\n      });\n    });\n  };\n  /**\r\n   * Compares the number of url components after the domain to determine if the cached\r\n   * authority metadata can be used for the requested authority. Protects against same domain different\r\n   * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n   * @param metadataEntity\r\n   */\n\n\n  Authority.prototype.isAuthoritySameType = function (metadataEntity) {\n    var cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\n    var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n    return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n  };\n  /**\r\n   * Parse authorityMetadata config option\r\n   */\n\n\n  Authority.prototype.getEndpointMetadataFromConfig = function () {\n    if (this.authorityOptions.authorityMetadata) {\n      try {\n        return JSON.parse(this.authorityOptions.authorityMetadata);\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n   *\r\n   * @param hasHardcodedMetadata boolean\r\n   */\n\n\n  Authority.prototype.getEndpointMetadataFromNetwork = function () {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var options, response;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\n            options = {};\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint, options)];\n\n          case 2:\n            response = _b.sent();\n            return [2\n            /*return*/\n            , isOpenIdConfigResponse(response.body) ? response.body : null];\n\n          case 3:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get OAuth endpoints for common authorities.\r\n   */\n\n\n  Authority.prototype.getEndpointMetadataFromHardcodedValues = function () {\n    if (this.canonicalAuthority in EndpointMetadata) {\n      return EndpointMetadata[this.canonicalAuthority];\n    }\n\n    return null;\n  };\n  /**\r\n   * Update the retrieved metadata with regional information.\r\n   */\n\n\n  Authority.prototype.updateMetadataWithRegionalInformation = function (metadata) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var autodetectedRegionName, azureRegion;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\n            return [4\n            /*yield*/\n            , this.regionDiscovery.detectRegion((_c = this.authorityOptions.azureRegionConfiguration) === null || _c === void 0 ? void 0 : _c.environmentRegion, this.regionDiscoveryMetadata)];\n\n          case 1:\n            autodetectedRegionName = _h.sent();\n            azureRegion = ((_d = this.authorityOptions.azureRegionConfiguration) === null || _d === void 0 ? void 0 : _d.azureRegion) === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG ? autodetectedRegionName : (_e = this.authorityOptions.azureRegionConfiguration) === null || _e === void 0 ? void 0 : _e.azureRegion;\n\n            if (((_f = this.authorityOptions.azureRegionConfiguration) === null || _f === void 0 ? void 0 : _f.azureRegion) === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n              this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ? RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL : RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n            } else {\n              if (autodetectedRegionName) {\n                this.regionDiscoveryMetadata.region_outcome = ((_g = this.authorityOptions.azureRegionConfiguration) === null || _g === void 0 ? void 0 : _g.azureRegion) === autodetectedRegionName ? RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED : RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;\n              } else {\n                this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n              }\n            }\n\n            if (azureRegion) {\n              this.regionDiscoveryMetadata.region_used = azureRegion;\n              return [2\n              /*return*/\n              , Authority.replaceWithRegionalInformation(metadata, azureRegion)];\n            }\n\n            return [2\n            /*return*/\n            , metadata];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache\r\n   * and returns where the information was retrieved from\r\n   * @param metadataEntity\r\n   * @returns AuthorityMetadataSource\r\n   */\n\n\n  Authority.prototype.updateCloudDiscoveryMetadata = function (metadataEntity) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata, metadataEntityExpired, harcodedMetadata;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId); // attempt to read metadata from the config\n\n            this.logger.verbose(\"Attempting to get cloud discovery metadata in the config\");\n            this.logger.verbosePii(\"Known Authorities: \" + (this.authorityOptions.knownAuthorities || Constants.NOT_APPLICABLE));\n            this.logger.verbosePii(\"Authority Metadata: \" + (this.authorityOptions.authorityMetadata || Constants.NOT_APPLICABLE));\n            this.logger.verbosePii(\"Canonical Authority: \" + (metadataEntity.canonical_authority || Constants.NOT_APPLICABLE));\n            metadata = this.getCloudDiscoveryMetadataFromConfig();\n\n            if (metadata) {\n              this.logger.verbose(\"Found cloud discovery metadata in the config.\");\n              metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CONFIG];\n            } // If the cached metadata came from config but that config was not passed to this instance, we must go to the network\n\n\n            this.logger.verbose(\"Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the cache.\");\n            metadataEntityExpired = metadataEntity.isExpired();\n\n            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntityExpired) {\n              this.logger.verbose(\"Found metadata in the cache.\"); // No need to update\n\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CACHE];\n            } else if (metadataEntityExpired) {\n              this.logger.verbose(\"The metadata entity is expired.\");\n            }\n\n            this.logger.verbose(\"Did not find cloud discovery metadata in the cache... Attempting to get cloud discovery metadata from the network.\");\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getCloudDiscoveryMetadataFromNetwork()];\n\n          case 1:\n            metadata = _c.sent();\n\n            if (metadata) {\n              this.logger.verbose(\"cloud discovery metadata was successfully returned from getCloudDiscoveryMetadataFromNetwork()\");\n              metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.NETWORK];\n            }\n\n            this.logger.verbose(\"Did not find cloud discovery metadata from the network... Attempting to get cloud discovery metadata from hardcoded values.\");\n            harcodedMetadata = this.getCloudDiscoveryMetadataFromHarcodedValues();\n\n            if (harcodedMetadata && !this.options.skipAuthorityMetadataCache) {\n              this.logger.verbose(\"Found cloud discovery metadata from hardcoded values.\");\n              metadataEntity.updateCloudDiscoveryMetadata(harcodedMetadata, false);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.HARDCODED_VALUES];\n            } // Metadata could not be obtained from the config, cache, network or hardcoded values\n\n\n            this.logger.error(\"Did not find cloud discovery metadata from hardcoded values... Metadata could not be obtained from config, cache, network or hardcoded values. Throwing Untrusted Authority Error.\");\n            throw ClientConfigurationError.createUntrustedAuthorityError();\n        }\n      });\n    });\n  };\n  /**\r\n   * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n   */\n\n\n  Authority.prototype.getCloudDiscoveryMetadataFromConfig = function () {\n    // CIAM does not support cloud discovery metadata\n    if (this.authorityType === AuthorityType.Ciam) {\n      this.logger.verbose(\"CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host.\");\n      return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n    } // Check if network response was provided in config\n\n\n    if (this.authorityOptions.cloudDiscoveryMetadata) {\n      this.logger.verbose(\"The cloud discovery metadata has been provided as a network response, in the config.\");\n\n      try {\n        this.logger.verbose(\"Attempting to parse the cloud discovery metadata.\");\n        var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\n        var metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\n        this.logger.verbose(\"Parsed the cloud discovery metadata.\");\n\n        if (metadata) {\n          this.logger.verbose(\"There is returnable metadata attached to the parsed cloud discovery metadata.\");\n          return metadata;\n        } else {\n          this.logger.verbose(\"There is no metadata attached to the parsed cloud discovery metadata.\");\n        }\n      } catch (e) {\n        this.logger.verbose(\"Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error.\");\n        throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\n      }\n    } // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n\n\n    if (this.isInKnownAuthorities()) {\n      this.logger.verbose(\"The host is included in knownAuthorities. Creating new cloud discovery metadata from the host.\");\n      return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n    }\n\n    return null;\n  };\n  /**\r\n   * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n   *\r\n   * @param hasHardcodedMetadata boolean\r\n   */\n\n\n  Authority.prototype.getCloudDiscoveryMetadataFromNetwork = function () {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var instanceDiscoveryEndpoint, options, match, response, typedResponseBody, metadata, error_1, typedError;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\n            instanceDiscoveryEndpoint = \"\" + Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + \"oauth2/v2.0/authorize\";\n            options = {};\n            match = null;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options)];\n\n          case 2:\n            response = _b.sent();\n            typedResponseBody = void 0;\n            metadata = void 0;\n\n            if (isCloudInstanceDiscoveryResponse(response.body)) {\n              typedResponseBody = response.body;\n              metadata = typedResponseBody.metadata;\n              this.logger.verbosePii(\"tenant_discovery_endpoint is: \" + typedResponseBody.tenant_discovery_endpoint);\n            } else if (isCloudInstanceDiscoveryErrorResponse(response.body)) {\n              this.logger.warning(\"A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: \" + response.status);\n              typedResponseBody = response.body;\n\n              if (typedResponseBody.error === Constants.INVALID_INSTANCE) {\n                this.logger.error(\"The CloudInstanceDiscoveryErrorResponse error is invalid_instance.\");\n                return [2\n                /*return*/\n                , null];\n              }\n\n              this.logger.warning(\"The CloudInstanceDiscoveryErrorResponse error is \" + typedResponseBody.error);\n              this.logger.warning(\"The CloudInstanceDiscoveryErrorResponse error description is \" + typedResponseBody.error_description);\n              this.logger.warning(\"Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []\");\n              metadata = [];\n            } else {\n              this.logger.error(\"AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse\");\n              return [2\n              /*return*/\n              , null];\n            }\n\n            this.logger.verbose(\"Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request.\");\n            match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_1 = _b.sent();\n\n            if (error_1 instanceof AuthError) {\n              this.logger.error(\"There was a network error while attempting to get the cloud discovery instance metadata.\\nError: \" + error_1.errorCode + \"\\nError Description: \" + error_1.errorMessage);\n            } else {\n              typedError = error_1;\n              this.logger.error(\"A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\\nError: \" + typedError.name + \"\\nError Description: \" + typedError.message);\n            }\n\n            return [2\n            /*return*/\n            , null];\n\n          case 4:\n            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n            if (!match) {\n              this.logger.warning(\"The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request.\");\n              this.logger.verbose(\"Creating custom Authority for custom domain scenario.\");\n              match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n            }\n\n            return [2\n            /*return*/\n            , match];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get cloud discovery metadata for common authorities\r\n   */\n\n\n  Authority.prototype.getCloudDiscoveryMetadataFromHarcodedValues = function () {\n    if (this.canonicalAuthority in InstanceDiscoveryMetadata) {\n      return InstanceDiscoveryMetadata[this.canonicalAuthority];\n    }\n\n    return null;\n  };\n  /**\r\n   * Helper function to determine if this host is included in the knownAuthorities config option\r\n   */\n\n\n  Authority.prototype.isInKnownAuthorities = function () {\n    var _this = this;\n\n    var matches = this.authorityOptions.knownAuthorities.filter(function (authority) {\n      return UrlString.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;\n    });\n    return matches.length > 0;\n  };\n  /**\r\n   * helper function to populate the authority based on azureCloudOptions\r\n   * @param authorityString\r\n   * @param azureCloudOptions\r\n   */\n\n\n  Authority.generateAuthority = function (authorityString, azureCloudOptions) {\n    var authorityAzureCloudInstance;\n\n    if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\n      var tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : Constants.DEFAULT_COMMON_TENANT;\n      authorityAzureCloudInstance = azureCloudOptions.azureCloudInstance + \"/\" + tenant + \"/\";\n    }\n\n    return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;\n  };\n  /**\r\n   * Creates cloud discovery metadata object from a given host\r\n   * @param host\r\n   */\n\n\n  Authority.createCloudDiscoveryMetadataFromHost = function (host) {\n    return {\n      preferred_network: host,\n      preferred_cache: host,\n      aliases: [host]\n    };\n  };\n  /**\r\n   * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n   * @param response\r\n   * @param authority\r\n   */\n\n\n  Authority.getCloudDiscoveryMetadataFromNetworkResponse = function (response, authority) {\n    for (var i = 0; i < response.length; i++) {\n      var metadata = response[i];\n\n      if (metadata.aliases.indexOf(authority) > -1) {\n        return metadata;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * helper function to generate environment from authority object\r\n   */\n\n\n  Authority.prototype.getPreferredCache = function () {\n    if (this.discoveryComplete()) {\n      return this.metadata.preferred_cache;\n    } else {\n      throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n    }\n  };\n  /**\r\n   * Returns whether or not the provided host is an alias of this authority instance\r\n   * @param host\r\n   */\n\n\n  Authority.prototype.isAlias = function (host) {\n    return this.metadata.aliases.indexOf(host) > -1;\n  };\n  /**\r\n   * Checks whether the provided host is that of a public cloud authority\r\n   *\r\n   * @param authority string\r\n   * @returns bool\r\n   */\n\n\n  Authority.isPublicCloudAuthority = function (host) {\n    return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n  };\n  /**\r\n   * Rebuild the authority string with the region\r\n   *\r\n   * @param host string\r\n   * @param region string\r\n   */\n\n\n  Authority.buildRegionalAuthorityString = function (host, region, queryString) {\n    // Create and validate a Url string object with the initial authority string\n    var authorityUrlInstance = new UrlString(host);\n    authorityUrlInstance.validateAsUri();\n    var authorityUrlParts = authorityUrlInstance.getUrlComponents();\n    var hostNameAndPort = region + \".\" + authorityUrlParts.HostNameAndPort;\n\n    if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n      hostNameAndPort = region + \".\" + Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;\n    } // Include the query string portion of the url\n\n\n    var url = UrlString.constructAuthorityUriFromObject(__assign(__assign({}, authorityUrlInstance.getUrlComponents()), {\n      HostNameAndPort: hostNameAndPort\n    })).urlString; // Add the query string if a query string was provided\n\n    if (queryString) return url + \"?\" + queryString;\n    return url;\n  };\n  /**\r\n   * Replace the endpoints in the metadata object with their regional equivalents.\r\n   *\r\n   * @param metadata OpenIdConfigResponse\r\n   * @param azureRegion string\r\n   */\n\n\n  Authority.replaceWithRegionalInformation = function (metadata, azureRegion) {\n    metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion); // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\n\n    metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, Constants.REGIONAL_AUTH_NON_MSI_QUERY_STRING);\n\n    if (metadata.end_session_endpoint) {\n      metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\n    }\n\n    return metadata;\n  };\n  /**\r\n   * Transform CIAM_AUTHORIY as per the below rules:\r\n   * If no path segments found and it is a CIAM authority (hostname ends with .ciamlogin.com), then transform it\r\n   *\r\n   * NOTE: The transformation path should go away once STS supports CIAM with the format: `tenantIdorDomain.ciamlogin.com`\r\n   * `ciamlogin.com` can also change in the future and we should accommodate the same\r\n   *\r\n   * @param authority\r\n   */\n\n\n  Authority.transformCIAMAuthority = function (authority) {\n    var ciamAuthority = authority.endsWith(Constants.FORWARD_SLASH) ? authority : \"\" + authority + Constants.FORWARD_SLASH;\n    var authorityUrl = new UrlString(authority);\n    var authorityUrlComponents = authorityUrl.getUrlComponents(); // check if transformation is needed\n\n    if (authorityUrlComponents.PathSegments.length === 0 && authorityUrlComponents.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {\n      var tenantIdOrDomain = authorityUrlComponents.HostNameAndPort.split(\".\")[0];\n      ciamAuthority = \"\" + ciamAuthority + tenantIdOrDomain + Constants.AAD_TENANT_DOMAIN_SUFFIX;\n    }\n\n    return ciamAuthority;\n  };\n\n  return Authority;\n}();\n\nexport { Authority };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;AAGG;;AA2BH;;;AAGG;;AACH;AAAA;AAAA;EAwBI,mBACIA,SADJ,EAEIC,gBAFJ,EAGIC,YAHJ,EAIIC,gBAJJ,EAKIC,MALJ,EAMIC,iBANJ,EAOIC,aAPJ,EAO0B;IAEtB,KAAKC,kBAAL,GAA0BP,SAA1B;;IACA,KAAKQ,mBAAL,CAAyBC,aAAzB;;IACA,KAAKR,gBAAL,GAAwBA,gBAAxB;IACA,KAAKC,YAAL,GAAoBA,YAApB;IACA,KAAKC,gBAAL,GAAwBA,gBAAxB;IACA,KAAKO,uBAAL,GAA+B;MAAEC,WAAW,EAAEC,SAAf;MAA0BC,aAAa,EAAED,SAAzC;MAAoDE,cAAc,EAAEF;IAApE,CAA/B;IACA,KAAKR,MAAL,GAAcA,MAAd;IACA,KAAKC,iBAAL,GAAyBA,iBAAzB;IACA,KAAKC,aAAL,GAAqBA,aAArB;IACA,KAAKS,eAAL,GAAuB,IAAIC,eAAJ,CAAoBf,gBAApB,EAAsC,KAAKI,iBAA3C,EAA8D,KAAKC,aAAnE,CAAvB;EACH;;EAGDW,sBAAWC,SAAa,UAAxB,EAAwB,eAAxB,EAAwB;;IAAxBC;;MAGI,IAAI,KAAKC,+BAAL,CAAqCC,eAArC,CAAqDC,QAArD,CAA8DC,SAAS,CAACC,aAAxE,CAAJ,EAA4F;QACxF,OAAOC,aAAa,CAACC,IAArB;MACH;;MAED,IAAMC,YAAY,GAAG,KAAKP,+BAAL,CAAqCQ,YAA1D;;MACA,IAAID,YAAY,CAACE,MAAjB,EAAyB;QACrB,QAAOF,YAAY,CAAC,CAAD,CAAZ,CAAgBG,WAAhB,EAAP;UACI,KAAKP,SAAS,CAACQ,IAAf;YACI,OAAON,aAAa,CAACO,IAArB;;UACJ,KAAKT,SAAS,CAACU,IAAf;YACI,OAAOR,aAAa,CAACS,IAArB;QAJR;MAQH;;MACD,OAAOT,aAAa,CAACU,OAArB;IACH,CAnBuB;qBAAA;;EAAA,CAAxB;EAwBAlB,sBAAWC,SAAY,UAAvB,EAAuB,cAAvB,EAAuB;IAHvB;;AAEG;IACHC;MACI,OAAO,KAAKhB,gBAAL,CAAsBiC,YAA7B;IACH,CAFsB;qBAAA;;EAAA,CAAvB;EAOAnB,sBAAWC,SAAO,UAAlB,EAAkB,SAAlB,EAAkB;IAHlB;;AAEG;IACHC;MACI,OAAO,KAAKhB,gBAAZ;IACH,CAFiB;qBAAA;;EAAA,CAAlB;EAOAc,sBAAWC,SAAkB,UAA7B,EAA6B,oBAA7B,EAA6B;IAH7B;;AAEG;IACHC;MACI,OAAO,KAAKX,mBAAL,CAAyB6B,SAAhC;IACH,CAF4B;;IAI7B;;AAEG;IACHC,eAA8BC,GAA9B,EAAyC;MACrC,KAAK/B,mBAAL,GAA2B,IAAIgC,SAAJ,CAAcD,GAAd,CAA3B;;MACA,KAAK/B,mBAAL,CAAyBC,aAAzB;;MACA,KAAKgC,gCAAL,GAAwC,IAAxC;IACH,CAX4B;qBAAA;;EAAA,CAA7B;EAgBAxB,sBAAWC,SAA+B,UAA1C,EAA0C,iCAA1C,EAA0C;IAH1C;;AAEG;IACHC;MACI,IAAI,CAAC,KAAKsB,gCAAV,EAA4C;QACxC,KAAKA,gCAAL,GAAwC,KAAKjC,mBAAL,CAAyBkC,gBAAzB,EAAxC;MACH;;MAED,OAAO,KAAKD,gCAAZ;IACH,CANyC;qBAAA;;EAAA,CAA1C;EAWAxB,sBAAWC,SAAe,UAA1B,EAA0B,iBAA1B,EAA0B;IAH1B;;AAEG;IACHC;MACI,OAAO,KAAKC,+BAAL,CAAqCC,eAArC,CAAqDS,WAArD,EAAP;IACH,CAFyB;qBAAA;;EAAA,CAA1B;EAOAb,sBAAWC,SAAM,UAAjB,EAAiB,QAAjB,EAAiB;IAHjB;;AAEG;IACHC;MACI,OAAO,KAAKC,+BAAL,CAAqCQ,YAArC,CAAkD,CAAlD,CAAP;IACH,CAFgB;qBAAA;;EAAA,CAAjB;EAOAX,sBAAWC,SAAqB,UAAhC,EAAgC,uBAAhC,EAAgC;IAHhC;;AAEG;IACHC;MACI,IAAG,KAAKwB,iBAAL,EAAH,EAA6B;QACzB,IAAMC,QAAQ,GAAG,KAAKC,WAAL,CAAiB,KAAKC,QAAL,CAAcC,sBAA/B,CAAjB;QACA,OAAO,KAAKC,aAAL,CAAmBJ,QAAnB,CAAP;MACH,CAHD,MAGO;QACH,MAAMK,eAAe,CAACC,sCAAhB,CAAuD,uBAAvD,CAAN;MACH;IACJ,CAP+B;qBAAA;;EAAA,CAAhC;EAYAjC,sBAAWC,SAAa,UAAxB,EAAwB,eAAxB,EAAwB;IAHxB;;AAEG;IACHC;MACI,IAAG,KAAKwB,iBAAL,EAAH,EAA6B;QACzB,IAAMC,QAAQ,GAAG,KAAKC,WAAL,CAAiB,KAAKC,QAAL,CAAcK,cAA/B,CAAjB;QACA,OAAO,KAAKH,aAAL,CAAmBJ,QAAnB,CAAP;MACH,CAHD,MAGO;QACH,MAAMK,eAAe,CAACC,sCAAhB,CAAuD,uBAAvD,CAAN;MACH;IACJ,CAPuB;qBAAA;;EAAA,CAAxB;EASAjC,sBAAWC,SAAkB,UAA7B,EAA6B,oBAA7B,EAA6B;IAA7BC;MACI,IAAG,KAAKwB,iBAAL,EAAH,EAA6B;QACzB,IAAMC,QAAQ,GAAG,KAAKC,WAAL,CAAiB,KAAKC,QAAL,CAAcK,cAAd,CAA6BC,OAA7B,CAAqC,QAArC,EAA+C,aAA/C,CAAjB,CAAjB;QACA,OAAO,KAAKJ,aAAL,CAAmBJ,QAAnB,CAAP;MACH,CAHD,MAGO;QACH,MAAMK,eAAe,CAACC,sCAAhB,CAAuD,uBAAvD,CAAN;MACH;IACJ,CAP4B;qBAAA;;EAAA,CAA7B;EAYAjC,sBAAWC,SAAkB,UAA7B,EAA6B,oBAA7B,EAA6B;IAH7B;;AAEG;IACHC;MACI,IAAG,KAAKwB,iBAAL,EAAH,EAA6B;;QAEzB,IAAI,CAAC,KAAKG,QAAL,CAAcO,oBAAnB,EAAyC;UACrC,MAAMJ,eAAe,CAACK,6BAAhB,EAAN;QACH;;QACD,IAAMV,QAAQ,GAAG,KAAKC,WAAL,CAAiB,KAAKC,QAAL,CAAcO,oBAA/B,CAAjB;QACA,OAAO,KAAKL,aAAL,CAAmBJ,QAAnB,CAAP;MACH,CAPD,MAOO;QACH,MAAMK,eAAe,CAACC,sCAAhB,CAAuD,uBAAvD,CAAN;MACH;IACJ,CAX4B;qBAAA;;EAAA,CAA7B;EAgBAjC,sBAAWC,SAAqB,UAAhC,EAAgC,uBAAhC,EAAgC;IAHhC;;AAEG;IACHC;MACI,IAAG,KAAKwB,iBAAL,EAAH,EAA6B;QACzB,IAAMC,QAAQ,GAAG,KAAKC,WAAL,CAAiB,KAAKC,QAAL,CAAcS,MAA/B,CAAjB;QACA,OAAO,KAAKP,aAAL,CAAmBJ,QAAnB,CAAP;MACH,CAHD,MAGO;QACH,MAAMK,eAAe,CAACC,sCAAhB,CAAuD,uBAAvD,CAAN;MACH;IACJ,CAP+B;qBAAA;;EAAA,CAAhC;EAYAjC,sBAAWC,SAAO,UAAlB,EAAkB,SAAlB,EAAkB;IAHlB;;AAEG;IACHC;MACI,IAAG,KAAKwB,iBAAL,EAAH,EAA6B;QACzB,IAAMC,QAAQ,GAAG,KAAKC,WAAL,CAAiB,KAAKC,QAAL,CAAcU,QAA/B,CAAjB;QACA,OAAO,KAAKR,aAAL,CAAmBJ,QAAnB,CAAP;MACH,CAHD,MAGO;QACH,MAAMK,eAAe,CAACC,sCAAhB,CAAuD,uBAAvD,CAAN;MACH;IACJ,CAPiB;qBAAA;;EAAA,CAAlB;EASA;;;AAGG;;EACKhC,SAAa,UAAb,CAAa8B,aAAb,GAAR,UAAsBX,SAAtB,EAAuC;IACnC,OAAOA,SAAS,CAACe,OAAV,CAAkB,sBAAlB,EAA0C,KAAKK,MAA/C,CAAP;EACH,CAFO;EAIR;;;AAGG;;;EACKvC,SAAW,UAAX,CAAW2B,WAAX,GAAR,UAAoBR,SAApB,EAAqC;IACjC,IAAIO,QAAQ,GAAGP,SAAf;IACA,IAAMqB,kBAAkB,GAAG,IAAIlB,SAAJ,CAAc,KAAKM,QAAL,CAAca,mBAA5B,CAA3B;IACA,IAAMC,oBAAoB,GAAGF,kBAAkB,CAAChB,gBAAnB,GAAsCd,YAAnE;IACA,IAAMiC,qBAAqB,GAAG,KAAKzC,+BAAL,CAAqCQ,YAAnE;IAEAiC,qBAAqB,CAACC,OAAtB,CAA8B,UAACC,WAAD,EAAcC,KAAd,EAAmB;MAC7C,IAAMC,UAAU,GAAGL,oBAAoB,CAACI,KAAD,CAAvC;;MACA,IAAID,WAAW,KAAKE,UAApB,EAAgC;QAC5BrB,QAAQ,GAAGA,QAAQ,CAACQ,OAAT,CAAiB,MAAIa,UAAJ,GAAc,GAA/B,EAAoC,MAAIF,WAAJ,GAAe,GAAnD,CAAX;MACH;IACJ,CALD;IAOA,OAAOnB,QAAP;EACH,CAdO;;EAmBR3B,sBAAcC,SAAkC,UAAhD,EAAgD,oCAAhD,EAAgD;IAHhD;;AAEG;IACHC;MACI,IACI,KAAK+C,aAAL,KAAuBzC,aAAa,CAACO,IAArC,IACA,KAAKkC,aAAL,KAAuBzC,aAAa,CAACS,IADrC,IAEA,KAAKE,YAAL,KAAsB+B,YAAY,CAACC,IAHvC,EAIE;QACE,OAAU,KAAK7D,kBAAL,GAAuB,kCAAjC;MACH;;MACD,OAAU,KAAKA,kBAAL,GAAuB,uCAAjC;IACH,CAT+C;qBAAA;;EAAA,CAAhD;EAWA;;AAEG;;EACHW;IACI,OAAO,CAAC,CAAC,KAAK4B,QAAd;EACH,CAFD;EAIA;;;AAGG;;;EACU5B,4CAAb;;;;;;;;YAEI,WAAKb,iBAAL,MAAsB,IAAtB,IAAsBgE,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,mBAAF,CAAsBC,iBAAiB,CAACC,8BAAxC,EAAwE,KAAKlE,aAA7E,CAAtB;YAEImE,cAAc,GAAG,KAAKvE,YAAL,CAAkBwE,2BAAlB,CAA8C,KAAKC,eAAnD,CAAjB;;YACJ,IAAI,CAACF,cAAL,EAAqB;cACjBA,cAAc,GAAG,IAAIG,uBAAJ,EAAjB;cACAH,cAAc,CAACI,wBAAf,CAAwC,KAAKtE,kBAA7C;YACH;;YAED,WAAKF,iBAAL,MAAsB,IAAtB,IAAsByE,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,eAAF,CAAkBR,iBAAiB,CAACS,qCAApC,EAA2E,KAAK1E,aAAhF,CAAtB;YAC6B;YAAA;YAAA,EAAM,KAAK2E,4BAAL,CAAkCR,cAAlC,CAAN;;;YAAvBS,oBAAoB,GAAGC,EAAuD,KAAvD,EAAvB;YACN,KAAK5E,kBAAL,GAA0B,KAAKA,kBAAL,CAAwB6C,OAAxB,CAAgC,KAAKuB,eAArC,EAAsDF,cAAc,CAACW,iBAArE,CAA1B;YAEA,WAAK/E,iBAAL,MAAsB,IAAtB,IAAsBgF,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEN,eAAF,CAAkBR,iBAAiB,CAACe,+BAApC,EAAqE,KAAKhF,aAA1E,CAAtB;YACuB;YAAA;YAAA,EAAM,KAAKiF,sBAAL,CAA4Bd,cAA5B,CAAN;;;YAAjBe,cAAc,GAAGL,EAAiD,KAAjD,EAAjB;;YAEN,IAAID,oBAAoB,KAAKO,uBAAuB,CAACC,KAAjD,IAA0DF,cAAc,KAAKC,uBAAuB,CAACC,KAAzG,EAAgH;;cAE5GjB,cAAc,CAACkB,cAAf;cACAlB,cAAc,CAACI,wBAAf,CAAwC,KAAKtE,kBAA7C;YACH;;YAEKqF,QAAQ,GAAG,KAAK1F,YAAL,CAAkB2F,iCAAlB,CAAoDpB,cAAc,CAACqB,eAAnE,CAAX;YACN,KAAK5F,YAAL,CAAkB6F,oBAAlB,CAAuCH,QAAvC,EAAiDnB,cAAjD;YACA,KAAK3B,QAAL,GAAgB2B,cAAhB;;;;;;;EACH,CA1BY;EA4Bb;;;AAGG;;;EACWvD,SAAsB,UAAtB,CAAsBqE,sBAAtB,GAAd,UAAqCd,cAArC,EAA4E;;;;;;;;YACxE,WAAKpE,iBAAL,MAAsB,IAAtB,IAAsBgE,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,mBAAF,CAAsBC,iBAAiB,CAACe,+BAAxC,EAAyE,KAAKhF,aAA9E,CAAtB;YAEIwC,QAAQ,GAAG,KAAKkD,6BAAL,EAAX;;YACJ,IAAIlD,QAAJ,EAAc;cACV2B,cAAc,CAACc,sBAAf,CAAsCzC,QAAtC,EAAgD,KAAhD;cACA,OAAO;cAAA;cAAA,yBAAuB,CAACmD,MAAxB,CAAP;YACH;;YAED,IAAI,KAAKC,mBAAL,CAAyBzB,cAAzB,KAA4CA,cAAc,CAAC0B,oBAA3D,IAAmF,CAAC1B,cAAc,CAAC2B,SAAf,EAAxF,EAAoH;;cAEhH,OAAO;cAAA;cAAA,yBAAuB,CAACV,KAAxB,CAAP;YACH;;YAED,WAAKrF,iBAAL,MAAsB,IAAtB,IAAsByE,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,eAAF,CAAkBR,iBAAiB,CAAC8B,uCAApC,EAA6E,KAAK/F,aAAlF,CAAtB;YACW;YAAA;YAAA,EAAM,KAAKgG,8BAAL,EAAN;;;YAAXxD,QAAQ,GAAGyD,SAAX;YACI,sBAAQ;YAAA;YAAA,IAAR;YAEI,iBAAKpG,gBAAL,CAAsBqG,wBAAtB,MAA8C,IAA9C,IAA8CnB,aAA9C,GAA8C,MAA9C,GAA8CA,GAAEoB,WAAhD,GAA2D;YAAA;YAAA;YAC3D,WAAKpG,iBAAL,MAAsB,IAAtB,IAAsB8E,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEJ,eAAF,CAAkBR,iBAAiB,CAACmC,8CAApC,EAAoF,KAAKpG,aAAzF,CAAtB;YACW;YAAA;YAAA,EAAM,KAAKqG,qCAAL,CAA2C7D,QAA3C,CAAN;;;YAAXA,QAAQ,GAAGyD,SAAX;;;;YAGJ9B,cAAc,CAACc,sBAAf,CAAsCzC,QAAtC,EAAgD,IAAhD;YACA,OAAO;YAAA;YAAA,yBAAuB,CAAC8D,OAAxB,CAAP;;;YAGAC,gBAAgB,GAAG,KAAKC,sCAAL,EAAnB;kBACAD,gBAAgB,IAAI,CAAC,KAAK1G,gBAAL,CAAsB4G,6BAA3C,OAAqE;YAAA;YAAA,IAArE;YAEI,iBAAK5G,gBAAL,CAAsBqG,wBAAtB,MAA8C,IAA9C,IAA8CQ,aAA9C,GAA8C,MAA9C,GAA8CA,GAAEP,WAAhD,GAA2D;YAAA;YAAA;YAC3D,WAAKpG,iBAAL,MAAsB,IAAtB,IAAsB4G,aAAtB,GAAsB,MAAtB,GAAsBA,GAAElC,eAAF,CAAkBR,iBAAiB,CAACmC,8CAApC,EAAoF,KAAKpG,aAAzF,CAAtB;YACmB;YAAA;YAAA,EAAM,KAAKqG,qCAAL,CACrBE,gBADqB,CAAN;;;YAAnBA,gBAAgB,GAAGN,SAAnB;;;;YAKJ9B,cAAc,CAACc,sBAAf,CAAsCsB,gBAAtC,EAAwD,KAAxD;YACA,OAAO;YAAA;YAAA,yBAAuB,CAACK,gBAAxB,CAAP;;;YAEA,MAAMjE,eAAe,CAACkE,kCAAhB,CACF,KAAKC,kCADH,CAAN;;;;EAIP,CA5Ca;EA8Cd;;;;;AAKG;;;EACKlG,SAAmB,UAAnB,CAAmBgF,mBAAnB,GAAR,UAA4BzB,cAA5B,EAAmE;IAC/D,IAAMf,kBAAkB,GAAG,IAAIlB,SAAJ,CAAciC,cAAc,CAACd,mBAA7B,CAA3B;IACA,IAAM0D,WAAW,GAAG3D,kBAAkB,CAAChB,gBAAnB,GAAsCd,YAA1D;IAEA,OAAOyF,WAAW,CAACxF,MAAZ,KAAuB,KAAKT,+BAAL,CAAqCQ,YAArC,CAAkDC,MAAhF;EACH,CALO;EAOR;;AAEG;;;EACKX,oDAAR;IACI,IAAI,KAAKf,gBAAL,CAAsBmH,iBAA1B,EAA6C;MACzC,IAAI;QACA,OAAOC,IAAI,CAACC,KAAL,CAAW,KAAKrH,gBAAL,CAAsBmH,iBAAjC,CAAP;MACH,CAFD,CAEE,OAAOG,CAAP,EAAU;QACR,MAAMC,wBAAwB,CAACC,mCAAzB,EAAN;MACH;IACJ;;IAED,OAAO,IAAP;EACH,CAVO;EAYR;;;;AAIG;;;EACWzG,qDAAd;;;;;;;;YACI,WAAKb,iBAAL,MAAsB,IAAtB,IAAsBgE,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,mBAAF,CAAsBC,iBAAiB,CAAC8B,uCAAxC,EAAiF,KAAK/F,aAAtF,CAAtB;YAEMsH,OAAO,GAAgB,EAAvB;;;;;;YAQe,OAAM;YAAA;YAAA,OAAK3H,gBAAL,CACnB4H,mBADmB,CACuB,KAAKT,kCAD5B,EACgEQ,OADhE,EAAN;;;YAAXE,QAAQ,GAAGhD,EAC8E,KAD9E,EAAX;YAEN;YAAA;YAAA,EAAOiD,sBAAsB,CAACD,QAAQ,CAACE,IAAV,CAAtB,GAAwCF,QAAQ,CAACE,IAAjD,GAAwD,IAA/D;;;;;YAEA;YAAA;YAAA,EAAO,IAAP;;;;;;;;;EAEP,CAjBa;EAmBd;;AAEG;;;EACK9G,6DAAR;IACI,IAAI,KAAKX,kBAAL,IAA2B0H,gBAA/B,EAAiD;MAC7C,OAAOA,gBAAgB,CAAC,KAAK1H,kBAAN,CAAvB;IACH;;IAED,OAAO,IAAP;EACH,CANO;EAQR;;AAEG;;;EACWW,SAAqC,UAArC,CAAqCyF,qCAArC,GAAd,UAAoD7D,QAApD,EAAkF;;;;;;;;YAC9E,WAAKzC,iBAAL,MAAsB,IAAtB,IAAsBgE,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,mBAAF,CAAsBC,iBAAiB,CAACmC,8CAAxC,EAAwF,KAAKpG,aAA7F,CAAtB;YAEA,WAAKD,iBAAL,MAAsB,IAAtB,IAAsByE,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,eAAF,CAAkBR,iBAAiB,CAAC2D,2BAApC,EAAiE,KAAK5H,aAAtE,CAAtB;YAC+B;YAAA;YAAA,EAAM,KAAKS,eAAL,CAAqBoH,YAArB,CAAiC,MAClE,KAAKhI,gBAAL,CAAsBqG,wBAD4C,MACpB,IADoB,IACpBnB,aADoB,GACpB,MADoB,GACpBA,GAAE+C,iBADf,EAEjC,KAAK1H,uBAF4B,CAAN;;;YAAzB2H,sBAAsB,GAAGC,EAG9B,KAH8B,EAAzB;YAKA7B,WAAW,GACb,YAAKtG,gBAAL,CAAsBqG,wBAAtB,MAA8C,IAA9C,IAA8CrB,aAA9C,GAA8C,MAA9C,GAA8CA,GAAEsB,WAAhD,MAAgElF,SAAS,CAACgH,+BAA1E,GACMF,sBADN,GAEK,MAAC,KAAKlI,gBAAL,CAAsBqG,wBAAvB,MAA+C,IAA/C,IAA+CQ,aAA/C,GAA+C,MAA/C,GAA+CA,GAAEP,WAHpD;;YAKN,IAAI,YAAKtG,gBAAL,CAAsBqG,wBAAtB,MAAgD,IAAhD,IAAgDS,aAAhD,GAAgD,MAAhD,GAAgDA,cAAhD,MAAgE1F,SAAS,CAACgH,+BAA9E,EAA+G;cAC3G,KAAK7H,uBAAL,CAA6BI,cAA7B,GAA8CuH,sBAAsB,GAChEG,uBAAuB,CAACC,mCADwC,GAEhED,uBAAuB,CAACE,+BAF5B;YAGH,CAJD,MAIO;cACH,IAAIL,sBAAJ,EAA4B;gBACxB,KAAK3H,uBAAL,CAA6BI,cAA7B,GACI,YAAKX,gBAAL,CAAsBqG,wBAAtB,MAAgD,IAAhD,IAAgDD,aAAhD,GAAgD,MAAhD,GAAgDA,cAAhD,MAAgE8B,sBADtB,GAG1CG,uBAAuB,CAACG,2BAHkB,GAI1CH,uBAAuB,CAACI,uBAJ5B;cAKH,CAND,MAMO;gBACH,KAAKlI,uBAAL,CAA6BI,cAA7B,GAA8C0H,uBAAuB,CAACK,4BAAtE;cACH;YACJ;;YAED,IAAIpC,WAAJ,EAAiB;cACb,KAAK/F,uBAAL,CAA6BC,WAA7B,GAA2C8F,WAA3C;cACA,OAAO;cAAA;cAAA,WAAS,CAACqC,8BAAV,CAAyChG,QAAzC,EAAmD2D,WAAnD,EAAP;YACH;;YAED;YAAA;YAAA,EAAO3D,QAAP;;;;EACH,CApCa;EAsCd;;;;;AAKG;;;EACW5B,SAA4B,UAA5B,CAA4B+D,4BAA5B,GAAd,UAA2CR,cAA3C,EAAkF;;;;;;;;YAE9E,WAAKpE,iBAAL,MAAsB,IAAtB,IAAsBgE,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,mBAAF,CAAsBC,iBAAiB,CAACS,qCAAxC,EAA+E,KAAK1E,aAApF,CAAtB;;YAGA,KAAKF,MAAL,CAAY2I,OAAZ,CAAoB,0DAApB;YACA,KAAK3I,MAAL,CAAY4I,UAAZ,CAAuB,yBAAsB,KAAK7I,gBAAL,CAAsB8I,gBAAtB,IAA0C1H,SAAS,CAAC2H,cAA1E,CAAvB;YACA,KAAK9I,MAAL,CAAY4I,UAAZ,CAAuB,0BAAuB,KAAK7I,gBAAL,CAAsBmH,iBAAtB,IAA2C/F,SAAS,CAAC2H,cAA5E,CAAvB;YACA,KAAK9I,MAAL,CAAY4I,UAAZ,CAAuB,2BAAwBvE,cAAc,CAACd,mBAAf,IAAsCpC,SAAS,CAAC2H,cAAxE,CAAvB;YACIpG,QAAQ,GAAG,KAAKqG,mCAAL,EAAX;;YACJ,IAAIrG,QAAJ,EAAc;cACV,KAAK1C,MAAL,CAAY2I,OAAZ,CAAoB,+CAApB;cACAtE,cAAc,CAACQ,4BAAf,CAA4CnC,QAA5C,EAAsD,KAAtD;cACA,OAAO;cAAA;cAAA,yBAAuB,CAACmD,MAAxB,CAAP;YACH;;;YAGD,KAAK7F,MAAL,CAAY2I,OAAZ,CAAoB,mHAApB;YACMK,qBAAqB,GAAG3E,cAAc,CAAC2B,SAAf,EAAxB;;YACN,IAAI,KAAKF,mBAAL,CAAyBzB,cAAzB,KAA4CA,cAAc,CAAC4E,kBAA3D,IAAiF,CAACD,qBAAtF,EAA6G;cACzG,KAAKhJ,MAAL,CAAY2I,OAAZ,CAAoB,8BAApB,EADyG;;cAGzG,OAAO;cAAA;cAAA,yBAAuB,CAACrD,KAAxB,CAAP;YACH,CAJD,MAIO,IAAI0D,qBAAJ,EAA2B;cAC9B,KAAKhJ,MAAL,CAAY2I,OAAZ,CAAoB,iCAApB;YACH;;YAED,KAAK3I,MAAL,CAAY2I,OAAZ,CAAoB,oHAApB;YACA,WAAK1I,iBAAL,MAAsB,IAAtB,IAAsByE,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,eAAF,CAAkBR,iBAAiB,CAAC+E,6CAApC,EAAmF,KAAKhJ,aAAxF,CAAtB;YACW;YAAA;YAAA,EAAM,KAAKiJ,oCAAL,EAAN;;;YAAXzG,QAAQ,GAAGuC,SAAX;;YACA,IAAIvC,QAAJ,EAAc;cACV,KAAK1C,MAAL,CAAY2I,OAAZ,CAAoB,gGAApB;cACAtE,cAAc,CAACQ,4BAAf,CAA4CnC,QAA5C,EAAsD,IAAtD;cACA,OAAO;cAAA;cAAA,yBAAuB,CAAC8D,OAAxB,CAAP;YACH;;YAED,KAAKxG,MAAL,CAAY2I,OAAZ,CAAoB,6HAApB;YACMlC,gBAAgB,GAAG,KAAK2C,2CAAL,EAAnB;;YACN,IAAI3C,gBAAgB,IAAI,CAAC,KAAKe,OAAL,CAAab,0BAAtC,EAAkE;cAC9D,KAAK3G,MAAL,CAAY2I,OAAZ,CAAoB,uDAApB;cACAtE,cAAc,CAACQ,4BAAf,CAA4C4B,gBAA5C,EAA8D,KAA9D;cACA,OAAO;cAAA;cAAA,yBAAuB,CAACK,gBAAxB,CAAP;YACH;;;YAGD,KAAK9G,MAAL,CAAYqJ,KAAZ,CAAkB,oLAAlB;YACA,MAAM/B,wBAAwB,CAACgC,6BAAzB,EAAN;;;;EACH,CA/Ca;EAiDd;;AAEG;;;EACKxI,0DAAR;;IAGI,IAAI,KAAKgD,aAAL,KAAuBzC,aAAa,CAACC,IAAzC,EAA+C;MAC3C,KAAKtB,MAAL,CAAY2I,OAAZ,CAAoB,qGAApB;MACA,OAAO7H,SAAS,CAACyI,oCAAV,CAA+C,KAAKhF,eAApD,CAAP;IACH,CANL;;;IASI,IAAI,KAAKxE,gBAAL,CAAsByJ,sBAA1B,EAAkD;MAC9C,KAAKxJ,MAAL,CAAY2I,OAAZ,CAAoB,sFAApB;;MACA,IAAI;QACA,KAAK3I,MAAL,CAAY2I,OAAZ,CAAoB,mDAApB;QACA,IAAMc,cAAc,GAAGtC,IAAI,CAACC,KAAL,CAAW,KAAKrH,gBAAL,CAAsByJ,sBAAjC,CAAvB;QACA,IAAM9G,QAAQ,GAAG5B,SAAS,CAAC4I,4CAAV,CACbD,cAAc,CAAC/G,QADF,EAEb,KAAK6B,eAFQ,CAAjB;QAIA,KAAKvE,MAAL,CAAY2I,OAAZ,CAAoB,sCAApB;;QACA,IAAIjG,QAAJ,EAAc;UACV,KAAK1C,MAAL,CAAY2I,OAAZ,CAAoB,+EAApB;UACA,OAAOjG,QAAP;QACH,CAHD,MAGO;UACH,KAAK1C,MAAL,CAAY2I,OAAZ,CAAoB,uEAApB;QACH;MACJ,CAdD,CAcE,OAAOtB,CAAP,EAAU;QACR,KAAKrH,MAAL,CAAY2I,OAAZ,CAAoB,gGAApB;QACA,MAAMrB,wBAAwB,CAACqC,wCAAzB,EAAN;MACH;IACJ,CA7BL;;;IAgCI,IAAI,KAAKC,oBAAL,EAAJ,EAAiC;MAC7B,KAAK5J,MAAL,CAAY2I,OAAZ,CAAoB,gGAApB;MACA,OAAO7H,SAAS,CAACyI,oCAAV,CAA+C,KAAKhF,eAApD,CAAP;IACH;;IAED,OAAO,IAAP;EACH,CAtCO;EAwCR;;;;AAIG;;;EACWzD,2DAAd;;;;;;;;YACI,WAAKb,iBAAL,MAAsB,IAAtB,IAAsBgE,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,mBAAF,CAAsBC,iBAAiB,CAAC+E,6CAAxC,EAAuF,KAAKhJ,aAA5F,CAAtB;YACM2J,yBAAyB,GAC3B,KAAG1I,SAAS,CAAC2I,4BAAb,GAA4C,KAAK3J,kBAAjD,GAAmE,uBADjE;YAEAqH,OAAO,GAAgB,EAAvB;YAOFuC,KAAK,GAAG,IAAR;;;;;;YAGI,OAAM;YAAA;YAAA,OAAKlK,gBAAL,CAAsB4H,mBAAtB,CACFoC,yBADE,EAEFrC,OAFE,EAAN;;;YADEE,QAAQ,GACVhD,EAGC,KAHD,EADE;YAMFsF,iBAAiB,SAAjB;YACAtH,QAAQ,SAAR;;YACJ,IAAIuH,gCAAgC,CAACvC,QAAQ,CAACE,IAAV,CAApC,EAAqD;cACjDoC,iBAAiB,GAAGtC,QAAQ,CAACE,IAA7B;cACAlF,QAAQ,GAAGsH,iBAAiB,CAACtH,QAA7B;cAEA,KAAK1C,MAAL,CAAY4I,UAAZ,CAAuB,mCAAiCoB,iBAAiB,CAACE,yBAA1E;YACH,CALD,MAKO,IAAIC,qCAAqC,CAACzC,QAAQ,CAACE,IAAV,CAAzC,EAA0D;cAC7D,KAAK5H,MAAL,CAAYoK,OAAZ,CAAoB,wHAAsH1C,QAAQ,CAAC2C,MAAnJ;cAEAL,iBAAiB,GAAGtC,QAAQ,CAACE,IAA7B;;cACA,IAAIoC,iBAAiB,CAACX,KAAlB,KAA4BlI,SAAS,CAACmJ,gBAA1C,EAA4D;gBACxD,KAAKtK,MAAL,CAAYqJ,KAAZ,CAAkB,oEAAlB;gBACA;gBAAA;gBAAA,EAAO,IAAP;cACH;;cAED,KAAKrJ,MAAL,CAAYoK,OAAZ,CAAoB,sDAAoDJ,iBAAiB,CAACX,KAA1F;cACA,KAAKrJ,MAAL,CAAYoK,OAAZ,CAAoB,kEAAgEJ,iBAAiB,CAACO,iBAAtG;cAEA,KAAKvK,MAAL,CAAYoK,OAAZ,CAAoB,2FAApB;cACA1H,QAAQ,GAAG,EAAX;YACH,CAdM,MAcA;cACH,KAAK1C,MAAL,CAAYqJ,KAAZ,CAAkB,4FAAlB;cACA;cAAA;cAAA,EAAO,IAAP;YACH;;YAED,KAAKrJ,MAAL,CAAY2I,OAAZ,CAAoB,wIAApB;YACAoB,KAAK,GAAGjJ,SAAS,CAAC4I,4CAAV,CACJhH,QADI,EAEJ,KAAK6B,eAFD,CAAR;;;;;;;;YAKA,IAAIiG,OAAK,YAAYC,SAArB,EAAgC;cAC5B,KAAKzK,MAAL,CAAYqJ,KAAZ,CAAkB,sGAAoGmB,OAAK,CAACE,SAA1G,GAA2I,uBAA3I,GAA2IF,OAAK,CAACG,YAAnK;YACH,CAFD,MAEO;cACGC,UAAU,GAAGJ,OAAb;cACN,KAAKxK,MAAL,CAAYqJ,KAAZ,CAAkB,0GAAwGuB,UAAU,CAACC,IAAnH,GAA+I,uBAA/I,GAA+ID,UAAU,CAACE,OAA5K;YACH;;YAED;YAAA;YAAA,EAAO,IAAP;;;;YAIJ,IAAI,CAACf,KAAL,EAAY;cACR,KAAK/J,MAAL,CAAYoK,OAAZ,CAAoB,sHAApB;cACA,KAAKpK,MAAL,CAAY2I,OAAZ,CAAoB,uDAApB;cAEAoB,KAAK,GAAGjJ,SAAS,CAACyI,oCAAV,CACJ,KAAKhF,eADD,CAAR;YAGH;;YACD;YAAA;YAAA,EAAOwF,KAAP;;;;EACH,CAvEa;EAyEd;;AAEG;;;EACKjJ,kEAAR;IACI,IAAI,KAAKX,kBAAL,IAA2B4K,yBAA/B,EAA0D;MACtD,OAAOA,yBAAyB,CAAC,KAAK5K,kBAAN,CAAhC;IACH;;IAED,OAAO,IAAP;EACH,CANO;EAQR;;AAEG;;;EACKW,2CAAR;IAAA,IAMCkK,YAND;;IACI,IAAMC,OAAO,GAAG,KAAKlL,gBAAL,CAAsB8I,gBAAtB,CAAuCqC,MAAvC,CAA8C,UAACtL,SAAD,EAAU;MACpE,OAAOwC,SAAS,CAAC+I,gBAAV,CAA2BvL,SAA3B,EAAsC8B,WAAtC,OAAwDsJ,KAAI,CAACzG,eAApE;IACH,CAFe,CAAhB;IAIA,OAAO0G,OAAO,CAACxJ,MAAR,GAAiB,CAAxB;EACH,CANO;EAQR;;;;AAIG;;;EACIX,8BAAP,UAAyBsK,eAAzB,EAAkDC,iBAAlD,EAAuF;IACnF,IAAIC,2BAAJ;;IAEA,IAAID,iBAAiB,IAAIA,iBAAiB,CAACE,kBAAlB,KAAyCC,kBAAkB,CAACC,IAArF,EAA2F;MACvF,IAAMpI,MAAM,GAAGgI,iBAAiB,CAAChI,MAAlB,GAA2BgI,iBAAiB,CAAChI,MAA7C,GAAsDlC,SAAS,CAACuK,qBAA/E;MACAJ,2BAA2B,GAAMD,iBAAiB,CAACE,kBAAlB,GAAwC,GAAxC,GAAwClI,MAAxC,GAA8C,GAA/E;IACH;;IAED,OAAOiI,2BAA2B,GAAGA,2BAAH,GAAiCF,eAAnE;EACH,CATM;EAWP;;;AAGG;;;EACItK,SAAoC,qCAApC,GAAP,UAA4C6K,IAA5C,EAAwD;IACpD,OAAO;MACH3G,iBAAiB,EAAE2G,IADhB;MAEHjG,eAAe,EAAEiG,IAFd;MAGHC,OAAO,EAAE,CAACD,IAAD;IAHN,CAAP;EAKH,CANM;EAQP;;;;AAIG;;;EACI7K,yDAAP,UACI4G,QADJ,EAEI9H,SAFJ,EAEqB;IAEjB,KAAK,IAAIiM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnE,QAAQ,CAACjG,MAA7B,EAAqCoK,CAAC,EAAtC,EAA0C;MACtC,IAAMnJ,QAAQ,GAAGgF,QAAQ,CAACmE,CAAD,CAAzB;;MACA,IAAInJ,QAAQ,CAACkJ,OAAT,CAAiBE,OAAjB,CAAyBlM,SAAzB,IAAsC,CAAC,CAA3C,EAA8C;QAC1C,OAAO8C,QAAP;MACH;IACJ;;IAED,OAAO,IAAP;EACH,CAZM;EAcP;;AAEG;;;EACH5B;IACI,IAAG,KAAKyB,iBAAL,EAAH,EAA6B;MACzB,OAAO,KAAKG,QAAL,CAAcgD,eAArB;IACH,CAFD,MAEO;MACH,MAAM7C,eAAe,CAACC,sCAAhB,CAAuD,uBAAvD,CAAN;IACH;EACJ,CAND;EAQA;;;AAGG;;;EACHhC,SAAO,UAAP,CAAOiL,OAAP,aAAQJ,IAAR,EAAoB;IAChB,OAAO,KAAKjJ,QAAL,CAAckJ,OAAd,CAAsBE,OAAtB,CAA8BH,IAA9B,IAAsC,CAAC,CAA9C;EACH,CAFD;EAIA;;;;;AAKG;;;EACI7K,SAAsB,uBAAtB,GAAP,UAA8B6K,IAA9B,EAA0C;IACtC,OAAOxK,SAAS,CAAC6K,mBAAV,CAA8BF,OAA9B,CAAsCH,IAAtC,KAA+C,CAAtD;EACH,CAFM;EAIP;;;;;AAKG;;;EACI7K,yCAAP,UAAoC6K,IAApC,EAAkDM,MAAlD,EAAkEC,WAAlE,EAAsF;;IAElF,IAAMC,oBAAoB,GAAG,IAAI/J,SAAJ,CAAcuJ,IAAd,CAA7B;IACAQ,oBAAoB,CAAC9L,aAArB;IAEA,IAAM+L,iBAAiB,GAAGD,oBAAoB,CAAC7J,gBAArB,EAA1B;IAEA,IAAI+J,eAAe,GAAKJ,MAAM,MAAN,GAAUG,iBAAiB,CAACnL,eAApD;;IAEA,IAAI,KAAKqL,sBAAL,CAA4BF,iBAAiB,CAACnL,eAA9C,CAAJ,EAAoE;MAChEoL,eAAe,GAAMJ,MAAM,MAAN,GAAU9K,SAAS,CAACoL,iCAAzC;IACH,CAXiF;;;IAclF,IAAMpK,GAAG,GAAGC,SAAS,CAACoK,+BAAV,CAAyCC,sBAC9CN,oBAAoB,CAAC7J,gBAArB,EAD8C,GACP;MAC1CrB,eAAe,EAAEoL;IADyB,CADO,CAAzC,EAGTpK,SAHH,CAdkF;;IAoBlF,IAAIiK,WAAJ,EAAiB,OAAU/J,GAAG,GAAI,GAAP,GAAO+J,WAAjB;IAEjB,OAAO/J,GAAP;EACH,CAvBM;EAyBP;;;;;AAKG;;;EACIrB,2CAAP,UAAsC4B,QAAtC,EAAsE2D,WAAtE,EAAyF;IACrF3D,QAAQ,CAACC,sBAAT,GAAkC7B,SAAS,CAAC4L,4BAAV,CAAuChK,QAAQ,CAACC,sBAAhD,EAAwE0D,WAAxE,CAAlC,CADqF;;IAGrF3D,QAAQ,CAACK,cAAT,GAA0BjC,SAAS,CAAC4L,4BAAV,CACtBhK,QAAQ,CAACK,cADa,EACGsD,WADH,EACgBlF,SAAS,CAACwL,kCAD1B,CAA1B;;IAIA,IAAIjK,QAAQ,CAACO,oBAAb,EAAmC;MAC/BP,QAAQ,CAACO,oBAAT,GAAgCnC,SAAS,CAAC4L,4BAAV,CAAuChK,QAAQ,CAACO,oBAAhD,EAAsEoD,WAAtE,CAAhC;IACH;;IAED,OAAO3D,QAAP;EACH,CAZM;EAcP;;;;;;;;AAQG;;;EACI5B,SAAsB,uBAAtB,GAAP,UAA8BlB,SAA9B,EAA+C;IAC3C,IAAIgN,aAAa,GAAGhN,SAAS,CAACsB,QAAV,CAAmBC,SAAS,CAAC0L,aAA7B,IAA8CjN,SAA9C,GAA0D,KAAGA,SAAH,GAAeuB,SAAS,CAAC0L,aAAvG;IACA,IAAMC,YAAY,GAAG,IAAI1K,SAAJ,CAAcxC,SAAd,CAArB;IACA,IAAMmN,sBAAsB,GAAGD,YAAY,CAACxK,gBAAb,EAA/B,CAH2C;;IAM3C,IAAIyK,sBAAsB,CAACvL,YAAvB,CAAoCC,MAApC,KAA+C,CAA/C,IAAqDsL,sBAAsB,CAAC9L,eAAvB,CAAuCC,QAAvC,CAAgDC,SAAS,CAACC,aAA1D,CAAzD,EAAmI;MAC/H,IAAM4L,gBAAgB,GAAGD,sBAAsB,CAAC9L,eAAvB,CAAuCgM,KAAvC,CAA6C,GAA7C,EAAkD,CAAlD,CAAzB;MACAL,aAAa,GAAG,KAAGA,aAAH,GAAmBI,gBAAnB,GAAsC7L,SAAS,CAAC+L,wBAAhE;IACH;;IAED,OAAON,aAAP;EACH,CAZM;;EAaX,OAAC9L,SAAD;AAAC,CAzwBD","names":["authority","networkInterface","cacheManager","authorityOptions","logger","performanceClient","correlationId","canonicalAuthority","_canonicalAuthority","validateAsUri","regionDiscoveryMetadata","region_used","undefined","region_source","region_outcome","regionDiscovery","RegionDiscovery","Object","Authority","get","canonicalAuthorityUrlComponents","HostNameAndPort","endsWith","Constants","CIAM_AUTH_URL","AuthorityType","Ciam","pathSegments","PathSegments","length","toLowerCase","ADFS","Adfs","DSTS","Dsts","Default","protocolMode","urlString","set","url","UrlString","_canonicalAuthorityUrlComponents","getUrlComponents","discoveryComplete","endpoint","replacePath","metadata","authorization_endpoint","replaceTenant","ClientAuthError","createEndpointDiscoveryIncompleteError","token_endpoint","replace","end_session_endpoint","createLogoutNotSupportedError","issuer","jwks_uri","tenant","cachedAuthorityUrl","canonical_authority","cachedAuthorityParts","currentAuthorityParts","forEach","currentPart","index","cachedPart","authorityType","ProtocolMode","OIDC","_a","addQueueMeasurement","PerformanceEvents","AuthorityResolveEndpointsAsync","metadataEntity","getAuthorityMetadataByAlias","hostnameAndPort","AuthorityMetadataEntity","updateCanonicalAuthority","_b","setPreQueueTime","AuthorityUpdateCloudDiscoveryMetadata","updateCloudDiscoveryMetadata","cloudDiscoverySource","_d","preferred_network","_c","AuthorityUpdateEndpointMetadata","updateEndpointMetadata","endpointSource","AuthorityMetadataSource","CACHE","resetExpiresAt","cacheKey","generateAuthorityMetadataCacheKey","preferred_cache","setAuthorityMetadata","getEndpointMetadataFromConfig","CONFIG","isAuthoritySameType","endpointsFromNetwork","isExpired","AuthorityGetEndpointMetadataFromNetwork","getEndpointMetadataFromNetwork","_g","azureRegionConfiguration","azureRegion","AuthorityUpdateMetadataWithRegionalInformation","updateMetadataWithRegionalInformation","NETWORK","harcodedMetadata","getEndpointMetadataFromHardcodedValues","skipAuthorityMetadataCache","_e","_f","HARDCODED_VALUES","createUnableToGetOpenidConfigError","defaultOpenIdConfigurationEndpoint","cachedParts","authorityMetadata","JSON","parse","e","ClientConfigurationError","createInvalidAuthorityMetadataError","options","sendGetRequestAsync","response","isOpenIdConfigResponse","body","EndpointMetadata","RegionDiscoveryDetectRegion","detectRegion","environmentRegion","autodetectedRegionName","_h","AZURE_REGION_AUTO_DISCOVER_FLAG","RegionDiscoveryOutcomes","AUTO_DETECTION_REQUESTED_SUCCESSFUL","AUTO_DETECTION_REQUESTED_FAILED","CONFIGURED_MATCHES_DETECTED","CONFIGURED_NOT_DETECTED","CONFIGURED_NO_AUTO_DETECTION","replaceWithRegionalInformation","verbose","verbosePii","knownAuthorities","NOT_APPLICABLE","getCloudDiscoveryMetadataFromConfig","metadataEntityExpired","aliasesFromNetwork","AuthorityGetCloudDiscoveryMetadataFromNetwork","getCloudDiscoveryMetadataFromNetwork","getCloudDiscoveryMetadataFromHarcodedValues","error","createUntrustedAuthorityError","createCloudDiscoveryMetadataFromHost","cloudDiscoveryMetadata","parsedResponse","getCloudDiscoveryMetadataFromNetworkResponse","createInvalidCloudDiscoveryMetadataError","isInKnownAuthorities","instanceDiscoveryEndpoint","AAD_INSTANCE_DISCOVERY_ENDPT","match","typedResponseBody","isCloudInstanceDiscoveryResponse","tenant_discovery_endpoint","isCloudInstanceDiscoveryErrorResponse","warning","status","INVALID_INSTANCE","error_description","error_1","AuthError","errorCode","errorMessage","typedError","name","message","InstanceDiscoveryMetadata","_this","matches","filter","getDomainFromUrl","authorityString","azureCloudOptions","authorityAzureCloudInstance","azureCloudInstance","AzureCloudInstance","None","DEFAULT_COMMON_TENANT","host","aliases","i","indexOf","isAlias","KNOWN_PUBLIC_CLOUDS","region","queryString","authorityUrlInstance","authorityUrlParts","hostNameAndPort","isPublicCloudAuthority","REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX","constructAuthorityUriFromObject","__assign","buildRegionalAuthorityString","REGIONAL_AUTH_NON_MSI_QUERY_STRING","ciamAuthority","FORWARD_SLASH","authorityUrl","authorityUrlComponents","tenantIdOrDomain","split","AAD_TENANT_DOMAIN_SUFFIX"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-common/src/authority/Authority.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorityType } from \"./AuthorityType\";\nimport { isOpenIdConfigResponse, OpenIdConfigResponse } from \"./OpenIdConfigResponse\";\nimport { UrlString } from \"../url/UrlString\";\nimport { IUri } from \"../url/IUri\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { AuthorityMetadataSource, Constants, RegionDiscoveryOutcomes } from \"../utils/Constants\";\nimport { EndpointMetadata, InstanceDiscoveryMetadata } from \"./AuthorityMetadata\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ProtocolMode } from \"./ProtocolMode\";\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\nimport { AuthorityMetadataEntity } from \"../cache/entities/AuthorityMetadataEntity\";\nimport { AuthorityOptions , AzureCloudInstance } from \"./AuthorityOptions\";\nimport { CloudInstanceDiscoveryResponse, isCloudInstanceDiscoveryResponse } from \"./CloudInstanceDiscoveryResponse\";\nimport { CloudInstanceDiscoveryErrorResponse, isCloudInstanceDiscoveryErrorResponse } from \"./CloudInstanceDiscoveryErrorResponse\";\nimport { CloudDiscoveryMetadata } from \"./CloudDiscoveryMetadata\";\nimport { RegionDiscovery } from \"./RegionDiscovery\";\nimport { RegionDiscoveryMetadata } from \"./RegionDiscoveryMetadata\";\nimport { ImdsOptions } from \"./ImdsOptions\";\nimport { AzureCloudOptions } from \"../config/ClientConfiguration\";\nimport { Logger } from \"../logger/Logger\";\nimport { AuthError } from \"../error/AuthError\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\n\n/**\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\n * endpoint. It will store the pertinent config data in this object for use during token calls.\n */\nexport class Authority {\n    // Canonical authority url string\n    private _canonicalAuthority: UrlString;\n    // Canonicaly authority url components\n    private _canonicalAuthorityUrlComponents: IUri | null;\n    // Network interface to make requests with.\n    protected networkInterface: INetworkModule;\n    // Cache Manager to cache network responses\n    protected cacheManager: ICacheManager;\n    // Protocol mode to construct endpoints\n    private authorityOptions: AuthorityOptions;\n    // Authority metadata\n    private metadata: AuthorityMetadataEntity;\n    // Region discovery service\n    private regionDiscovery: RegionDiscovery;\n    // Region discovery metadata\n    public regionDiscoveryMetadata: RegionDiscoveryMetadata;\n    // Logger object\n    private logger: Logger;\n    // Performance client\n    protected performanceClient: IPerformanceClient | undefined;\n    // Correlation Id\n    protected correlationId: string | undefined;\n\n    constructor(\n        authority: string,\n        networkInterface: INetworkModule,\n        cacheManager: ICacheManager,\n        authorityOptions: AuthorityOptions,\n        logger: Logger,\n        performanceClient?: IPerformanceClient,\n        correlationId?: string\n    ) {\n        this.canonicalAuthority = authority;\n        this._canonicalAuthority.validateAsUri();\n        this.networkInterface = networkInterface;\n        this.cacheManager = cacheManager;\n        this.authorityOptions = authorityOptions;\n        this.regionDiscoveryMetadata = { region_used: undefined, region_source: undefined, region_outcome: undefined };\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n        this.regionDiscovery = new RegionDiscovery(networkInterface, this.performanceClient, this.correlationId);\n    }\n\n    // See above for AuthorityType\n    public get authorityType(): AuthorityType {\n\n        // CIAM auth url pattern is being standardized as: <tenant>.ciamlogin.com\n        if (this.canonicalAuthorityUrlComponents.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {\n            return AuthorityType.Ciam;\n        }\n\n        const pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\n        if (pathSegments.length) {\n            switch(pathSegments[0].toLowerCase()) {\n                case Constants.ADFS:\n                    return AuthorityType.Adfs;\n                case Constants.DSTS:\n                    return AuthorityType.Dsts;\n                default:\n                    break;\n            }\n        }\n        return AuthorityType.Default;\n    }\n\n    /**\n     * ProtocolMode enum representing the way endpoints are constructed.\n     */\n    public get protocolMode(): ProtocolMode {\n        return this.authorityOptions.protocolMode;\n    }\n\n    /**\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\n     */\n    public get options(): AuthorityOptions {\n        return this.authorityOptions;\n    }\n\n    /**\n     * A URL that is the authority set by the developer\n     */\n    public get canonicalAuthority(): string {\n        return this._canonicalAuthority.urlString;\n    }\n\n    /**\n     * Sets canonical authority.\n     */\n    public set canonicalAuthority(url: string) {\n        this._canonicalAuthority = new UrlString(url);\n        this._canonicalAuthority.validateAsUri();\n        this._canonicalAuthorityUrlComponents = null;\n    }\n\n    /**\n     * Get authority components.\n     */\n    public get canonicalAuthorityUrlComponents(): IUri {\n        if (!this._canonicalAuthorityUrlComponents) {\n            this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n        }\n\n        return this._canonicalAuthorityUrlComponents;\n    }\n\n    /**\n     * Get hostname and port i.e. login.microsoftonline.com\n     */\n    public get hostnameAndPort(): string {\n        return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    }\n\n    /**\n     * Get tenant for authority.\n     */\n    public get tenant(): string {\n        return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    }\n\n    /**\n     * OAuth /authorize endpoint for requests\n     */\n    public get authorizationEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.authorization_endpoint);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * OAuth /token endpoint for requests\n     */\n    public get tokenEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.token_endpoint);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    public get deviceCodeEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * OAuth logout endpoint for requests\n     */\n    public get endSessionEndpoint(): string {\n        if(this.discoveryComplete()) {\n            // ROPC policies may not have end_session_endpoint set\n            if (!this.metadata.end_session_endpoint) {\n                throw ClientAuthError.createLogoutNotSupportedError();\n            }\n            const endpoint = this.replacePath(this.metadata.end_session_endpoint);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * OAuth issuer for requests\n     */\n    public get selfSignedJwtAudience(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.issuer);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * Jwks_uri for token signing keys\n     */\n    public get jwksUri(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.jwks_uri);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * Replaces tenant in url path with current tenant. Defaults to common.\n     * @param urlString\n     */\n    private replaceTenant(urlString: string): string {\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n    }\n\n    /**\n     * Replaces path such as tenant or policy with the current tenant or policy.\n     * @param urlString\n     */\n    private replacePath(urlString: string): string {\n        let endpoint = urlString;\n        const cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\n        const cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n        const currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n\n        currentAuthorityParts.forEach((currentPart, index) => {\n            const cachedPart = cachedAuthorityParts[index];\n            if (currentPart !== cachedPart) {\n                endpoint = endpoint.replace(`/${cachedPart}/`, `/${currentPart}/`);\n            }\n        });\n\n        return endpoint;\n    }\n\n    /**\n     * The default open id configuration endpoint for any canonical authority.\n     */\n    protected get defaultOpenIdConfigurationEndpoint(): string {\n        if (\n            this.authorityType === AuthorityType.Adfs ||\n            this.authorityType === AuthorityType.Dsts ||\n            this.protocolMode === ProtocolMode.OIDC\n        ) {\n            return `${this.canonicalAuthority}.well-known/openid-configuration`;\n        }\n        return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;\n    }\n\n    /**\n     * Boolean that returns whethr or not tenant discovery has been completed.\n     */\n    discoveryComplete(): boolean {\n        return !!this.metadata;\n    }\n\n    /**\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\n     * and the /authorize, /token and logout endpoints.\n     */\n    public async resolveEndpointsAsync(): Promise<void> {\n\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityResolveEndpointsAsync, this.correlationId);\n\n        let metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n        if (!metadataEntity) {\n            metadataEntity = new AuthorityMetadataEntity();\n            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n        }\n\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);\n        const cloudDiscoverySource = await this.updateCloudDiscoveryMetadata(metadataEntity);\n        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n        \n        this.performanceClient?.setPreQueueTime(PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\n        const endpointSource = await this.updateEndpointMetadata(metadataEntity);\n\n        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\n            // Reset the expiration time unless both values came from a successful cache lookup\n            metadataEntity.resetExpiresAt();\n            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n        }\n\n        const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n        this.metadata = metadataEntity;\n    }\n\n    /**\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\n     * @param metadataEntity\n     */\n    private async updateEndpointMetadata(metadataEntity: AuthorityMetadataEntity): Promise<AuthorityMetadataSource> {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\n\n        let metadata = this.getEndpointMetadataFromConfig();\n        if (metadata) {\n            metadataEntity.updateEndpointMetadata(metadata, false);\n            return AuthorityMetadataSource.CONFIG;\n        }\n\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\n            // No need to update\n            return AuthorityMetadataSource.CACHE;\n        }\n\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\n        metadata = await this.getEndpointMetadataFromNetwork();\n        if (metadata) {\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                this.performanceClient?.setPreQueueTime(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\n                metadata = await this.updateMetadataWithRegionalInformation(metadata);\n            }\n\n            metadataEntity.updateEndpointMetadata(metadata, true);\n            return AuthorityMetadataSource.NETWORK;\n        }    \n\n        let harcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\n        if (harcodedMetadata && !this.authorityOptions.skipAuthorityMetadataCache) {\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                this.performanceClient?.setPreQueueTime(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\n                harcodedMetadata = await this.updateMetadataWithRegionalInformation(\n                    harcodedMetadata\n                );\n            }\n\n            metadataEntity.updateEndpointMetadata(harcodedMetadata, false);\n            return AuthorityMetadataSource.HARDCODED_VALUES;\n        } else {\n            throw ClientAuthError.createUnableToGetOpenidConfigError(\n                this.defaultOpenIdConfigurationEndpoint\n            );\n        }\n    }\n\n    /**\n     * Compares the number of url components after the domain to determine if the cached \n     * authority metadata can be used for the requested authority. Protects against same domain different \n     * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\n     * @param metadataEntity\n     */\n    private isAuthoritySameType(metadataEntity: AuthorityMetadataEntity): boolean {\n        const cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\n        const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n\n        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n    }\n\n    /**\n     * Parse authorityMetadata config option\n     */\n    private getEndpointMetadataFromConfig(): OpenIdConfigResponse | null {\n        if (this.authorityOptions.authorityMetadata) {\n            try {\n                return JSON.parse(this.authorityOptions.authorityMetadata) as OpenIdConfigResponse;\n            } catch (e) {\n                throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\n     * \n     * @param hasHardcodedMetadata boolean\n     */\n    private async getEndpointMetadataFromNetwork(): Promise<OpenIdConfigResponse | null> {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\n\n        const options: ImdsOptions = {};\n        \n        /*\n         * TODO: Add a timeout if the authority exists in our library's \n         * hardcoded list of metadata\n         */\n\n        try {\n            const response = await this.networkInterface.\n                sendGetRequestAsync<OpenIdConfigResponse>(this.defaultOpenIdConfigurationEndpoint, options);\n            return isOpenIdConfigResponse(response.body) ? response.body : null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Get OAuth endpoints for common authorities.\n     */\n    private getEndpointMetadataFromHardcodedValues(): OpenIdConfigResponse | null {\n        if (this.canonicalAuthority in EndpointMetadata) {\n            return EndpointMetadata[this.canonicalAuthority];\n        }\n\n        return null;\n    }\n\n    /**\n     * Update the retrieved metadata with regional information.\n     */\n    private async updateMetadataWithRegionalInformation(metadata: OpenIdConfigResponse): Promise<OpenIdConfigResponse> {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\n\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\n        const autodetectedRegionName = await this.regionDiscovery.detectRegion(\n            this.authorityOptions.azureRegionConfiguration?.environmentRegion,\n            this.regionDiscoveryMetadata\n        );\n\n        const azureRegion = \n            this.authorityOptions.azureRegionConfiguration?.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG\n                ? autodetectedRegionName\n                : this.authorityOptions.azureRegionConfiguration?.azureRegion;\n\n        if (this.authorityOptions.azureRegionConfiguration?.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n            this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ?\n                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL :\n                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n        } else {\n            if (autodetectedRegionName) {\n                this.regionDiscoveryMetadata.region_outcome = (\n                    this.authorityOptions.azureRegionConfiguration?.azureRegion === autodetectedRegionName\n                ) ?\n                    RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED :\n                    RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;\n            } else {\n                this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n            }\n        }\n\n        if (azureRegion) {\n            this.regionDiscoveryMetadata.region_used = azureRegion;\n            return Authority.replaceWithRegionalInformation(metadata, azureRegion);\n        }\n\n        return metadata;\n    }\n\n    /**\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache\n     * and returns where the information was retrieved from\n     * @param metadataEntity\n     * @returns AuthorityMetadataSource\n     */\n    private async updateCloudDiscoveryMetadata(metadataEntity: AuthorityMetadataEntity): Promise<AuthorityMetadataSource> {\n\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);\n\n        // attempt to read metadata from the config\n        this.logger.verbose(\"Attempting to get cloud discovery metadata in the config\");\n        this.logger.verbosePii(`Known Authorities: ${this.authorityOptions.knownAuthorities || Constants.NOT_APPLICABLE}`);\n        this.logger.verbosePii(`Authority Metadata: ${this.authorityOptions.authorityMetadata || Constants.NOT_APPLICABLE}`);\n        this.logger.verbosePii(`Canonical Authority: ${metadataEntity.canonical_authority || Constants.NOT_APPLICABLE}`);\n        let metadata = this.getCloudDiscoveryMetadataFromConfig();\n        if (metadata) {\n            this.logger.verbose(\"Found cloud discovery metadata in the config.\");\n            metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\n            return AuthorityMetadataSource.CONFIG;\n        }\n\n        // If the cached metadata came from config but that config was not passed to this instance, we must go to the network\n        this.logger.verbose(\"Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the cache.\");\n        const metadataEntityExpired = metadataEntity.isExpired();\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntityExpired) {\n            this.logger.verbose(\"Found metadata in the cache.\");\n            // No need to update\n            return AuthorityMetadataSource.CACHE;\n        } else if (metadataEntityExpired) {\n            this.logger.verbose(\"The metadata entity is expired.\");\n        }\n\n        this.logger.verbose(\"Did not find cloud discovery metadata in the cache... Attempting to get cloud discovery metadata from the network.\");\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\n        metadata = await this.getCloudDiscoveryMetadataFromNetwork();\n        if (metadata) {\n            this.logger.verbose(\"cloud discovery metadata was successfully returned from getCloudDiscoveryMetadataFromNetwork()\");\n            metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\n            return AuthorityMetadataSource.NETWORK;\n        }\n        \n        this.logger.verbose(\"Did not find cloud discovery metadata from the network... Attempting to get cloud discovery metadata from hardcoded values.\");\n        const harcodedMetadata = this.getCloudDiscoveryMetadataFromHarcodedValues();\n        if (harcodedMetadata && !this.options.skipAuthorityMetadataCache) {\n            this.logger.verbose(\"Found cloud discovery metadata from hardcoded values.\");\n            metadataEntity.updateCloudDiscoveryMetadata(harcodedMetadata, false);\n            return AuthorityMetadataSource.HARDCODED_VALUES;\n        }\n        \n        // Metadata could not be obtained from the config, cache, network or hardcoded values\n        this.logger.error(\"Did not find cloud discovery metadata from hardcoded values... Metadata could not be obtained from config, cache, network or hardcoded values. Throwing Untrusted Authority Error.\");\n        throw ClientConfigurationError.createUntrustedAuthorityError();\n    }\n\n    /**\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\n     */\n    private getCloudDiscoveryMetadataFromConfig(): CloudDiscoveryMetadata | null {\n\n        // CIAM does not support cloud discovery metadata\n        if (this.authorityType === AuthorityType.Ciam) {\n            this.logger.verbose(\"CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host.\");\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n\n        // Check if network response was provided in config\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\n            this.logger.verbose(\"The cloud discovery metadata has been provided as a network response, in the config.\");\n            try {\n                this.logger.verbose(\"Attempting to parse the cloud discovery metadata.\");\n                const parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata) as CloudInstanceDiscoveryResponse;\n                const metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(\n                    parsedResponse.metadata,\n                    this.hostnameAndPort\n                );\n                this.logger.verbose(\"Parsed the cloud discovery metadata.\");\n                if (metadata) {\n                    this.logger.verbose(\"There is returnable metadata attached to the parsed cloud discovery metadata.\");\n                    return metadata;\n                } else {\n                    this.logger.verbose(\"There is no metadata attached to the parsed cloud discovery metadata.\");\n                }\n            } catch (e) {\n                this.logger.verbose(\"Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error.\");\n                throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\n            }\n        }\n\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n        if (this.isInKnownAuthorities()) {\n            this.logger.verbose(\"The host is included in knownAuthorities. Creating new cloud discovery metadata from the host.\");\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n\n        return null;\n    }\n\n    /**\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\n     * \n     * @param hasHardcodedMetadata boolean\n     */\n    private async getCloudDiscoveryMetadataFromNetwork(): Promise<CloudDiscoveryMetadata | null> {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\n        const instanceDiscoveryEndpoint =\n            `${Constants.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;\n        const options: ImdsOptions = {};\n\n        /*\n         * TODO: Add a timeout if the authority exists in our library's\n         * hardcoded list of metadata\n         */\n\n        let match = null;\n        try {\n            const response =\n                await this.networkInterface.sendGetRequestAsync<CloudInstanceDiscoveryResponse | CloudInstanceDiscoveryErrorResponse>(\n                    instanceDiscoveryEndpoint,\n                    options\n                );\n            \n            let typedResponseBody: CloudInstanceDiscoveryResponse | CloudInstanceDiscoveryErrorResponse;\n            let metadata: Array<CloudDiscoveryMetadata>;\n            if (isCloudInstanceDiscoveryResponse(response.body)) {\n                typedResponseBody = response.body as CloudInstanceDiscoveryResponse;\n                metadata = typedResponseBody.metadata;\n\n                this.logger.verbosePii(`tenant_discovery_endpoint is: ${typedResponseBody.tenant_discovery_endpoint}`);\n            } else if (isCloudInstanceDiscoveryErrorResponse(response.body)) {\n                this.logger.warning(`A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: ${response.status}`);\n\n                typedResponseBody = response.body as CloudInstanceDiscoveryErrorResponse;\n                if (typedResponseBody.error === Constants.INVALID_INSTANCE) {\n                    this.logger.error(\"The CloudInstanceDiscoveryErrorResponse error is invalid_instance.\");\n                    return null;\n                }\n\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error is ${typedResponseBody.error}`);\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error description is ${typedResponseBody.error_description}`);\n                \n                this.logger.warning(\"Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []\");\n                metadata = [];\n            } else {\n                this.logger.error(\"AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse\");\n                return null;\n            }\n\n            this.logger.verbose(\"Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request.\");\n            match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(\n                metadata,\n                this.hostnameAndPort\n            );\n        } catch (error) {\n            if (error instanceof AuthError) {\n                this.logger.error(`There was a network error while attempting to get the cloud discovery instance metadata.\\nError: ${error.errorCode}\\nError Description: ${error.errorMessage}`);\n            } else {\n                const typedError = error as Error;\n                this.logger.error(`A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\\nError: ${typedError.name}\\nError Description: ${typedError.message}`);\n            }\n            \n            return null;\n        }\n\n        // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n        if (!match) {\n            this.logger.warning(\"The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request.\");\n            this.logger.verbose(\"Creating custom Authority for custom domain scenario.\");\n\n            match = Authority.createCloudDiscoveryMetadataFromHost(\n                this.hostnameAndPort\n            );\n        }\n        return match;\n    }\n\n    /**\n     * Get cloud discovery metadata for common authorities \n     */\n    private getCloudDiscoveryMetadataFromHarcodedValues(): CloudDiscoveryMetadata | null {\n        if (this.canonicalAuthority in InstanceDiscoveryMetadata) {\n            return InstanceDiscoveryMetadata[this.canonicalAuthority];\n        }\n\n        return null;\n    }\n\n    /**\n     * Helper function to determine if this host is included in the knownAuthorities config option\n     */\n    private isInKnownAuthorities(): boolean {\n        const matches = this.authorityOptions.knownAuthorities.filter((authority) => {\n            return UrlString.getDomainFromUrl(authority).toLowerCase() === this.hostnameAndPort;\n        });\n\n        return matches.length > 0;\n    }\n\n    /**\n     * helper function to populate the authority based on azureCloudOptions\n     * @param authorityString\n     * @param azureCloudOptions\n     */\n    static generateAuthority(authorityString: string, azureCloudOptions?: AzureCloudOptions): string {\n        let authorityAzureCloudInstance;\n\n        if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\n            const tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : Constants.DEFAULT_COMMON_TENANT;\n            authorityAzureCloudInstance = `${azureCloudOptions.azureCloudInstance}/${tenant}/`;\n        }\n\n        return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;\n    }\n\n    /**\n     * Creates cloud discovery metadata object from a given host\n     * @param host\n     */\n    static createCloudDiscoveryMetadataFromHost(host: string): CloudDiscoveryMetadata {\n        return {\n            preferred_network: host,\n            preferred_cache: host,\n            aliases: [host]\n        };\n    }\n\n    /**\n     * Searches instance discovery network response for the entry that contains the host in the aliases list\n     * @param response\n     * @param authority\n     */\n    static getCloudDiscoveryMetadataFromNetworkResponse(\n        response: CloudDiscoveryMetadata[],\n        authority: string\n    ): CloudDiscoveryMetadata | null {\n        for (let i = 0; i < response.length; i++) {\n            const metadata = response[i];\n            if (metadata.aliases.indexOf(authority) > -1) {\n                return metadata;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * helper function to generate environment from authority object\n     */\n    getPreferredCache(): string {\n        if(this.discoveryComplete()) {\n            return this.metadata.preferred_cache;\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * Returns whether or not the provided host is an alias of this authority instance\n     * @param host\n     */\n    isAlias(host: string): boolean {\n        return this.metadata.aliases.indexOf(host) > -1;\n    }\n\n    /**\n     * Checks whether the provided host is that of a public cloud authority\n     *\n     * @param authority string\n     * @returns bool\n     */\n    static isPublicCloudAuthority(host: string): boolean {\n        return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n    }\n\n    /**\n     * Rebuild the authority string with the region\n     *\n     * @param host string\n     * @param region string\n     */\n    static buildRegionalAuthorityString(host: string, region: string, queryString?: string): string {\n        // Create and validate a Url string object with the initial authority string\n        const authorityUrlInstance = new UrlString(host);\n        authorityUrlInstance.validateAsUri();\n\n        const authorityUrlParts = authorityUrlInstance.getUrlComponents();\n\n        let hostNameAndPort= `${region}.${authorityUrlParts.HostNameAndPort}`;\n\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n            hostNameAndPort = `${region}.${Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;\n        }\n\n        // Include the query string portion of the url\n        const url = UrlString.constructAuthorityUriFromObject({\n            ...authorityUrlInstance.getUrlComponents(),\n            HostNameAndPort: hostNameAndPort\n        }).urlString;\n\n        // Add the query string if a query string was provided\n        if (queryString) return `${url}?${queryString}`;\n\n        return url;\n    }\n\n    /**\n     * Replace the endpoints in the metadata object with their regional equivalents.\n     *\n     * @param metadata OpenIdConfigResponse\n     * @param azureRegion string\n     */\n    static replaceWithRegionalInformation(metadata: OpenIdConfigResponse, azureRegion: string): OpenIdConfigResponse {\n        metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);\n        // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\n        metadata.token_endpoint = Authority.buildRegionalAuthorityString(\n            metadata.token_endpoint, azureRegion, Constants.REGIONAL_AUTH_NON_MSI_QUERY_STRING\n        );\n\n        if (metadata.end_session_endpoint) {\n            metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\n        }\n\n        return metadata;\n    }\n\n    /**\n     * Transform CIAM_AUTHORIY as per the below rules:\n     * If no path segments found and it is a CIAM authority (hostname ends with .ciamlogin.com), then transform it\n     * \n     * NOTE: The transformation path should go away once STS supports CIAM with the format: `tenantIdorDomain.ciamlogin.com`\n     * `ciamlogin.com` can also change in the future and we should accommodate the same\n     * \n     * @param authority \n     */\n    static transformCIAMAuthority(authority: string): string {\n        let ciamAuthority = authority.endsWith(Constants.FORWARD_SLASH) ? authority : `${authority}${Constants.FORWARD_SLASH}`;\n        const authorityUrl = new UrlString(authority);\n        const authorityUrlComponents = authorityUrl.getUrlComponents();\n\n        // check if transformation is needed\n        if (authorityUrlComponents.PathSegments.length === 0 && (authorityUrlComponents.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL))){\n            const tenantIdOrDomain = authorityUrlComponents.HostNameAndPort.split(\".\")[0];\n            ciamAuthority = `${ciamAuthority}${tenantIdOrDomain}${Constants.AAD_TENANT_DOMAIN_SUFFIX}`;\n        }\n\n        return ciamAuthority;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}