{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { PerformanceEvents, AuthError, RefreshTokenClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentRefreshClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentRefreshClient, _super);\n\n  function SilentRefreshClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Exchanges the refresh token for new tokens\r\n   * @param request\r\n   */\n\n\n  SilentRefreshClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, _a, acquireTokenMeasurement, serverTelemetryManager, refreshTokenClient;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, request.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, request.correlationId);\n            _a = [__assign({}, request)];\n            return [4\n            /*yield*/\n            , this.initializeBaseRequest(request)];\n\n          case 1:\n            silentRequest = __assign.apply(void 0, _a.concat([_b.sent()]));\n            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, silentRequest.correlationId);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n            return [4\n            /*yield*/\n            , this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n\n          case 2:\n            refreshTokenClient = _b.sent();\n            this.logger.verbose(\"Refresh token client created\"); // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n            return [2\n            /*return*/\n            , refreshTokenClient.acquireTokenByRefreshToken(silentRequest).then(function (result) {\n              acquireTokenMeasurement.endMeasurement({\n                success: true,\n                fromCache: result.fromCache,\n                requestId: result.requestId\n              });\n              return result;\n            }).catch(function (e) {\n              if (e instanceof AuthError) {\n                e.setCorrelationId(_this.correlationId);\n              }\n\n              serverTelemetryManager.cacheFailedRequest(e);\n              acquireTokenMeasurement.endMeasurement({\n                errorCode: e.errorCode,\n                subErrorCode: e.subError,\n                success: false\n              });\n              throw e;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentRefreshClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Creates a Refresh Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n\n\n  SilentRefreshClient.prototype.createRefreshTokenClient = function (serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Create auth module.\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)];\n\n          case 1:\n            clientConfig = _a.sent();\n            return [2\n            /*return*/\n            , new RefreshTokenClient(clientConfig, this.performanceClient)];\n        }\n      });\n    });\n  };\n\n  return SilentRefreshClient;\n}(StandardInteractionClient);\n\nexport { SilentRefreshClient };","map":{"version":3,"mappings":";;;;;;;;AAAA;;;;;;;;EAUyCA;;EAAzC;;EA+DC;;;;;;;EA1DSC,6CAAN,UAAmBC,OAAnB,EAAmD;;;;;;;;;YAC/C,KAAKC,iBAAL,CAAuBC,mBAAvB,CAA2CC,iBAAiB,CAACC,+BAA7D,EAA8FJ,OAAO,CAACK,aAAtG;YAEA,KAAKJ,iBAAL,CAAuBK,eAAvB,CAAuCH,iBAAiB,CAACI,qBAAzD,EAAgFP,OAAO,CAACK,aAAxF;+BAEOL;YACA;YAAA;YAAA,EAAM,KAAKQ,qBAAL,CAA2BR,OAA3B,CAAN;;;YAFDS,aAAa,qCAEZC,SAFY,GAAb;YAIAC,uBAAuB,GAAG,KAAKV,iBAAL,CAAuBW,gBAAvB,CAAwCT,iBAAiB,CAACC,+BAA1D,EAA2FK,aAAa,CAACJ,aAAzG,CAA1B;YACAQ,sBAAsB,GAAG,KAAKC,gCAAL,CAAsCC,KAAK,CAACC,6BAA5C,CAAzB;YAEqB;YAAA;YAAA,EAAM,KAAKC,wBAAL,CAA8BJ,sBAA9B,EAAsDJ,aAAa,CAACS,SAApE,EAA+ET,aAAa,CAACU,iBAA7F,CAAN;;;YAArBC,kBAAkB,GAAGV,SAArB;YACN,KAAKW,MAAL,CAAYC,OAAZ,CAAoB,8BAApB;;YAEA,KAAKrB,iBAAL,CAAuBK,eAAvB,CAAuCH,iBAAiB,CAACoB,4CAAzD,EAAuGvB,OAAO,CAACK,aAA/G;YACA;YAAA;YAAA,EAAOe,kBAAkB,CAACI,0BAAnB,CAA8Cf,aAA9C,EACFgB,IADE,CACG,UAACC,MAAD,EAA6B;cAC/Bf,uBAAuB,CAACgB,cAAxB,CAAuC;gBACnCC,OAAO,EAAE,IAD0B;gBAEnCC,SAAS,EAAEH,MAAM,CAACG,SAFiB;gBAGnCC,SAAS,EAAEJ,MAAM,CAACI;cAHiB,CAAvC;cAMA,OAAOJ,MAAP;YACH,CATE,EAUFK,KAVE,CAUI,UAACC,CAAD,EAAa;cAChB,IAAIA,CAAC,YAAYC,SAAjB,EAA4B;gBACvBD,CAAe,CAACE,gBAAhB,CAAiCC,KAAI,CAAC9B,aAAtC;cACJ;;cACDQ,sBAAsB,CAACuB,kBAAvB,CAA0CJ,CAA1C;cACArB,uBAAuB,CAACgB,cAAxB,CAAuC;gBACnCU,SAAS,EAAEL,CAAC,CAACK,SADsB;gBAEnCC,YAAY,EAAEN,CAAC,CAACO,QAFmB;gBAGnCX,OAAO,EAAE;cAH0B,CAAvC;cAKA,MAAMI,CAAN;YACH,CArBE,CAAP;;;;EAsBH,CArCK;;;;;;EA0CNjC;;IAEI,OAAOyC,OAAO,CAACC,MAAR,CAAeC,gBAAgB,CAACC,kCAAjB,EAAf,CAAP;EACH,CAHD;;;;;;;;EAUgB5C,yDAAhB,UAAyCc,sBAAzC,EAAyF+B,YAAzF,EAAgHzB,iBAAhH,EAAqJ;;;;;;;YAEjJ,KAAKlB,iBAAL,CAAuBK,eAAvB,CAAuCH,iBAAiB,CAAC0C,+CAAzD,EAA0G,KAAKxC,aAA/G;YACqB;YAAA;YAAA,EAAM,KAAKyC,sBAAL,CAA4BjC,sBAA5B,EAAoD+B,YAApD,EAAkEzB,iBAAlE,CAAN;;;YAAf4B,YAAY,GAAGC,SAAf;YACN;YAAA;YAAA,EAAO,IAAIC,kBAAJ,CAAuBF,YAAvB,EAAqC,KAAK9C,iBAA1C,CAAP;;;;EACH,CALe;;EAMpB;AA/DA,EAAyCiD","names":["__extends","SilentRefreshClient","request","performanceClient","addQueueMeasurement","PerformanceEvents","SilentRefreshClientAcquireToken","correlationId","setPreQueueTime","InitializeBaseRequest","initializeBaseRequest","silentRequest","_b","acquireTokenMeasurement","startMeasurement","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenSilent_silentFlow","createRefreshTokenClient","authority","azureCloudOptions","refreshTokenClient","logger","verbose","RefreshTokenClientAcquireTokenByRefreshToken","acquireTokenByRefreshToken","then","result","endMeasurement","success","fromCache","requestId","catch","e","AuthError","setCorrelationId","_this","cacheFailedRequest","errorCode","subErrorCode","subError","Promise","reject","BrowserAuthError","createSilentLogoutUnsupportedError","authorityUrl","StandardInteractionClientGetClientConfiguration","getClientConfiguration","clientConfig","_a","RefreshTokenClient","StandardInteractionClient"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-browser/src/interaction_client/SilentRefreshClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { CommonSilentFlowRequest, AuthenticationResult, ServerTelemetryManager, RefreshTokenClient, AuthError, AzureCloudOptions, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { ApiId } from \"../utils/BrowserConstants\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\n\r\nexport class SilentRefreshClient extends StandardInteractionClient {\r\n    /**\r\n     * Exchanges the refresh token for new tokens\r\n     * @param request\r\n     */\r\n    async acquireToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, request.correlationId);\r\n\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, request.correlationId);\r\n        const silentRequest: CommonSilentFlowRequest = {\r\n            ...request,\r\n            ...await this.initializeBaseRequest(request)\r\n        };\r\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, silentRequest.correlationId);\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\r\n\r\n        const refreshTokenClient = await this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\r\n        this.logger.verbose(\"Refresh token client created\");\r\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\r\n        return refreshTokenClient.acquireTokenByRefreshToken(silentRequest)\r\n            .then((result: AuthenticationResult) => {\r\n                acquireTokenMeasurement.endMeasurement({\r\n                    success: true,\r\n                    fromCache: result.fromCache,\r\n                    requestId: result.requestId\r\n                });\r\n\r\n                return result;\r\n            })\r\n            .catch((e: AuthError) => {\r\n                if (e instanceof AuthError) {\r\n                    (e as AuthError).setCorrelationId(this.correlationId);\r\n                }\r\n                serverTelemetryManager.cacheFailedRequest(e);\r\n                acquireTokenMeasurement.endMeasurement({\r\n                    errorCode: e.errorCode,\r\n                    subErrorCode: e.subError,\r\n                    success: false\r\n                });\r\n                throw e;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Currently Unsupported\r\n     */\r\n    logout(): Promise<void> {\r\n        // Synchronous so we must reject\r\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\r\n    }\r\n\r\n    /**\r\n     * Creates a Refresh Client with the given authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param authorityUrl\r\n     */\r\n    protected async createRefreshTokenClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, azureCloudOptions?: AzureCloudOptions): Promise<RefreshTokenClient> {\r\n        // Create auth module.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\r\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\r\n        return new RefreshTokenClient(clientConfig, this.performanceClient);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}