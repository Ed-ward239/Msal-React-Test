{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar BrowserPerformanceMeasurement =\n/** @class */\nfunction () {\n  function BrowserPerformanceMeasurement(name, correlationId) {\n    this.correlationId = correlationId;\n    this.measureName = BrowserPerformanceMeasurement.makeMeasureName(name, correlationId);\n    this.startMark = BrowserPerformanceMeasurement.makeStartMark(name, correlationId);\n    this.endMark = BrowserPerformanceMeasurement.makeEndMark(name, correlationId);\n  }\n\n  BrowserPerformanceMeasurement.makeMeasureName = function (name, correlationId) {\n    return \"msal.measure.\" + name + \".\" + correlationId;\n  };\n\n  BrowserPerformanceMeasurement.makeStartMark = function (name, correlationId) {\n    return \"msal.start.\" + name + \".\" + correlationId;\n  };\n\n  BrowserPerformanceMeasurement.makeEndMark = function (name, correlationId) {\n    return \"msal.end.\" + name + \".\" + correlationId;\n  };\n\n  BrowserPerformanceMeasurement.supportsBrowserPerformance = function () {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.mark === \"function\" && typeof window.performance.measure === \"function\" && typeof window.performance.clearMarks === \"function\" && typeof window.performance.clearMeasures === \"function\" && typeof window.performance.getEntriesByName === \"function\";\n  };\n  /**\r\n   * Flush browser marks and measurements.\r\n   * @param {string} correlationId\r\n   * @param {SubMeasurement} measurements\r\n   */\n\n\n  BrowserPerformanceMeasurement.flushMeasurements = function (correlationId, measurements) {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        measurements.forEach(function (measurement) {\n          var measureName = BrowserPerformanceMeasurement.makeMeasureName(measurement.name, correlationId);\n          var entriesForMeasurement = window.performance.getEntriesByName(measureName, \"measure\");\n\n          if (entriesForMeasurement.length > 0) {\n            window.performance.clearMeasures(measureName);\n            window.performance.clearMarks(BrowserPerformanceMeasurement.makeStartMark(measureName, correlationId));\n            window.performance.clearMarks(BrowserPerformanceMeasurement.makeEndMark(measureName, correlationId));\n          }\n        });\n      } catch (e) {// Silently catch and return null\n      }\n    }\n  };\n\n  BrowserPerformanceMeasurement.prototype.startMeasurement = function () {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        window.performance.mark(this.startMark);\n      } catch (e) {// Silently catch\n      }\n    }\n  };\n\n  BrowserPerformanceMeasurement.prototype.endMeasurement = function () {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        window.performance.mark(this.endMark);\n        window.performance.measure(this.measureName, this.startMark, this.endMark);\n      } catch (e) {// Silently catch\n      }\n    }\n  };\n\n  BrowserPerformanceMeasurement.prototype.flushMeasurement = function () {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        var entriesForMeasurement = window.performance.getEntriesByName(this.measureName, \"measure\");\n\n        if (entriesForMeasurement.length > 0) {\n          var durationMs = entriesForMeasurement[0].duration;\n          window.performance.clearMeasures(this.measureName);\n          window.performance.clearMarks(this.startMark);\n          window.performance.clearMarks(this.endMark);\n          return durationMs;\n        }\n      } catch (e) {// Silently catch and return null\n      }\n    }\n\n    return null;\n  };\n\n  return BrowserPerformanceMeasurement;\n}();\n\nexport { BrowserPerformanceMeasurement };","map":{"version":3,"mappings":"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","names":["name","correlationId","measureName","BrowserPerformanceMeasurement","makeMeasureName","startMark","makeStartMark","endMark","makeEndMark","window","performance","mark","measure","clearMarks","clearMeasures","getEntriesByName","measurements","supportsBrowserPerformance","forEach","measurement","entriesForMeasurement","length","e","durationMs","duration"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-browser/src/telemetry/BrowserPerformanceMeasurement.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { IPerformanceMeasurement, SubMeasurement } from \"@azure/msal-common\";\r\n\r\nexport class BrowserPerformanceMeasurement implements IPerformanceMeasurement {\r\n    private readonly measureName: string;\r\n    private readonly correlationId: string;\r\n    private readonly startMark: string;\r\n    private readonly endMark: string;\r\n\r\n    constructor(name: string, correlationId: string) {\r\n        this.correlationId = correlationId;\r\n        this.measureName = BrowserPerformanceMeasurement.makeMeasureName(name, correlationId);\r\n        this.startMark = BrowserPerformanceMeasurement.makeStartMark(name, correlationId);\r\n        this.endMark = BrowserPerformanceMeasurement.makeEndMark(name, correlationId);\r\n    }\r\n\r\n    private static makeMeasureName(name: string, correlationId: string) {\r\n        return `msal.measure.${name}.${correlationId}`;\r\n    }\r\n\r\n    private static makeStartMark(name: string, correlationId: string) {\r\n        return `msal.start.${name}.${correlationId}`;\r\n    }\r\n\r\n    private static makeEndMark(name: string, correlationId: string) {\r\n        return `msal.end.${name}.${correlationId}`;\r\n    }\r\n\r\n    static supportsBrowserPerformance(): boolean {\r\n        return typeof window !== \"undefined\" &&\r\n            typeof window.performance !== \"undefined\" &&\r\n            typeof window.performance.mark === \"function\" &&\r\n            typeof window.performance.measure === \"function\" &&\r\n            typeof window.performance.clearMarks === \"function\" &&\r\n            typeof window.performance.clearMeasures === \"function\" &&\r\n            typeof window.performance.getEntriesByName === \"function\";\r\n    }\r\n\r\n    /**\r\n     * Flush browser marks and measurements.\r\n     * @param {string} correlationId\r\n     * @param {SubMeasurement} measurements\r\n     */\r\n    public static flushMeasurements(correlationId: string, measurements: SubMeasurement[]): void {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                measurements.forEach((measurement) => {\r\n                    const measureName = BrowserPerformanceMeasurement.makeMeasureName(measurement.name, correlationId);\r\n                    const entriesForMeasurement = window.performance.getEntriesByName(measureName, \"measure\");\r\n                    if (entriesForMeasurement.length > 0) {\r\n                        window.performance.clearMeasures(measureName);\r\n                        window.performance.clearMarks(BrowserPerformanceMeasurement.makeStartMark(measureName, correlationId));\r\n                        window.performance.clearMarks(BrowserPerformanceMeasurement.makeEndMark(measureName, correlationId));\r\n                    }\r\n                });\r\n            } catch (e) {\r\n                // Silently catch and return null\r\n            }\r\n        }\r\n    }\r\n\r\n    startMeasurement(): void {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                window.performance.mark(this.startMark);\r\n            } catch (e) {\r\n                // Silently catch\r\n            }\r\n        }\r\n    }\r\n\r\n    endMeasurement():void {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                window.performance.mark(this.endMark);\r\n                window.performance.measure(this.measureName, this.startMark, this.endMark);\r\n            } catch (e) {\r\n                // Silently catch\r\n            }\r\n        }\r\n    }\r\n\r\n    flushMeasurement(): number | null {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                const entriesForMeasurement = window.performance.getEntriesByName(this.measureName, \"measure\");\r\n                if (entriesForMeasurement.length > 0) {\r\n                    const durationMs = entriesForMeasurement[0].duration;\r\n                    window.performance.clearMeasures(this.measureName);\r\n                    window.performance.clearMarks(this.startMark);\r\n                    window.performance.clearMarks(this.endMark);\r\n                    return durationMs;\r\n                }\r\n            } catch (e) {\r\n                // Silently catch and return null\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}