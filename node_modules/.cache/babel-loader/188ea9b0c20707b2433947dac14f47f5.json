{"ast":null,"code":"/*! @azure/msal-common v13.0.0 2023-05-01 */\n'use strict';\n\nimport { __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar KeyLocation;\n\n(function (KeyLocation) {\n  KeyLocation[\"SW\"] = \"sw\";\n  KeyLocation[\"UHW\"] = \"uhw\";\n})(KeyLocation || (KeyLocation = {}));\n\nvar PopTokenGenerator =\n/** @class */\nfunction () {\n  function PopTokenGenerator(cryptoUtils, performanceClient) {\n    this.cryptoUtils = cryptoUtils;\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\r\n   * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\r\n   * @param request\r\n   * @returns\r\n   */\n\n\n  PopTokenGenerator.prototype.generateCnf = function (request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var reqCnf, reqCnfString, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n            return [4\n            /*yield*/\n            , this.generateKid(request)];\n\n          case 1:\n            reqCnf = _d.sent();\n            reqCnfString = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n            _c = {\n              kid: reqCnf.kid,\n              reqCnfString: reqCnfString\n            };\n            return [4\n            /*yield*/\n            , this.cryptoUtils.hashString(reqCnfString)];\n\n          case 2:\n            return [2\n            /*return*/\n            , (_c.reqCnfHash = _d.sent(), _c)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates key_id for a SHR token request\r\n   * @param request\r\n   * @returns\r\n   */\n\n\n  PopTokenGenerator.prototype.generateKid = function (request) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var kidThumbprint;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n            return [4\n            /*yield*/\n            , this.cryptoUtils.getPublicKeyThumbprint(request)];\n\n          case 1:\n            kidThumbprint = _b.sent();\n            return [2\n            /*return*/\n            , {\n              kid: kidThumbprint,\n              xms_ksl: KeyLocation.SW\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the POP access_token with the local generated key-pair\r\n   * @param accessToken\r\n   * @param request\r\n   * @returns\r\n   */\n\n\n  PopTokenGenerator.prototype.signPopToken = function (accessToken, keyId, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.signPayload(accessToken, keyId, request)];\n      });\n    });\n  };\n  /**\r\n   * Utility function to generate the signed JWT for an access_token\r\n   * @param payload\r\n   * @param kid\r\n   * @param request\r\n   * @param claims\r\n   * @returns\r\n   */\n\n\n  PopTokenGenerator.prototype.signPayload = function (payload, keyId, request, claims) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, resourceUrlString, resourceUrlComponents;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            resourceRequestMethod = request.resourceRequestMethod, resourceRequestUri = request.resourceRequestUri, shrClaims = request.shrClaims, shrNonce = request.shrNonce;\n            resourceUrlString = resourceRequestUri ? new UrlString(resourceRequestUri) : undefined;\n            resourceUrlComponents = resourceUrlString === null || resourceUrlString === void 0 ? void 0 : resourceUrlString.getUrlComponents();\n            return [4\n            /*yield*/\n            , this.cryptoUtils.signJwt(__assign({\n              at: payload,\n              ts: TimeUtils.nowSeconds(),\n              m: resourceRequestMethod === null || resourceRequestMethod === void 0 ? void 0 : resourceRequestMethod.toUpperCase(),\n              u: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.HostNameAndPort,\n              nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n              p: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.AbsolutePath,\n              q: (resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\n              client_claims: shrClaims || undefined\n            }, claims), keyId, request.correlationId)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  return PopTokenGenerator;\n}();\n\nexport { PopTokenGenerator };","map":{"version":3,"mappings":"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","names":["KeyLocation","PopTokenGenerator","cryptoUtils","performanceClient","generateCnf","request","_a","addQueueMeasurement","PerformanceEvents","PopTokenGenerateCnf","correlationId","_b","setPreQueueTime","PopTokenGenerateKid","generateKid","reqCnf","_d","reqCnfString","base64Encode","JSON","stringify","kid","hashString","_c","getPublicKeyThumbprint","kidThumbprint","xms_ksl","SW","accessToken","keyId","signPayload","payload","claims","resourceRequestMethod","resourceRequestUri","shrClaims","shrNonce","resourceUrlString","UrlString","undefined","resourceUrlComponents","getUrlComponents","signJwt","__assign","at","ts","TimeUtils","nowSeconds","m","toUpperCase","u","HostNameAndPort","nonce","createNewGuid","p","AbsolutePath","q","QueryString","client_claims"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-common/src/crypto/PopTokenGenerator.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, SignedHttpRequestParameters } from \"./ICrypto\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\n\n/**\n * See eSTS docs for more info.\n * - A kid element, with the value containing an RFC 7638-compliant JWK thumbprint that is base64 encoded.\n * -  xms_ksl element, representing the storage location of the key's secret component on the client device. One of two values:\n *      - sw: software storage\n *      - uhw: hardware storage\n */\ntype ReqCnf = {\n    kid: string;\n    xms_ksl: KeyLocation;\n};\n\nexport type ReqCnfData = {\n    kid: string;\n    reqCnfString: string;\n    reqCnfHash: string;\n};\n\nenum KeyLocation {\n    SW = \"sw\",\n    UHW = \"uhw\"\n}\n\nexport class PopTokenGenerator {\n\n    private cryptoUtils: ICrypto;\n    private performanceClient?: IPerformanceClient;\n\n    constructor(cryptoUtils: ICrypto, performanceClient?: IPerformanceClient) {\n        this.cryptoUtils = cryptoUtils;\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\n     * @param request\n     * @returns\n     */\n    async generateCnf(request: SignedHttpRequestParameters): Promise<ReqCnfData> {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n        const reqCnf = await this.generateKid(request);\n        const reqCnfString: string = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n\n        return {\n            kid: reqCnf.kid,\n            reqCnfString, \n            reqCnfHash: await this.cryptoUtils.hashString(reqCnfString) \n        };\n    }\n\n    /**\n     * Generates key_id for a SHR token request\n     * @param request\n     * @returns\n     */\n    async generateKid(request: SignedHttpRequestParameters): Promise<ReqCnf> {\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\n\n        return {\n            kid: kidThumbprint,\n            xms_ksl: KeyLocation.SW\n        };\n    }\n\n    /**\n     * Signs the POP access_token with the local generated key-pair\n     * @param accessToken\n     * @param request\n     * @returns\n     */\n    async signPopToken(accessToken: string, keyId: string, request: SignedHttpRequestParameters): Promise<string> {\n        return this.signPayload(accessToken, keyId, request);\n    }\n\n    /**\n     * Utility function to generate the signed JWT for an access_token\n     * @param payload\n     * @param kid\n     * @param request\n     * @param claims\n     * @returns\n     */\n    async signPayload(payload: string, keyId: string, request: SignedHttpRequestParameters, claims?: object): Promise<string> {\n\n        // Deconstruct request to extract SHR parameters\n        const { resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce } = request;\n\n        const resourceUrlString = (resourceRequestUri) ? new UrlString(resourceRequestUri) : undefined;\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n        return await this.cryptoUtils.signJwt({\n            at: payload,\n            ts: TimeUtils.nowSeconds(),\n            m: resourceRequestMethod?.toUpperCase(),\n            u: resourceUrlComponents?.HostNameAndPort,\n            nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n            p: resourceUrlComponents?.AbsolutePath,\n            q: (resourceUrlComponents?.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\n            client_claims: shrClaims || undefined,\n            ...claims\n        }, keyId, request.correlationId);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}