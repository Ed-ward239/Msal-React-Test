{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __awaiter, __generator } from '../../_virtual/_tslib.js';\nimport { NativeConstants, NativeExtensionMethod } from '../../utils/BrowserConstants.js';\nimport { AuthError, AuthenticationScheme, PerformanceEvents } from '@azure/msal-common';\nimport { NativeAuthError } from '../../error/NativeAuthError.js';\nimport { BrowserAuthError } from '../../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar NativeMessageHandler =\n/** @class */\nfunction () {\n  function NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, extensionId) {\n    this.logger = logger;\n    this.handshakeTimeoutMs = handshakeTimeoutMs;\n    this.extensionId = extensionId;\n    this.resolvers = new Map(); // Used for non-handshake messages\n\n    this.handshakeResolvers = new Map(); // Used for handshake messages\n\n    this.responseId = 0;\n    this.messageChannel = new MessageChannel();\n    this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\n\n    this.performanceClient = performanceClient;\n    this.handshakeEvent = performanceClient.startMeasurement(PerformanceEvents.NativeMessageHandlerHandshake);\n  }\n  /**\r\n   * Sends a given message to the extension and resolves with the extension response\r\n   * @param body\r\n   */\n\n\n  NativeMessageHandler.prototype.sendMessage = function (body) {\n    return __awaiter(this, void 0, void 0, function () {\n      var req;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\n        req = {\n          channel: NativeConstants.CHANNEL_ID,\n          extensionId: this.extensionId,\n          responseId: this.responseId++,\n          body: body\n        };\n        this.logger.trace(\"NativeMessageHandler - Sending request to browser extension\");\n        this.logger.tracePii(\"NativeMessageHandler - Sending request to browser extension: \" + JSON.stringify(req));\n        this.messageChannel.port1.postMessage(req);\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          _this.resolvers.set(req.responseId, {\n            resolve: resolve,\n            reject: reject\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * Returns an instance of the MessageHandler that has successfully established a connection with an extension\r\n   * @param {Logger} logger\r\n   * @param {number} handshakeTimeoutMs\r\n   * @param {IPerformanceClient} performanceClient\r\n   */\n\n\n  NativeMessageHandler.createProvider = function (logger, handshakeTimeoutMs, performanceClient) {\n    return __awaiter(this, void 0, void 0, function () {\n      var preferredProvider, backupProvider;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.trace(\"NativeMessageHandler - createProvider called.\");\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 5]);\n\n            preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, NativeConstants.PREFERRED_EXTENSION_ID);\n            return [4\n            /*yield*/\n            , preferredProvider.sendHandshakeRequest()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , preferredProvider];\n\n          case 3:\n            _a.sent();\n\n            backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient);\n            return [4\n            /*yield*/\n            , backupProvider.sendHandshakeRequest()];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , backupProvider];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Send handshake request helper.\r\n   */\n\n\n  NativeMessageHandler.prototype.sendHandshakeRequest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var req;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        this.logger.trace(\"NativeMessageHandler - sendHandshakeRequest called.\"); // Register this event listener before sending handshake\n\n        window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\n\n        req = {\n          channel: NativeConstants.CHANNEL_ID,\n          extensionId: this.extensionId,\n          responseId: this.responseId++,\n          body: {\n            method: NativeExtensionMethod.HandshakeRequest\n          }\n        };\n        this.handshakeEvent.addStaticFields({\n          extensionId: this.extensionId,\n          extensionHandshakeTimeoutMs: this.handshakeTimeoutMs\n        });\n\n        this.messageChannel.port1.onmessage = function (event) {\n          _this.onChannelMessage(event);\n        };\n\n        window.postMessage(req, window.origin, [this.messageChannel.port2]);\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          _this.handshakeResolvers.set(req.responseId, {\n            resolve: resolve,\n            reject: reject\n          });\n\n          _this.timeoutId = window.setTimeout(function () {\n            /*\r\n             * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\r\n             * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\r\n             */\n            window.removeEventListener(\"message\", _this.windowListener, false);\n\n            _this.messageChannel.port1.close();\n\n            _this.messageChannel.port2.close();\n\n            _this.handshakeEvent.endMeasurement({\n              extensionHandshakeTimedOut: true,\n              success: false\n            });\n\n            reject(BrowserAuthError.createNativeHandshakeTimeoutError());\n\n            _this.handshakeResolvers.delete(req.responseId);\n          }, _this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\n        })];\n      });\n    });\n  };\n  /**\r\n   * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\r\n   * @param event\r\n   */\n\n\n  NativeMessageHandler.prototype.onWindowMessage = function (event) {\n    this.logger.trace(\"NativeMessageHandler - onWindowMessage called\"); // We only accept messages from ourselves\n\n    if (event.source !== window) {\n      return;\n    }\n\n    var request = event.data;\n\n    if (!request.channel || request.channel !== NativeConstants.CHANNEL_ID) {\n      return;\n    }\n\n    if (request.extensionId && request.extensionId !== this.extensionId) {\n      return;\n    }\n\n    if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\n      // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\n      this.logger.verbose(request.extensionId ? \"Extension with id: \" + request.extensionId + \" not installed\" : \"No extension installed\");\n      clearTimeout(this.timeoutId);\n      this.messageChannel.port1.close();\n      this.messageChannel.port2.close();\n      window.removeEventListener(\"message\", this.windowListener, false);\n      var handshakeResolver = this.handshakeResolvers.get(request.responseId);\n\n      if (handshakeResolver) {\n        this.handshakeEvent.endMeasurement({\n          success: false,\n          extensionInstalled: false\n        });\n        handshakeResolver.reject(BrowserAuthError.createNativeExtensionNotInstalledError());\n      }\n    }\n  };\n  /**\r\n   * Invoked when a message is received from the extension on the MessageChannel port\r\n   * @param event\r\n   */\n\n\n  NativeMessageHandler.prototype.onChannelMessage = function (event) {\n    this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\n    var request = event.data;\n    var resolver = this.resolvers.get(request.responseId);\n    var handshakeResolver = this.handshakeResolvers.get(request.responseId);\n\n    try {\n      var method = request.body.method;\n\n      if (method === NativeExtensionMethod.Response) {\n        if (!resolver) {\n          return;\n        }\n\n        var response = request.body.response;\n        this.logger.trace(\"NativeMessageHandler - Received response from browser extension\");\n        this.logger.tracePii(\"NativeMessageHandler - Received response from browser extension: \" + JSON.stringify(response));\n\n        if (response.status !== \"Success\") {\n          resolver.reject(NativeAuthError.createError(response.code, response.description, response.ext));\n        } else if (response.result) {\n          if (response.result[\"code\"] && response.result[\"description\"]) {\n            resolver.reject(NativeAuthError.createError(response.result[\"code\"], response.result[\"description\"], response.result[\"ext\"]));\n          } else {\n            resolver.resolve(response.result);\n          }\n        } else {\n          throw AuthError.createUnexpectedError(\"Event does not contain result.\");\n        }\n\n        this.resolvers.delete(request.responseId);\n      } else if (method === NativeExtensionMethod.HandshakeResponse) {\n        if (!handshakeResolver) {\n          return;\n        }\n\n        clearTimeout(this.timeoutId); // Clear setTimeout\n\n        window.removeEventListener(\"message\", this.windowListener, false); // Remove 'No extension' listener\n\n        this.extensionId = request.extensionId;\n        this.extensionVersion = request.body.version;\n        this.logger.verbose(\"NativeMessageHandler - Received HandshakeResponse from extension: \" + this.extensionId);\n        this.handshakeEvent.endMeasurement({\n          extensionInstalled: true,\n          success: true\n        });\n        handshakeResolver.resolve();\n        this.handshakeResolvers.delete(request.responseId);\n      } // Do nothing if method is not Response or HandshakeResponse\n\n    } catch (err) {\n      this.logger.error(\"Error parsing response from WAM Extension\");\n      this.logger.errorPii(\"Error parsing response from WAM Extension: \" + err.toString());\n      this.logger.errorPii(\"Unable to parse \" + event);\n\n      if (resolver) {\n        resolver.reject(err);\n      } else if (handshakeResolver) {\n        handshakeResolver.reject(err);\n      }\n    }\n  };\n  /**\r\n   * Returns the Id for the browser extension this handler is communicating with\r\n   * @returns\r\n   */\n\n\n  NativeMessageHandler.prototype.getExtensionId = function () {\n    return this.extensionId;\n  };\n  /**\r\n   * Returns the version for the browser extension this handler is communicating with\r\n   * @returns\r\n   */\n\n\n  NativeMessageHandler.prototype.getExtensionVersion = function () {\n    return this.extensionVersion;\n  };\n  /**\r\n   * Returns boolean indicating whether or not the request should attempt to use native broker\r\n   * @param logger\r\n   * @param config\r\n   * @param nativeExtensionProvider\r\n   * @param authenticationScheme\r\n   */\n\n\n  NativeMessageHandler.isNativeAvailable = function (config, logger, nativeExtensionProvider, authenticationScheme) {\n    logger.trace(\"isNativeAvailable called\");\n\n    if (!config.system.allowNativeBroker) {\n      logger.trace(\"isNativeAvailable: allowNativeBroker is not enabled, returning false\"); // Developer disabled WAM\n\n      return false;\n    }\n\n    if (!nativeExtensionProvider) {\n      logger.trace(\"isNativeAvailable: WAM extension provider is not initialized, returning false\"); // Extension is not available\n\n      return false;\n    }\n\n    if (authenticationScheme) {\n      switch (authenticationScheme) {\n        case AuthenticationScheme.BEARER:\n        case AuthenticationScheme.POP:\n          logger.trace(\"isNativeAvailable: authenticationScheme is supported, returning true\");\n          return true;\n\n        default:\n          logger.trace(\"isNativeAvailable: authenticationScheme is not supported, returning false\");\n          return false;\n      }\n    }\n\n    return true;\n  };\n\n  return NativeMessageHandler;\n}();\n\nexport { NativeMessageHandler };","map":{"version":3,"mappings":";;;;;;;;AAAA;;;;;;;;EAsCI,8BAAYA,MAAZ,EAA4BC,kBAA5B,EAAwDC,iBAAxD,EAA+FC,WAA/F,EAAmH;IAC/G,KAAKH,MAAL,GAAcA,MAAd;IACA,KAAKC,kBAAL,GAA0BA,kBAA1B;IACA,KAAKE,WAAL,GAAmBA,WAAnB;IACA,KAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB,CAJ+G,CAIpF;;IAC3B,KAAKC,kBAAL,GAA0B,IAAID,GAAJ,EAA1B,CAL+G,CAK3E;;IACpC,KAAKE,UAAL,GAAkB,CAAlB;IACA,KAAKC,cAAL,GAAsB,IAAIC,cAAJ,EAAtB;IACA,KAAKC,cAAL,GAAsB,KAAKC,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAtB,CAR+G,CAQzD;;IACtD,KAAKV,iBAAL,GAAyBA,iBAAzB;IACA,KAAKW,cAAL,GAAsBX,iBAAiB,CAACY,gBAAlB,CAAmCC,iBAAiB,CAACC,6BAArD,CAAtB;EACH;;;;;;;EAMKC,6CAAN,UAAkBC,IAAlB,EAAkD;;;;;;;QAC9C,KAAKlB,MAAL,CAAYmB,KAAZ,CAAkB,4CAAlB;QACMC,GAAG,GAA2B;UAChCC,OAAO,EAAEC,eAAe,CAACC,UADO;UAEhCpB,WAAW,EAAE,KAAKA,WAFc;UAGhCI,UAAU,EAAE,KAAKA,UAAL,EAHoB;UAIhCW,IAAI,EAAEA;QAJ0B,CAA9B;QAON,KAAKlB,MAAL,CAAYmB,KAAZ,CAAkB,6DAAlB;QACA,KAAKnB,MAAL,CAAYwB,QAAZ,CAAqB,kEAAgEC,IAAI,CAACC,SAAL,CAAeN,GAAf,CAArF;QACA,KAAKZ,cAAL,CAAoBmB,KAApB,CAA0BC,WAA1B,CAAsCR,GAAtC;QAEA;QAAA;QAAA,EAAO,IAAIS,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;UAC/BC,KAAI,CAAC5B,SAAL,CAAe6B,GAAf,CAAmBb,GAAG,CAACb,UAAvB,EAAmC;YAACuB,OAAO,SAAR;YAAUC,MAAM;UAAhB,CAAnC;QACH,CAFM,CAAP;;;EAGH,CAhBK;;;;;;;;;EAwBOd,sCAAb,UAA4BjB,MAA5B,EAA4CC,kBAA5C,EAAwEC,iBAAxE,EAA6G;;;;;;YACzGF,MAAM,CAACmB,KAAP,CAAa,+CAAb;;;;;;YAEUe,iBAAiB,GAAG,IAAIjB,oBAAJ,CAAyBjB,MAAzB,EAAiCC,kBAAjC,EAAqDC,iBAArD,EAAwEoB,eAAe,CAACa,sBAAxF,CAApB;YACN;YAAA;YAAA,EAAMD,iBAAiB,CAACE,oBAAlB,EAAN;;;YAAAC;;YACA;YAAA;YAAA,EAAOH,iBAAP;;;;;YAGMI,cAAc,GAAG,IAAIrB,oBAAJ,CAAyBjB,MAAzB,EAAiCC,kBAAjC,EAAqDC,iBAArD,CAAjB;YACN;YAAA;YAAA,EAAMoC,cAAc,CAACF,oBAAf,EAAN;;;YAAAC;;YACA;YAAA;YAAA,EAAOC,cAAP;;;;;;;;;EAEP,CAZY;;;;;;EAiBCrB,sDAAd;;;;;;;QACI,KAAKjB,MAAL,CAAYmB,KAAZ,CAAkB,qDAAlB;;QAEAoB,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,KAAK9B,cAAxC,EAAwD,KAAxD,GAA+D;;QAEzDU,GAAG,GAA2B;UAChCC,OAAO,EAAEC,eAAe,CAACC,UADO;UAEhCpB,WAAW,EAAE,KAAKA,WAFc;UAGhCI,UAAU,EAAE,KAAKA,UAAL,EAHoB;UAIhCW,IAAI,EAAE;YACFuB,MAAM,EAAEC,qBAAqB,CAACC;UAD5B;QAJ0B,CAA9B;QAQN,KAAK9B,cAAL,CAAoB+B,eAApB,CAAoC;UAChCzC,WAAW,EAAE,KAAKA,WADc;UAEhC0C,2BAA2B,EAAE,KAAK5C;QAFF,CAApC;;QAKA,KAAKO,cAAL,CAAoBmB,KAApB,CAA0BmB,SAA1B,GAAsC,UAACC,KAAD,EAAM;UACxCf,KAAI,CAACgB,gBAAL,CAAsBD,KAAtB;QACH,CAFD;;QAIAR,MAAM,CAACX,WAAP,CAAmBR,GAAnB,EAAwBmB,MAAM,CAACU,MAA/B,EAAuC,CAAC,KAAKzC,cAAL,CAAoB0C,KAArB,CAAvC;QAEA;QAAA;QAAA,EAAO,IAAIrB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;UAC/BC,KAAI,CAAC1B,kBAAL,CAAwB2B,GAAxB,CAA4Bb,GAAG,CAACb,UAAhC,EAA4C;YAACuB,OAAO,SAAR;YAAUC,MAAM;UAAhB,CAA5C;;UACAC,KAAI,CAACmB,SAAL,GAAiBZ,MAAM,CAACa,UAAP,CAAkB;;;;;YAK/Bb,MAAM,CAACc,mBAAP,CAA2B,SAA3B,EAAsCrB,KAAI,CAACtB,cAA3C,EAA2D,KAA3D;;YACAsB,KAAI,CAACxB,cAAL,CAAoBmB,KAApB,CAA0B2B,KAA1B;;YACAtB,KAAI,CAACxB,cAAL,CAAoB0C,KAApB,CAA0BI,KAA1B;;YACAtB,KAAI,CAACnB,cAAL,CAAoB0C,cAApB,CAAmC;cAACC,0BAA0B,EAAE,IAA7B;cAAmCC,OAAO,EAAE;YAA5C,CAAnC;;YACA1B,MAAM,CAAC2B,gBAAgB,CAACC,iCAAjB,EAAD,CAAN;;YACA3B,KAAI,CAAC1B,kBAAL,CAAwBsD,MAAxB,CAA+BxC,GAAG,CAACb,UAAnC;UACH,CAXgB,EAWdyB,KAAI,CAAC/B,kBAXS,CAAjB,CAF+B,CAaH;QAC/B,CAdM,CAAP;;;EAeH,CAvCa;;;;;;;EA6CNgB,iDAAR,UAAwB8B,KAAxB,EAA2C;IACvC,KAAK/C,MAAL,CAAYmB,KAAZ,CAAkB,+CAAlB,EADuC;;IAGvC,IAAI4B,KAAK,CAACc,MAAN,KAAiBtB,MAArB,EAA6B;MACzB;IACH;;IAED,IAAMuB,OAAO,GAAGf,KAAK,CAACgB,IAAtB;;IAEA,IAAI,CAACD,OAAO,CAACzC,OAAT,IAAoByC,OAAO,CAACzC,OAAR,KAAoBC,eAAe,CAACC,UAA5D,EAAwE;MACpE;IACH;;IAED,IAAIuC,OAAO,CAAC3D,WAAR,IAAuB2D,OAAO,CAAC3D,WAAR,KAAwB,KAAKA,WAAxD,EAAqE;MACjE;IACH;;IAED,IAAI2D,OAAO,CAAC5C,IAAR,CAAauB,MAAb,KAAwBC,qBAAqB,CAACC,gBAAlD,EAAoE;;MAEhE,KAAK3C,MAAL,CAAYgE,OAAZ,CAAoBF,OAAO,CAAC3D,WAAR,GAAsB,wBAAsB2D,OAAO,CAAC3D,WAA9B,GAAyC,gBAA/D,GAAkF,wBAAtG;MACA8D,YAAY,CAAC,KAAKd,SAAN,CAAZ;MACA,KAAK3C,cAAL,CAAoBmB,KAApB,CAA0B2B,KAA1B;MACA,KAAK9C,cAAL,CAAoB0C,KAApB,CAA0BI,KAA1B;MACAf,MAAM,CAACc,mBAAP,CAA2B,SAA3B,EAAsC,KAAK3C,cAA3C,EAA2D,KAA3D;MACA,IAAMwD,iBAAiB,GAAG,KAAK5D,kBAAL,CAAwB6D,GAAxB,CAA4BL,OAAO,CAACvD,UAApC,CAA1B;;MACA,IAAI2D,iBAAJ,EAAuB;QACnB,KAAKrD,cAAL,CAAoB0C,cAApB,CAAmC;UAACE,OAAO,EAAE,KAAV;UAAiBW,kBAAkB,EAAE;QAArC,CAAnC;QACAF,iBAAiB,CAACnC,MAAlB,CAAyB2B,gBAAgB,CAACW,sCAAjB,EAAzB;MACH;IACJ;EACJ,CA9BO;;;;;;;EAoCApD,kDAAR,UAAyB8B,KAAzB,EAA4C;IACxC,KAAK/C,MAAL,CAAYmB,KAAZ,CAAkB,iDAAlB;IACA,IAAM2C,OAAO,GAAGf,KAAK,CAACgB,IAAtB;IAEA,IAAMO,QAAQ,GAAG,KAAKlE,SAAL,CAAe+D,GAAf,CAAmBL,OAAO,CAACvD,UAA3B,CAAjB;IACA,IAAM2D,iBAAiB,GAAG,KAAK5D,kBAAL,CAAwB6D,GAAxB,CAA4BL,OAAO,CAACvD,UAApC,CAA1B;;IAEA,IAAI;MACA,IAAMkC,MAAM,GAAGqB,OAAO,CAAC5C,IAAR,CAAauB,MAA5B;;MAEA,IAAIA,MAAM,KAAKC,qBAAqB,CAAC6B,QAArC,EAA+C;QAC3C,IAAI,CAACD,QAAL,EAAe;UACX;QACH;;QACD,IAAME,QAAQ,GAAGV,OAAO,CAAC5C,IAAR,CAAasD,QAA9B;QACA,KAAKxE,MAAL,CAAYmB,KAAZ,CAAkB,iEAAlB;QACA,KAAKnB,MAAL,CAAYwB,QAAZ,CAAqB,sEAAoEC,IAAI,CAACC,SAAL,CAAe8C,QAAf,CAAzF;;QACA,IAAIA,QAAQ,CAACC,MAAT,KAAoB,SAAxB,EAAmC;UAC/BH,QAAQ,CAACvC,MAAT,CAAgB2C,eAAe,CAACC,WAAhB,CAA4BH,QAAQ,CAACI,IAArC,EAA2CJ,QAAQ,CAACK,WAApD,EAAiEL,QAAQ,CAACM,GAA1E,CAAhB;QACH,CAFD,MAEO,IAAIN,QAAQ,CAACO,MAAb,EAAqB;UACxB,IAAIP,QAAQ,CAACO,MAAT,CAAgB,MAAhB,KAA2BP,QAAQ,CAACO,MAAT,CAAgB,aAAhB,CAA/B,EAA+D;YAC3DT,QAAQ,CAACvC,MAAT,CAAgB2C,eAAe,CAACC,WAAhB,CAA4BH,QAAQ,CAACO,MAAT,CAAgB,MAAhB,CAA5B,EAAqDP,QAAQ,CAACO,MAAT,CAAgB,aAAhB,CAArD,EAAqFP,QAAQ,CAACO,MAAT,CAAgB,KAAhB,CAArF,CAAhB;UACH,CAFD,MAEO;YACHT,QAAQ,CAACxC,OAAT,CAAiB0C,QAAQ,CAACO,MAA1B;UACH;QACJ,CANM,MAMA;UACH,MAAMC,SAAS,CAACC,qBAAV,CAAgC,gCAAhC,CAAN;QACH;;QACD,KAAK7E,SAAL,CAAewD,MAAf,CAAsBE,OAAO,CAACvD,UAA9B;MACH,CAnBD,MAmBO,IAAIkC,MAAM,KAAKC,qBAAqB,CAACwC,iBAArC,EAAwD;QAC3D,IAAI,CAAChB,iBAAL,EAAwB;UACpB;QACH;;QACDD,YAAY,CAAC,KAAKd,SAAN,CAAZ,CAJ2D,CAI9B;;QAC7BZ,MAAM,CAACc,mBAAP,CAA2B,SAA3B,EAAsC,KAAK3C,cAA3C,EAA2D,KAA3D,EAL2D,CAKO;;QAClE,KAAKP,WAAL,GAAmB2D,OAAO,CAAC3D,WAA3B;QACA,KAAKgF,gBAAL,GAAwBrB,OAAO,CAAC5C,IAAR,CAAakE,OAArC;QACA,KAAKpF,MAAL,CAAYgE,OAAZ,CAAoB,uEAAqE,KAAK7D,WAA9F;QACA,KAAKU,cAAL,CAAoB0C,cAApB,CAAmC;UAACa,kBAAkB,EAAE,IAArB;UAA2BX,OAAO,EAAE;QAApC,CAAnC;QAEAS,iBAAiB,CAACpC,OAAlB;QACA,KAAKxB,kBAAL,CAAwBsD,MAAxB,CAA+BE,OAAO,CAACvD,UAAvC;MACH,CAnCD;;IAqCH,CArCD,CAqCE,OAAO8E,GAAP,EAAY;MACV,KAAKrF,MAAL,CAAYsF,KAAZ,CAAkB,2CAAlB;MACA,KAAKtF,MAAL,CAAYuF,QAAZ,CAAqB,gDAA8CF,GAAG,CAACG,QAAJ,EAAnE;MACA,KAAKxF,MAAL,CAAYuF,QAAZ,CAAqB,qBAAmBxC,KAAxC;;MAEA,IAAIuB,QAAJ,EAAc;QACVA,QAAQ,CAACvC,MAAT,CAAgBsD,GAAhB;MACH,CAFD,MAEO,IAAInB,iBAAJ,EAAuB;QAC1BA,iBAAiB,CAACnC,MAAlB,CAAyBsD,GAAzB;MACH;IACJ;EACJ,CAvDO;;;;;;;EA6DRpE;IACI,OAAO,KAAKd,WAAZ;EACH,CAFD;;;;;;;EAQAc;IACI,OAAO,KAAKkE,gBAAZ;EACH,CAFD;;;;;;;;;;EAWOlE,yCAAP,UAAyBwE,MAAzB,EAAuDzF,MAAvD,EAAuE0F,uBAAvE,EAAuHC,oBAAvH,EAAkK;IAC9J3F,MAAM,CAACmB,KAAP,CAAa,0BAAb;;IACA,IAAI,CAACsE,MAAM,CAACG,MAAP,CAAcC,iBAAnB,EAAsC;MAClC7F,MAAM,CAACmB,KAAP,CAAa,sEAAb,EADkC;;MAGlC,OAAO,KAAP;IACH;;IAED,IAAI,CAACuE,uBAAL,EAA8B;MAC1B1F,MAAM,CAACmB,KAAP,CAAa,+EAAb,EAD0B;;MAG1B,OAAO,KAAP;IACH;;IAED,IAAIwE,oBAAJ,EAA0B;MACtB,QAAOA,oBAAP;QACI,KAAKG,oBAAoB,CAACC,MAA1B;QACA,KAAKD,oBAAoB,CAACE,GAA1B;UACIhG,MAAM,CAACmB,KAAP,CAAa,sEAAb;UACA,OAAO,IAAP;;QACJ;UACInB,MAAM,CAACmB,KAAP,CAAa,2EAAb;UACA,OAAO,KAAP;MAPR;IASH;;IAED,OAAO,IAAP;EACH,CA3BM;;EA4BX;AAAC","names":["logger","handshakeTimeoutMs","performanceClient","extensionId","resolvers","Map","handshakeResolvers","responseId","messageChannel","MessageChannel","windowListener","onWindowMessage","bind","handshakeEvent","startMeasurement","PerformanceEvents","NativeMessageHandlerHandshake","NativeMessageHandler","body","trace","req","channel","NativeConstants","CHANNEL_ID","tracePii","JSON","stringify","port1","postMessage","Promise","resolve","reject","_this","set","preferredProvider","PREFERRED_EXTENSION_ID","sendHandshakeRequest","_a","backupProvider","window","addEventListener","method","NativeExtensionMethod","HandshakeRequest","addStaticFields","extensionHandshakeTimeoutMs","onmessage","event","onChannelMessage","origin","port2","timeoutId","setTimeout","removeEventListener","close","endMeasurement","extensionHandshakeTimedOut","success","BrowserAuthError","createNativeHandshakeTimeoutError","delete","source","request","data","verbose","clearTimeout","handshakeResolver","get","extensionInstalled","createNativeExtensionNotInstalledError","resolver","Response","response","status","NativeAuthError","createError","code","description","ext","result","AuthError","createUnexpectedError","HandshakeResponse","extensionVersion","version","err","error","errorPii","toString","config","nativeExtensionProvider","authenticationScheme","system","allowNativeBroker","AuthenticationScheme","BEARER","POP"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-browser/src/broker/nativeBroker/NativeMessageHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { NativeConstants, NativeExtensionMethod } from \"../../utils/BrowserConstants\";\r\nimport {\r\n    Logger,\r\n    AuthError,\r\n    AuthenticationScheme,\r\n    InProgressPerformanceEvent,\r\n    PerformanceEvents,\r\n    IPerformanceClient\r\n} from \"@azure/msal-common\";\r\nimport { NativeExtensionRequest, NativeExtensionRequestBody } from \"./NativeRequest\";\r\nimport { NativeAuthError } from \"../../error/NativeAuthError\";\r\nimport { BrowserAuthError } from \"../../error/BrowserAuthError\";\r\nimport { BrowserConfiguration } from \"../../config/Configuration\";\r\n\r\ntype ResponseResolvers<T> = {\r\n    resolve: (value:T|PromiseLike<T>) => void;\r\n    reject: (value:AuthError|Error|PromiseLike<Error>|PromiseLike<AuthError>)  => void;\r\n};\r\n\r\nexport class NativeMessageHandler {\r\n    private extensionId: string | undefined;\r\n    private extensionVersion: string | undefined;\r\n    private logger: Logger;\r\n    private readonly handshakeTimeoutMs: number;\r\n    private responseId: number;\r\n    private timeoutId: number | undefined;\r\n    private resolvers: Map<number, ResponseResolvers<object>>;\r\n    private handshakeResolvers: Map<number, ResponseResolvers<void>>;\r\n    private messageChannel: MessageChannel;\r\n    private readonly windowListener: (event: MessageEvent) => void;\r\n    private readonly performanceClient: IPerformanceClient;\r\n    private readonly handshakeEvent: InProgressPerformanceEvent;\r\n\r\n    constructor(logger: Logger, handshakeTimeoutMs: number, performanceClient: IPerformanceClient, extensionId?: string) {\r\n        this.logger = logger;\r\n        this.handshakeTimeoutMs = handshakeTimeoutMs;\r\n        this.extensionId = extensionId;\r\n        this.resolvers = new Map(); // Used for non-handshake messages\r\n        this.handshakeResolvers = new Map(); // Used for handshake messages\r\n        this.responseId = 0;\r\n        this.messageChannel = new MessageChannel();\r\n        this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\r\n        this.performanceClient = performanceClient;\r\n        this.handshakeEvent = performanceClient.startMeasurement(PerformanceEvents.NativeMessageHandlerHandshake);\r\n    }\r\n\r\n    /**\r\n     * Sends a given message to the extension and resolves with the extension response\r\n     * @param body\r\n     */\r\n    async sendMessage(body: NativeExtensionRequestBody): Promise<object> {\r\n        this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\r\n        const req: NativeExtensionRequest = {\r\n            channel: NativeConstants.CHANNEL_ID,\r\n            extensionId: this.extensionId,\r\n            responseId: this.responseId++,\r\n            body: body\r\n        };\r\n\r\n        this.logger.trace(\"NativeMessageHandler - Sending request to browser extension\");\r\n        this.logger.tracePii(`NativeMessageHandler - Sending request to browser extension: ${JSON.stringify(req)}`);\r\n        this.messageChannel.port1.postMessage(req);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.resolvers.set(req.responseId, {resolve, reject});\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns an instance of the MessageHandler that has successfully established a connection with an extension\r\n     * @param {Logger} logger\r\n     * @param {number} handshakeTimeoutMs\r\n     * @param {IPerformanceClient} performanceClient\r\n     */\r\n    static async createProvider(logger: Logger, handshakeTimeoutMs: number, performanceClient: IPerformanceClient): Promise<NativeMessageHandler> {\r\n        logger.trace(\"NativeMessageHandler - createProvider called.\");\r\n        try {\r\n            const preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, NativeConstants.PREFERRED_EXTENSION_ID);\r\n            await preferredProvider.sendHandshakeRequest();\r\n            return preferredProvider;\r\n        } catch (e) {\r\n            // If preferred extension fails for whatever reason, fallback to using any installed extension\r\n            const backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient);\r\n            await backupProvider.sendHandshakeRequest();\r\n            return backupProvider;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send handshake request helper.\r\n     */\r\n    private async sendHandshakeRequest(): Promise<void> {\r\n        this.logger.trace(\"NativeMessageHandler - sendHandshakeRequest called.\");\r\n        // Register this event listener before sending handshake\r\n        window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\r\n\r\n        const req: NativeExtensionRequest = {\r\n            channel: NativeConstants.CHANNEL_ID,\r\n            extensionId: this.extensionId,\r\n            responseId: this.responseId++,\r\n            body: {\r\n                method: NativeExtensionMethod.HandshakeRequest\r\n            }\r\n        };\r\n        this.handshakeEvent.addStaticFields({\r\n            extensionId: this.extensionId,\r\n            extensionHandshakeTimeoutMs: this.handshakeTimeoutMs\r\n        });\r\n\r\n        this.messageChannel.port1.onmessage = (event) => {\r\n            this.onChannelMessage(event);\r\n        };\r\n\r\n        window.postMessage(req, window.origin, [this.messageChannel.port2]);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.handshakeResolvers.set(req.responseId, {resolve, reject});\r\n            this.timeoutId = window.setTimeout(() => {\r\n                /*\r\n                 * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\r\n                 * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\r\n                 */\r\n                window.removeEventListener(\"message\", this.windowListener, false);\r\n                this.messageChannel.port1.close();\r\n                this.messageChannel.port2.close();\r\n                this.handshakeEvent.endMeasurement({extensionHandshakeTimedOut: true, success: false});\r\n                reject(BrowserAuthError.createNativeHandshakeTimeoutError());\r\n                this.handshakeResolvers.delete(req.responseId);\r\n            }, this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\r\n     * @param event\r\n     */\r\n    private onWindowMessage(event: MessageEvent): void {\r\n        this.logger.trace(\"NativeMessageHandler - onWindowMessage called\");\r\n        // We only accept messages from ourselves\r\n        if (event.source !== window) {\r\n            return;\r\n        }\r\n\r\n        const request = event.data;\r\n\r\n        if (!request.channel || request.channel !== NativeConstants.CHANNEL_ID) {\r\n            return;\r\n        }\r\n\r\n        if (request.extensionId && request.extensionId !== this.extensionId) {\r\n            return;\r\n        }\r\n\r\n        if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\r\n            // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\r\n            this.logger.verbose(request.extensionId ? `Extension with id: ${request.extensionId} not installed` : \"No extension installed\");\r\n            clearTimeout(this.timeoutId);\r\n            this.messageChannel.port1.close();\r\n            this.messageChannel.port2.close();\r\n            window.removeEventListener(\"message\", this.windowListener, false);\r\n            const handshakeResolver = this.handshakeResolvers.get(request.responseId);\r\n            if (handshakeResolver) {\r\n                this.handshakeEvent.endMeasurement({success: false, extensionInstalled: false});\r\n                handshakeResolver.reject(BrowserAuthError.createNativeExtensionNotInstalledError());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoked when a message is received from the extension on the MessageChannel port\r\n     * @param event\r\n     */\r\n    private onChannelMessage(event: MessageEvent): void {\r\n        this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\r\n        const request = event.data;\r\n\r\n        const resolver = this.resolvers.get(request.responseId);\r\n        const handshakeResolver = this.handshakeResolvers.get(request.responseId);\r\n\r\n        try {\r\n            const method = request.body.method;\r\n\r\n            if (method === NativeExtensionMethod.Response) {\r\n                if (!resolver) {\r\n                    return;\r\n                }\r\n                const response = request.body.response;\r\n                this.logger.trace(\"NativeMessageHandler - Received response from browser extension\");\r\n                this.logger.tracePii(`NativeMessageHandler - Received response from browser extension: ${JSON.stringify(response)}`);\r\n                if (response.status !== \"Success\") {\r\n                    resolver.reject(NativeAuthError.createError(response.code, response.description, response.ext));\r\n                } else if (response.result) {\r\n                    if (response.result[\"code\"] && response.result[\"description\"]) {\r\n                        resolver.reject(NativeAuthError.createError(response.result[\"code\"], response.result[\"description\"], response.result[\"ext\"]));\r\n                    } else {\r\n                        resolver.resolve(response.result);\r\n                    }\r\n                } else {\r\n                    throw AuthError.createUnexpectedError(\"Event does not contain result.\");\r\n                }\r\n                this.resolvers.delete(request.responseId);\r\n            } else if (method === NativeExtensionMethod.HandshakeResponse) {\r\n                if (!handshakeResolver) {\r\n                    return;\r\n                }\r\n                clearTimeout(this.timeoutId); // Clear setTimeout\r\n                window.removeEventListener(\"message\", this.windowListener, false); // Remove 'No extension' listener\r\n                this.extensionId = request.extensionId;\r\n                this.extensionVersion = request.body.version;\r\n                this.logger.verbose(`NativeMessageHandler - Received HandshakeResponse from extension: ${this.extensionId}`);\r\n                this.handshakeEvent.endMeasurement({extensionInstalled: true, success: true});\r\n\r\n                handshakeResolver.resolve();\r\n                this.handshakeResolvers.delete(request.responseId);\r\n            }\r\n            // Do nothing if method is not Response or HandshakeResponse\r\n        } catch (err) {\r\n            this.logger.error(\"Error parsing response from WAM Extension\");\r\n            this.logger.errorPii(`Error parsing response from WAM Extension: ${err.toString()}`);\r\n            this.logger.errorPii(`Unable to parse ${event}`);\r\n\r\n            if (resolver) {\r\n                resolver.reject(err as AuthError);\r\n            } else if (handshakeResolver) {\r\n                handshakeResolver.reject(err as AuthError);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the Id for the browser extension this handler is communicating with\r\n     * @returns\r\n     */\r\n    getExtensionId(): string | undefined {\r\n        return this.extensionId;\r\n    }\r\n\r\n    /**\r\n     * Returns the version for the browser extension this handler is communicating with\r\n     * @returns\r\n     */\r\n    getExtensionVersion(): string | undefined {\r\n        return this.extensionVersion;\r\n    }\r\n\r\n    /**\r\n     * Returns boolean indicating whether or not the request should attempt to use native broker\r\n     * @param logger\r\n     * @param config\r\n     * @param nativeExtensionProvider\r\n     * @param authenticationScheme\r\n     */\r\n    static isNativeAvailable(config: BrowserConfiguration, logger: Logger, nativeExtensionProvider?: NativeMessageHandler, authenticationScheme?: AuthenticationScheme): boolean {\r\n        logger.trace(\"isNativeAvailable called\");\r\n        if (!config.system.allowNativeBroker) {\r\n            logger.trace(\"isNativeAvailable: allowNativeBroker is not enabled, returning false\");\r\n            // Developer disabled WAM\r\n            return false;\r\n        }\r\n\r\n        if (!nativeExtensionProvider) {\r\n            logger.trace(\"isNativeAvailable: WAM extension provider is not initialized, returning false\");\r\n            // Extension is not available\r\n            return false;\r\n        }\r\n\r\n        if (authenticationScheme) {\r\n            switch(authenticationScheme) {\r\n                case AuthenticationScheme.BEARER:\r\n                case AuthenticationScheme.POP:\r\n                    logger.trace(\"isNativeAvailable: authenticationScheme is supported, returning true\");\r\n                    return true;\r\n                default:\r\n                    logger.trace(\"isNativeAvailable: authenticationScheme is not supported, returning false\");\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}