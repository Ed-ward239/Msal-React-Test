{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { UrlString, Constants, PerformanceEvents, AuthorizationCodeClient, Authority, AuthorityFactory, ResponseMode, StringUtils, ProtocolUtils } from '@azure/msal-common';\nimport { BaseInteractionClient } from './BaseInteractionClient.js';\nimport { BrowserConstants } from '../utils/BrowserConstants.js';\nimport { version } from '../packageMetadata.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\r\n */\n\nvar StandardInteractionClient =\n/** @class */\nfunction (_super) {\n  __extends(StandardInteractionClient, _super);\n\n  function StandardInteractionClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Generates an auth code request tied to the url request.\r\n   * @param request\r\n   */\n\n\n  StandardInteractionClient.prototype.initializeAuthorizationCodeRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var generatedPkceParams, authCodeRequest;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n            this.logger.verbose(\"initializeAuthorizationRequest called\", request.correlationId);\n            return [4\n            /*yield*/\n            , this.browserCrypto.generatePkceCodes()];\n\n          case 1:\n            generatedPkceParams = _a.sent();\n            authCodeRequest = __assign(__assign({}, request), {\n              redirectUri: request.redirectUri,\n              code: Constants.EMPTY_STRING,\n              codeVerifier: generatedPkceParams.verifier\n            });\n            request.codeChallenge = generatedPkceParams.challenge;\n            request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n            return [2\n            /*return*/\n            , authCodeRequest];\n        }\n      });\n    });\n  };\n  /**\r\n   * Initializer for the logout request.\r\n   * @param logoutRequest\r\n   */\n\n\n  StandardInteractionClient.prototype.initializeLogoutRequest = function (logoutRequest) {\n    this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.correlationId);\n\n    var validLogoutRequest = __assign({\n      correlationId: this.correlationId || this.browserCrypto.createNewGuid()\n    }, logoutRequest);\n    /**\r\n     * Set logout_hint to be login_hint from ID Token Claims if present\r\n     * and logoutHint attribute wasn't manually set in logout request\r\n     */\n\n\n    if (logoutRequest) {\n      // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n      if (!logoutRequest.logoutHint) {\n        if (logoutRequest.account) {\n          var logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\n\n          if (logoutHint) {\n            this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\n            validLogoutRequest.logoutHint = logoutHint;\n          }\n        } else {\n          this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\n        }\n      } else {\n        this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\n      }\n    } else {\n      this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\n    }\n    /*\r\n     * Only set redirect uri if logout request isn't provided or the set uri isn't null.\r\n     * Otherwise, use passed uri, config, or current page.\r\n     */\n\n\n    if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n      if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n      } else if (this.config.auth.postLogoutRedirectUri === null) {\n        this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\n      } else if (this.config.auth.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n      } else {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());\n      }\n    } else {\n      this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\n    }\n\n    return validLogoutRequest;\n  };\n  /**\r\n   * Parses login_hint ID Token Claim out of AccountInfo object to be used as\r\n   * logout_hint in end session request.\r\n   * @param account\r\n   */\n\n\n  StandardInteractionClient.prototype.getLogoutHintFromIdTokenClaims = function (account) {\n    var idTokenClaims = account.idTokenClaims;\n\n    if (idTokenClaims) {\n      if (idTokenClaims.login_hint) {\n        return idTokenClaims.login_hint;\n      } else {\n        this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\n      }\n    } else {\n      this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\n    }\n\n    return null;\n  };\n  /**\r\n   * Creates an Authorization Code Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n\n\n  StandardInteractionClient.prototype.createAuthCodeClient = function (serverTelemetryManager, authorityUrl, requestAzureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.correlationId); // Create auth module.\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getClientConfiguration(serverTelemetryManager, authorityUrl, requestAzureCloudOptions)];\n\n          case 1:\n            clientConfig = _a.sent();\n            return [2\n            /*return*/\n            , new AuthorizationCodeClient(clientConfig, this.performanceClient)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates a Client Configuration object with the given request authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n\n\n  StandardInteractionClient.prototype.getClientConfiguration = function (serverTelemetryManager, requestAuthority, requestAzureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var discoveredAuthority, logger;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n            this.logger.verbose(\"getClientConfiguration called\", this.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions)];\n\n          case 1:\n            discoveredAuthority = _a.sent();\n            logger = this.config.system.loggerOptions;\n            return [2\n            /*return*/\n            , {\n              authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities\n              },\n              systemOptions: {\n                tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\n                preventCorsPreflight: true\n              },\n              loggerOptions: {\n                loggerCallback: logger.loggerCallback,\n                piiLoggingEnabled: logger.piiLoggingEnabled,\n                logLevel: logger.logLevel,\n                correlationId: this.correlationId\n              },\n              cryptoInterface: this.browserCrypto,\n              networkInterface: this.networkClient,\n              storageInterface: this.browserStorage,\n              serverTelemetryManager: serverTelemetryManager,\n              libraryInfo: {\n                sku: BrowserConstants.MSAL_SKU,\n                version: version,\n                cpu: Constants.EMPTY_STRING,\n                os: Constants.EMPTY_STRING\n              },\n              telemetry: this.config.telemetry\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * @param hash\r\n   * @param interactionType\r\n   */\n\n\n  StandardInteractionClient.prototype.validateAndExtractStateFromHash = function (serverParams, interactionType, requestCorrelationId) {\n    this.logger.verbose(\"validateAndExtractStateFromHash called\", requestCorrelationId);\n\n    if (!serverParams.state) {\n      throw BrowserAuthError.createHashDoesNotContainStateError();\n    }\n\n    var platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);\n\n    if (!platformStateObj) {\n      throw BrowserAuthError.createUnableToParseStateError();\n    }\n\n    if (platformStateObj.interactionType !== interactionType) {\n      throw BrowserAuthError.createStateInteractionTypeMismatchError();\n    }\n\n    this.logger.verbose(\"Returning state from hash\", requestCorrelationId);\n    return serverParams.state;\n  };\n  /**\r\n   * Used to get a discovered version of the default authority.\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n\n\n  StandardInteractionClient.prototype.getDiscoveredAuthority = function (requestAuthority, requestAzureCloudOptions) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var getAuthorityMeasurement, authorityOptions, userAuthority, builtAuthority;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n            this.logger.verbose(\"getDiscoveredAuthority called\", this.correlationId);\n            getAuthorityMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n            authorityOptions = {\n              protocolMode: this.config.auth.protocolMode,\n              knownAuthorities: this.config.auth.knownAuthorities,\n              cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n              authorityMetadata: this.config.auth.authorityMetadata,\n              skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n            };\n            userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;\n            builtAuthority = Authority.generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);\n            this.logger.verbose(\"Creating discovered authority with configured authority\", this.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.correlationId);\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.performanceClient, this.correlationId).then(function (result) {\n              getAuthorityMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              getAuthorityMeasurement.endMeasurement({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false\n              });\n              throw error;\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper to initialize required request parameters for interactive APIs and ssoSilent()\r\n   * @param request\r\n   * @param interactionType\r\n   */\n\n\n  StandardInteractionClient.prototype.initializeAuthorizationRequest = function (request, interactionType) {\n    return __awaiter(this, void 0, void 0, function () {\n      var redirectUri, browserState, state, validatedRequest, _a, account, legacyLoginHint;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);\n            this.logger.verbose(\"initializeAuthorizationRequest called\", this.correlationId);\n            redirectUri = this.getRedirectUri(request.redirectUri);\n            browserState = {\n              interactionType: interactionType\n            };\n            state = ProtocolUtils.setRequestState(this.browserCrypto, request && request.state || Constants.EMPTY_STRING, browserState);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\n            _a = [{}];\n            return [4\n            /*yield*/\n            , this.initializeBaseRequest(request)];\n\n          case 1:\n            validatedRequest = __assign.apply(void 0, [__assign.apply(void 0, _a.concat([_b.sent()])), {\n              redirectUri: redirectUri,\n              state: state,\n              nonce: request.nonce || this.browserCrypto.createNewGuid(),\n              responseMode: ResponseMode.FRAGMENT\n            }]);\n            account = request.account || this.browserStorage.getActiveAccount();\n\n            if (account) {\n              this.logger.verbose(\"Setting validated request account\", this.correlationId);\n              this.logger.verbosePii(\"Setting validated request account: \" + account.homeAccountId, this.correlationId);\n              validatedRequest.account = account;\n            } // Check for ADAL/MSAL v1 SSO\n\n\n            if (StringUtils.isEmpty(validatedRequest.loginHint) && !account) {\n              legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n\n              if (legacyLoginHint) {\n                validatedRequest.loginHint = legacyLoginHint;\n              }\n            }\n\n            return [2\n            /*return*/\n            , validatedRequest];\n        }\n      });\n    });\n  };\n\n  return StandardInteractionClient;\n}(BaseInteractionClient);\n\nexport { StandardInteractionClient };","map":{"version":3,"mappings":"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","names":["__extends","StandardInteractionClient","request","performanceClient","addQueueMeasurement","PerformanceEvents","StandardInteractionClientInitializeAuthorizationCodeRequest","correlationId","logger","verbose","browserCrypto","generatePkceCodes","generatedPkceParams","_a","authCodeRequest","redirectUri","code","Constants","EMPTY_STRING","codeVerifier","verifier","codeChallenge","challenge","codeChallengeMethod","S256_CODE_CHALLENGE_METHOD","logoutRequest","validLogoutRequest","createNewGuid","logoutHint","account","getLogoutHintFromIdTokenClaims","postLogoutRedirectUri","UrlString","getAbsoluteUrl","BrowserUtils","getCurrentUri","config","auth","idTokenClaims","login_hint","serverTelemetryManager","authorityUrl","requestAzureCloudOptions","StandardInteractionClientCreateAuthCodeClient","setPreQueueTime","StandardInteractionClientGetClientConfiguration","getClientConfiguration","clientConfig","AuthorizationCodeClient","requestAuthority","StandardInteractionClientGetDiscoveredAuthority","getDiscoveredAuthority","discoveredAuthority","system","loggerOptions","authOptions","clientId","authority","clientCapabilities","systemOptions","tokenRenewalOffsetSeconds","preventCorsPreflight","loggerCallback","piiLoggingEnabled","logLevel","cryptoInterface","networkInterface","networkClient","storageInterface","browserStorage","libraryInfo","sku","BrowserConstants","MSAL_SKU","version","cpu","os","telemetry","serverParams","interactionType","requestCorrelationId","state","BrowserAuthError","createHashDoesNotContainStateError","platformStateObj","BrowserProtocolUtils","extractBrowserRequestState","createUnableToParseStateError","createStateInteractionTypeMismatchError","getAuthorityMeasurement","startMeasurement","authorityOptions","protocolMode","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","userAuthority","builtAuthority","Authority","generateAuthority","azureCloudOptions","AuthorityFactoryCreateDiscoveredInstance","AuthorityFactory","createDiscoveredInstance","then","result","endMeasurement","success","catch","error","errorCode","subErrorCode","subError","_b","StandardInteractionClientInitializeAuthorizationRequest","getRedirectUri","browserState","ProtocolUtils","setRequestState","InitializeBaseRequest","initializeBaseRequest","validatedRequest","nonce","responseMode","ResponseMode","FRAGMENT","getActiveAccount","verbosePii","homeAccountId","StringUtils","isEmpty","loginHint","legacyLoginHint","getLegacyLoginHint","BaseInteractionClient"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-browser/src/interaction_client/StandardInteractionClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ServerTelemetryManager, CommonAuthorizationCodeRequest, Constants, AuthorizationCodeClient, ClientConfiguration, AuthorityOptions, Authority, AuthorityFactory, ServerAuthorizationCodeResponse, UrlString, CommonEndSessionRequest, ProtocolUtils, ResponseMode, StringUtils, IdTokenClaims, AccountInfo, AzureCloudOptions, PerformanceEvents, AuthError} from \"@azure/msal-common\";\r\nimport { BaseInteractionClient } from \"./BaseInteractionClient\";\r\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\r\nimport { BrowserConstants, InteractionType } from \"../utils/BrowserConstants\";\r\nimport { version } from \"../packageMetadata\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { BrowserProtocolUtils, BrowserStateObject } from \"../utils/BrowserProtocolUtils\";\r\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\r\n\r\n/**\r\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\r\n */\r\nexport abstract class StandardInteractionClient extends BaseInteractionClient {\r\n    /**\r\n     * Generates an auth code request tied to the url request.\r\n     * @param request\r\n     */\r\n    protected async initializeAuthorizationCodeRequest(request: AuthorizationUrlRequest): Promise<CommonAuthorizationCodeRequest> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\r\n        this.logger.verbose(\"initializeAuthorizationRequest called\", request.correlationId);\r\n        const generatedPkceParams = await this.browserCrypto.generatePkceCodes();\r\n\r\n        const authCodeRequest: CommonAuthorizationCodeRequest = {\r\n            ...request,\r\n            redirectUri: request.redirectUri,\r\n            code: Constants.EMPTY_STRING,\r\n            codeVerifier: generatedPkceParams.verifier\r\n        };\r\n\r\n        request.codeChallenge = generatedPkceParams.challenge;\r\n        request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\r\n\r\n        return authCodeRequest;\r\n    }\r\n\r\n    /**\r\n     * Initializer for the logout request.\r\n     * @param logoutRequest\r\n     */\r\n    protected initializeLogoutRequest(logoutRequest?: EndSessionRequest): CommonEndSessionRequest {\r\n        this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest?.correlationId);\r\n\r\n        const validLogoutRequest: CommonEndSessionRequest = {\r\n            correlationId: this.correlationId || this.browserCrypto.createNewGuid(),\r\n            ...logoutRequest\r\n        };\r\n\r\n        /**\r\n         * Set logout_hint to be login_hint from ID Token Claims if present\r\n         * and logoutHint attribute wasn't manually set in logout request\r\n         */\r\n        if (logoutRequest) {\r\n            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\r\n            if (!logoutRequest.logoutHint) {\r\n                if(logoutRequest.account) {\r\n                    const logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\r\n                    if (logoutHint) {\r\n                        this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\r\n                        validLogoutRequest.logoutHint = logoutHint;\r\n                    }\r\n                } else {\r\n                    this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\r\n                }\r\n            } else {\r\n                this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\r\n            }\r\n        } else {\r\n            this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\r\n        }\r\n\r\n        /*\r\n         * Only set redirect uri if logout request isn't provided or the set uri isn't null.\r\n         * Otherwise, use passed uri, config, or current page.\r\n         */\r\n        if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\r\n            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\r\n                this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\r\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\r\n            } else if (this.config.auth.postLogoutRedirectUri === null) {\r\n                this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\r\n            } else if (this.config.auth.postLogoutRedirectUri) {\r\n                this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\r\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\r\n            } else {\r\n                this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\r\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());\r\n            }\r\n        } else {\r\n            this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\r\n        }\r\n\r\n        return validLogoutRequest;\r\n    }\r\n\r\n    /**\r\n     * Parses login_hint ID Token Claim out of AccountInfo object to be used as\r\n     * logout_hint in end session request.\r\n     * @param account\r\n     */\r\n    protected getLogoutHintFromIdTokenClaims(account: AccountInfo): string | null {\r\n        const idTokenClaims: IdTokenClaims | undefined = account.idTokenClaims;\r\n        if (idTokenClaims) {\r\n            if (idTokenClaims.login_hint) {\r\n                return idTokenClaims.login_hint;\r\n            } else {\r\n                this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\r\n            }\r\n        } else {\r\n            this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Creates an Authorization Code Client with the given authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param authorityUrl\r\n     */\r\n    protected async createAuthCodeClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, requestAzureCloudOptions?: AzureCloudOptions): Promise<AuthorizationCodeClient> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.correlationId);\r\n        // Create auth module.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\r\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, requestAzureCloudOptions);\r\n        return new AuthorizationCodeClient(clientConfig, this.performanceClient);\r\n    }\r\n\r\n    /**\r\n     * Creates a Client Configuration object with the given request authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param requestAuthority\r\n     * @param requestCorrelationId\r\n     */\r\n    protected async getClientConfiguration(serverTelemetryManager: ServerTelemetryManager, requestAuthority?: string, requestAzureCloudOptions?: AzureCloudOptions): Promise<ClientConfiguration> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\r\n        this.logger.verbose(\"getClientConfiguration called\", this.correlationId);\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\r\n        const discoveredAuthority = await this.getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions);\r\n        const logger= this.config.system.loggerOptions;\r\n\r\n        return {\r\n            authOptions: {\r\n                clientId: this.config.auth.clientId,\r\n                authority: discoveredAuthority,\r\n                clientCapabilities: this.config.auth.clientCapabilities\r\n            },\r\n            systemOptions: {\r\n                tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\r\n                preventCorsPreflight: true\r\n            },\r\n            loggerOptions: {\r\n                loggerCallback: logger.loggerCallback,\r\n                piiLoggingEnabled: logger.piiLoggingEnabled,\r\n                logLevel: logger.logLevel,\r\n                correlationId: this.correlationId\r\n            },\r\n            cryptoInterface: this.browserCrypto,\r\n            networkInterface: this.networkClient,\r\n            storageInterface: this.browserStorage,\r\n            serverTelemetryManager: serverTelemetryManager,\r\n            libraryInfo: {\r\n                sku: BrowserConstants.MSAL_SKU,\r\n                version: version,\r\n                cpu: Constants.EMPTY_STRING,\r\n                os: Constants.EMPTY_STRING\r\n            },\r\n            telemetry: this.config.telemetry\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * @param hash\r\n     * @param interactionType\r\n     */\r\n    protected validateAndExtractStateFromHash(serverParams: ServerAuthorizationCodeResponse, interactionType: InteractionType, requestCorrelationId?: string): string {\r\n        this.logger.verbose(\"validateAndExtractStateFromHash called\", requestCorrelationId);\r\n        if (!serverParams.state) {\r\n            throw BrowserAuthError.createHashDoesNotContainStateError();\r\n        }\r\n\r\n        const platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);\r\n        if (!platformStateObj) {\r\n            throw BrowserAuthError.createUnableToParseStateError();\r\n        }\r\n\r\n        if (platformStateObj.interactionType !== interactionType) {\r\n            throw BrowserAuthError.createStateInteractionTypeMismatchError();\r\n        }\r\n\r\n        this.logger.verbose(\"Returning state from hash\", requestCorrelationId);\r\n        return serverParams.state;\r\n    }\r\n\r\n    /**\r\n     * Used to get a discovered version of the default authority.\r\n     * @param requestAuthority\r\n     * @param requestCorrelationId\r\n     */\r\n    protected async getDiscoveredAuthority(requestAuthority?: string, requestAzureCloudOptions?: AzureCloudOptions): Promise<Authority> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\r\n        this.logger.verbose(\"getDiscoveredAuthority called\", this.correlationId);\r\n        const getAuthorityMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\r\n        const authorityOptions: AuthorityOptions = {\r\n            protocolMode: this.config.auth.protocolMode,\r\n            knownAuthorities: this.config.auth.knownAuthorities,\r\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\r\n            authorityMetadata: this.config.auth.authorityMetadata,\r\n            skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\r\n        };\r\n\r\n        // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\r\n        const userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;\r\n\r\n        // fall back to the authority from config\r\n        const builtAuthority = Authority.generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);\r\n        this.logger.verbose(\"Creating discovered authority with configured authority\", this.correlationId);\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.correlationId);\r\n        return await AuthorityFactory.createDiscoveredInstance(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.performanceClient, this.correlationId)\r\n            .then((result: Authority) => {\r\n                getAuthorityMeasurement.endMeasurement({\r\n                    success: true,\r\n                });\r\n\r\n                return result;\r\n            })\r\n            .catch((error:AuthError) => {\r\n                getAuthorityMeasurement.endMeasurement({\r\n                    errorCode: error.errorCode,\r\n                    subErrorCode: error.subError,\r\n                    success: false\r\n                });\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Helper to initialize required request parameters for interactive APIs and ssoSilent()\r\n     * @param request\r\n     * @param interactionType\r\n     */\r\n    protected async initializeAuthorizationRequest(request: RedirectRequest|PopupRequest|SsoSilentRequest, interactionType: InteractionType): Promise<AuthorizationUrlRequest> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);\r\n        this.logger.verbose(\"initializeAuthorizationRequest called\", this.correlationId);\r\n        const redirectUri = this.getRedirectUri(request.redirectUri);\r\n        const browserState: BrowserStateObject = {\r\n            interactionType: interactionType\r\n        };\r\n        const state = ProtocolUtils.setRequestState(\r\n            this.browserCrypto,\r\n            (request && request.state)|| Constants.EMPTY_STRING,\r\n            browserState\r\n        );\r\n\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\r\n        const validatedRequest: AuthorizationUrlRequest = {\r\n            ...await this.initializeBaseRequest(request),\r\n            redirectUri: redirectUri,\r\n            state: state,\r\n            nonce: request.nonce || this.browserCrypto.createNewGuid(),\r\n            responseMode: ResponseMode.FRAGMENT\r\n        };\r\n\r\n        const account = request.account || this.browserStorage.getActiveAccount();\r\n        if (account) {\r\n            this.logger.verbose(\"Setting validated request account\", this.correlationId);\r\n            this.logger.verbosePii(`Setting validated request account: ${account.homeAccountId}`, this.correlationId);\r\n            validatedRequest.account = account;\r\n        }\r\n\r\n        // Check for ADAL/MSAL v1 SSO\r\n        if (StringUtils.isEmpty(validatedRequest.loginHint) && !account) {\r\n            const legacyLoginHint = this.browserStorage.getLegacyLoginHint();\r\n            if (legacyLoginHint) {\r\n                validatedRequest.loginHint = legacyLoginHint;\r\n            }\r\n        }\r\n\r\n        return validatedRequest;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}