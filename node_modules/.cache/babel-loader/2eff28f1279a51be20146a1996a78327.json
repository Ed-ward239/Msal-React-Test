{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { AsyncMemoryStorage } from './AsyncMemoryStorage.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar CryptoKeyStoreNames;\n\n(function (CryptoKeyStoreNames) {\n  CryptoKeyStoreNames[\"asymmetricKeys\"] = \"asymmetricKeys\";\n  CryptoKeyStoreNames[\"symmetricKeys\"] = \"symmetricKeys\";\n})(CryptoKeyStoreNames || (CryptoKeyStoreNames = {}));\n/**\r\n * MSAL CryptoKeyStore DB Version 2\r\n */\n\n\nvar CryptoKeyStore =\n/** @class */\nfunction () {\n  function CryptoKeyStore(logger) {\n    this.logger = logger;\n    this.asymmetricKeys = new AsyncMemoryStorage(this.logger, CryptoKeyStoreNames.asymmetricKeys);\n    this.symmetricKeys = new AsyncMemoryStorage(this.logger, CryptoKeyStoreNames.symmetricKeys);\n  }\n\n  CryptoKeyStore.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Delete in-memory keystores\n            this.asymmetricKeys.clearInMemory();\n            this.symmetricKeys.clearInMemory();\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.asymmetricKeys.clearPersistent()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , true];\n\n          case 3:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof Error) {\n              this.logger.error(\"Clearing keystore failed with error: \" + e_1.message);\n            } else {\n              this.logger.error(\"Clearing keystore failed with unknown error\");\n            }\n\n            return [2\n            /*return*/\n            , false];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return CryptoKeyStore;\n}();\n\nexport { CryptoKeyStore, CryptoKeyStoreNames };","map":{"version":3,"mappings":";;;;;AAAA;;;;;IASYA;;AAAZ,WAAYA,mBAAZ,EAA+B;EAC3BA;EACAA;AACH,CAHD,EAAYA,mBAAmB,KAAnBA,mBAAmB,MAA/B;AAIA;;;;;;;;EAQI,wBAAYC,MAAZ,EAA0B;IACtB,KAAKA,MAAL,GAAcA,MAAd;IACA,KAAKC,cAAL,GAAsB,IAAIC,kBAAJ,CAAsC,KAAKF,MAA3C,EAAmDD,mBAAmB,CAACE,cAAvE,CAAtB;IACA,KAAKE,aAAL,GAAqB,IAAID,kBAAJ,CAAkC,KAAKF,MAAvC,EAA+CD,mBAAmB,CAACI,aAAnE,CAArB;EACH;;EAEKC,iCAAN;;;;;;;YAEI,KAAKH,cAAL,CAAoBI,aAApB;YACH,KAAKF,aAAL,CAAmBE,aAAnB;;;;;;YAOO;YAAA;YAAA,EAAM,KAAKJ,cAAL,CAAoBK,eAApB,EAAN;;;YAAAC;;YACA;YAAA;YAAA,EAAO,IAAP;;;;;YAEA,IAAIC,GAAC,YAAYC,KAAjB,EAAwB;cACpB,KAAKT,MAAL,CAAYU,KAAZ,CAAkB,0CAAwCF,GAAC,CAACG,OAA5D;YACH,CAFD,MAEO;cACH,KAAKX,MAAL,CAAYU,KAAZ,CAAkB,6CAAlB;YACH;;YAED;YAAA;YAAA,EAAO,KAAP;;;;;;;;;EAEP,CArBK;;EAsBV;AAAC","names":["CryptoKeyStoreNames","logger","asymmetricKeys","AsyncMemoryStorage","symmetricKeys","CryptoKeyStore","clearInMemory","clearPersistent","_a","e_1","Error","error","message"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-browser/src/cache/CryptoKeyStore.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Logger } from \"@azure/msal-common\";\r\nimport { CachedKeyPair } from \"../crypto/CryptoOps\";\r\nimport { AsyncMemoryStorage } from \"./AsyncMemoryStorage\";\r\n\r\nexport enum CryptoKeyStoreNames {\r\n    asymmetricKeys = \"asymmetricKeys\",\r\n    symmetricKeys = \"symmetricKeys\"\r\n}\r\n/**\r\n * MSAL CryptoKeyStore DB Version 2\r\n */\r\nexport class CryptoKeyStore {\r\n    public asymmetricKeys: AsyncMemoryStorage<CachedKeyPair>;\r\n    public symmetricKeys: AsyncMemoryStorage<CryptoKey>;\r\n    public logger: Logger;\r\n\r\n    constructor(logger: Logger){\r\n        this.logger = logger;\r\n        this.asymmetricKeys = new AsyncMemoryStorage<CachedKeyPair>(this.logger, CryptoKeyStoreNames.asymmetricKeys);\r\n        this.symmetricKeys = new AsyncMemoryStorage<CryptoKey>(this.logger, CryptoKeyStoreNames.symmetricKeys);\r\n    }\r\n\r\n    async clear(): Promise<boolean> {\r\n        // Delete in-memory keystores\r\n        this.asymmetricKeys.clearInMemory();\r\n\t    this.symmetricKeys.clearInMemory();\r\n\t\t\r\n        /**\r\n         * There is only one database, so calling clearPersistent on asymmetric keystore takes care of\r\n         * every persistent keystore\r\n         */\r\n        try {\r\n            await this.asymmetricKeys.clearPersistent();\r\n            return true;\r\n        } catch (e) {\r\n            if (e instanceof Error) {\r\n                this.logger.error(`Clearing keystore failed with error: ${e.message}`);\r\n            } else {\r\n                this.logger.error(\"Clearing keystore failed with unknown error\");\r\n            }\r\n            \r\n            return false;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}