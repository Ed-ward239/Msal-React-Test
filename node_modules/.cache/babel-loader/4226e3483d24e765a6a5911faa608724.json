{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { AuthToken, CacheRecord, Authority, AccountEntity, IdTokenEntity, ScopeSet, AccessTokenEntity, RefreshTokenEntity, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Token cache manager\r\n */\n\nvar TokenCache =\n/** @class */\nfunction () {\n  function TokenCache(configuration, storage, logger, cryptoObj) {\n    this.isBrowserEnvironment = typeof window !== \"undefined\";\n    this.config = configuration;\n    this.storage = storage;\n    this.logger = logger;\n    this.cryptoObj = cryptoObj;\n  } // Move getAllAccounts here and cache utility APIs\n\n  /**\r\n   * API to load tokens to msal-browser cache.\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   * @returns `AuthenticationResult` for the response that was loaded.\r\n   */\n\n\n  TokenCache.prototype.loadExternalTokens = function (request, response, options) {\n    this.logger.info(\"TokenCache - loadExternalTokens called\");\n\n    if (!response.id_token) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\n    }\n\n    var idToken = new AuthToken(response.id_token, this.cryptoObj);\n    var cacheRecord;\n    var authority;\n\n    if (request.account) {\n      var cacheRecordAccount = this.loadAccount(idToken, request.account.environment, undefined, undefined, request.account.homeAccountId);\n      cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment));\n    } else if (request.authority) {\n      var authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\n      var authorityOptions = {\n        protocolMode: this.config.auth.protocolMode,\n        knownAuthorities: this.config.auth.knownAuthorities,\n        cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n        authorityMetadata: this.config.auth.authorityMetadata,\n        skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n      };\n      authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger); // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n\n      if (options.clientInfo) {\n        this.logger.trace(\"TokenCache - homeAccountId from options\");\n        var cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, options.clientInfo, authority.authorityType);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else if (response.client_info) {\n        this.logger.trace(\"TokenCache - homeAccountId from response\");\n        var cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, response.client_info, authority.authorityType);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else {\n        throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\n      }\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\n    }\n\n    return this.generateAuthenticationResult(request, idToken, cacheRecord, authority);\n  };\n  /**\r\n   * Helper function to load account to msal-browser cache\r\n   * @param idToken\r\n   * @param environment\r\n   * @param clientInfo\r\n   * @param authorityType\r\n   * @param requestHomeAccountId\r\n   * @returns `AccountEntity`\r\n   */\n\n\n  TokenCache.prototype.loadAccount = function (idToken, environment, clientInfo, authorityType, requestHomeAccountId) {\n    var homeAccountId;\n\n    if (requestHomeAccountId) {\n      homeAccountId = requestHomeAccountId;\n    } else if (authorityType !== undefined && clientInfo) {\n      homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authorityType, this.logger, this.cryptoObj, idToken);\n    }\n\n    if (!homeAccountId) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Unexpected missing homeAccountId\");\n    }\n\n    var accountEntity = clientInfo ? AccountEntity.createAccount(clientInfo, homeAccountId, idToken, undefined, undefined, undefined, environment) : AccountEntity.createGenericAccount(homeAccountId, idToken, undefined, undefined, undefined, environment);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading account\");\n      this.storage.setAccount(accountEntity);\n      return accountEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load id tokens to msal-browser cache\r\n   * @param idToken\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `IdTokenEntity`\r\n   */\n\n\n  TokenCache.prototype.loadIdToken = function (idToken, homeAccountId, environment, tenantId) {\n    var idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken.rawToken, this.config.auth.clientId, tenantId);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading id token\");\n      this.storage.setIdTokenCredential(idTokenEntity);\n      return idTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load access tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `AccessTokenEntity`\r\n   */\n\n\n  TokenCache.prototype.loadAccessToken = function (request, response, homeAccountId, environment, tenantId, options) {\n    if (!response.access_token) {\n      this.logger.verbose(\"TokenCache - No access token provided for caching\");\n      return null;\n    }\n\n    if (!response.expires_in) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\n    }\n\n    if (!options.extendedExpiresOn) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\n    }\n\n    var scopes = new ScopeSet(request.scopes).printScopes();\n    var expiresOn = options.expiresOn || response.expires_in + new Date().getTime() / 1000;\n    var extendedExpiresOn = options.extendedExpiresOn;\n    var accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading access token\");\n      this.storage.setAccessTokenCredential(accessTokenEntity);\n      return accessTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load refresh tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @returns `RefreshTokenEntity`\r\n   */\n\n\n  TokenCache.prototype.loadRefreshToken = function (request, response, homeAccountId, environment) {\n    if (!response.refresh_token) {\n      this.logger.verbose(\"TokenCache - No refresh token provided for caching\");\n      return null;\n    }\n\n    var refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading refresh token\");\n      this.storage.setRefreshTokenCredential(refreshTokenEntity);\n      return refreshTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to generate an `AuthenticationResult` for the result.\r\n   * @param request\r\n   * @param idTokenObj\r\n   * @param cacheRecord\r\n   * @param authority\r\n   * @returns `AuthenticationResult`\r\n   */\n\n\n  TokenCache.prototype.generateAuthenticationResult = function (request, idTokenObj, cacheRecord, authority) {\n    var _a, _b, _c;\n\n    var accessToken = Constants.EMPTY_STRING;\n    var responseScopes = [];\n    var expiresOn = null;\n    var extExpiresOn;\n\n    if (cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) {\n      accessToken = cacheRecord.accessToken.secret;\n      responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n      expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n      extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n    }\n\n    var uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;\n    var tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;\n    return {\n      authority: authority ? authority.canonicalAuthority : Constants.EMPTY_STRING,\n      uniqueId: uid,\n      tenantId: tid,\n      scopes: responseScopes,\n      account: (cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) ? cacheRecord.account.getAccountInfo() : null,\n      idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n      idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n      accessToken: accessToken,\n      fromCache: true,\n      expiresOn: expiresOn,\n      correlationId: request.correlationId || Constants.EMPTY_STRING,\n      requestId: Constants.EMPTY_STRING,\n      extExpiresOn: extExpiresOn,\n      familyId: Constants.EMPTY_STRING,\n      tokenType: ((_a = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,\n      state: Constants.EMPTY_STRING,\n      cloudGraphHostName: ((_b = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants.EMPTY_STRING,\n      msGraphHost: ((_c = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants.EMPTY_STRING,\n      code: undefined,\n      fromNativeBroker: false\n    };\n  };\n\n  return TokenCache;\n}();\n\nexport { TokenCache };","map":{"version":3,"mappings":"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","names":["configuration","storage","logger","cryptoObj","isBrowserEnvironment","window","config","TokenCache","request","response","options","info","id_token","BrowserAuthError","createUnableToLoadTokenError","idToken","AuthToken","cacheRecord","authority","account","cacheRecordAccount","loadAccount","environment","undefined","homeAccountId","CacheRecord","loadIdToken","tenantId","loadAccessToken","loadRefreshToken","authorityUrl","Authority","generateAuthority","azureCloudOptions","authorityOptions","protocolMode","auth","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","system","networkClient","clientInfo","trace","hostnameAndPort","authorityType","tenant","client_info","generateAuthenticationResult","requestHomeAccountId","AccountEntity","generateHomeAccountId","accountEntity","createAccount","createGenericAccount","verbose","setAccount","idTokenEntity","IdTokenEntity","createIdTokenEntity","rawToken","clientId","setIdTokenCredential","access_token","expires_in","extendedExpiresOn","scopes","ScopeSet","printScopes","expiresOn","Date","getTime","accessTokenEntity","AccessTokenEntity","createAccessTokenEntity","setAccessTokenCredential","refresh_token","refreshTokenEntity","RefreshTokenEntity","createRefreshTokenEntity","setRefreshTokenCredential","idTokenObj","accessToken","Constants","EMPTY_STRING","responseScopes","extExpiresOn","secret","fromString","target","asArray","Number","uid","claims","oid","sub","tid","canonicalAuthority","uniqueId","getAccountInfo","idTokenClaims","fromCache","correlationId","requestId","familyId","tokenType","_a","state","cloudGraphHostName","_b","msGraphHost","_c","code","fromNativeBroker"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-browser/src/cache/TokenCache.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccessTokenEntity, ICrypto, IdTokenEntity, Logger, ScopeSet, Authority, AuthorityOptions, ExternalTokenResponse, AccountEntity, AuthToken, RefreshTokenEntity , AuthorityType, CacheRecord, AuthenticationResult, Constants } from \"@azure/msal-common\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { BrowserCacheManager } from \"./BrowserCacheManager\";\r\nimport { ITokenCache } from \"./ITokenCache\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\n\r\nexport type LoadTokenOptions = {\r\n    clientInfo?: string,\r\n    expiresOn?: number,\r\n    extendedExpiresOn?: number\r\n};\r\n\r\n/**\r\n * Token cache manager\r\n */\r\nexport class TokenCache implements ITokenCache {\r\n    // Flag to indicate if in browser environment\r\n    public isBrowserEnvironment: boolean;\r\n    // Input configuration by developer/user\r\n    protected config: BrowserConfiguration;\r\n    // Browser cache storage\r\n    private storage: BrowserCacheManager;\r\n    // Logger\r\n    private logger: Logger;\r\n    // Crypto class\r\n    private cryptoObj: ICrypto;\r\n\r\n    constructor(configuration: BrowserConfiguration, storage: BrowserCacheManager, logger: Logger, cryptoObj: ICrypto) {\r\n        this.isBrowserEnvironment = typeof window !== \"undefined\";\r\n        this.config = configuration;\r\n        this.storage = storage;\r\n        this.logger = logger;\r\n        this.cryptoObj = cryptoObj;\r\n    }\r\n\r\n    // Move getAllAccounts here and cache utility APIs\r\n\r\n    /**\r\n     * API to load tokens to msal-browser cache.\r\n     * @param request\r\n     * @param response\r\n     * @param options\r\n     * @returns `AuthenticationResult` for the response that was loaded.\r\n     */\r\n    loadExternalTokens(request: SilentRequest, response: ExternalTokenResponse, options: LoadTokenOptions): AuthenticationResult {\r\n        this.logger.info(\"TokenCache - loadExternalTokens called\");\r\n\r\n        if (!response.id_token) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\r\n        }\r\n\r\n        const idToken = new AuthToken(response.id_token, this.cryptoObj);\r\n\r\n        let cacheRecord: CacheRecord | undefined;\r\n        let authority: Authority | undefined;\r\n\r\n        if (request.account) {\r\n            const cacheRecordAccount = this.loadAccount(idToken, request.account.environment, undefined, undefined, request.account.homeAccountId);\r\n            cacheRecord = new CacheRecord(\r\n                cacheRecordAccount,\r\n                this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId),\r\n                this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options),\r\n                this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment)\r\n            );\r\n        } else if (request.authority) {\r\n\r\n            const authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\r\n            const authorityOptions: AuthorityOptions = {\r\n                protocolMode: this.config.auth.protocolMode,\r\n                knownAuthorities: this.config.auth.knownAuthorities,\r\n                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\r\n                authorityMetadata: this.config.auth.authorityMetadata,\r\n                skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache,\r\n            };\r\n            authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger);\r\n\r\n            // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\r\n            if (options.clientInfo) {\r\n                this.logger.trace(\"TokenCache - homeAccountId from options\");\r\n                const cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, options.clientInfo, authority.authorityType);\r\n                cacheRecord = new CacheRecord(\r\n                    cacheRecordAccount,\r\n                    this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant),\r\n                    this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options),\r\n                    this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort)\r\n                );\r\n            } else if (response.client_info) {\r\n                this.logger.trace(\"TokenCache - homeAccountId from response\");\r\n                const cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, response.client_info, authority.authorityType);\r\n                cacheRecord = new CacheRecord(\r\n                    cacheRecordAccount,\r\n                    this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant),\r\n                    this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options),\r\n                    this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort)\r\n                );\r\n            } else {\r\n                throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\r\n            }\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\r\n        }\r\n\r\n        return this.generateAuthenticationResult(request, idToken, cacheRecord, authority);\r\n    }\r\n\r\n    /**\r\n     * Helper function to load account to msal-browser cache\r\n     * @param idToken\r\n     * @param environment\r\n     * @param clientInfo\r\n     * @param authorityType\r\n     * @param requestHomeAccountId\r\n     * @returns `AccountEntity`\r\n     */\r\n    private loadAccount(idToken: AuthToken, environment: string, clientInfo?: string, authorityType?: AuthorityType, requestHomeAccountId?: string): AccountEntity {\r\n\r\n        let homeAccountId;\r\n        if (requestHomeAccountId) {\r\n            homeAccountId = requestHomeAccountId;\r\n        } else if (authorityType !== undefined && clientInfo) {\r\n            homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authorityType, this.logger, this.cryptoObj, idToken);\r\n        }\r\n\r\n        if (!homeAccountId) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Unexpected missing homeAccountId\");\r\n        }\r\n\r\n        const accountEntity = clientInfo ?\r\n            AccountEntity.createAccount(clientInfo, homeAccountId, idToken, undefined, undefined, undefined, environment) :\r\n            AccountEntity.createGenericAccount(homeAccountId, idToken, undefined, undefined, undefined, environment);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading account\");\r\n\r\n            this.storage.setAccount(accountEntity);\r\n            return accountEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to load id tokens to msal-browser cache\r\n     * @param idToken\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `IdTokenEntity`\r\n     */\r\n    private loadIdToken(idToken: AuthToken, homeAccountId: string, environment: string, tenantId: string): IdTokenEntity {\r\n\r\n        const idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken.rawToken, this.config.auth.clientId, tenantId);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading id token\");\r\n            this.storage.setIdTokenCredential(idTokenEntity);\r\n            return idTokenEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to load access tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `AccessTokenEntity`\r\n     */\r\n    private loadAccessToken(request: SilentRequest, response: ExternalTokenResponse, homeAccountId: string, environment: string, tenantId: string, options: LoadTokenOptions): AccessTokenEntity | null {\r\n\r\n        if (!response.access_token) {\r\n            this.logger.verbose(\"TokenCache - No access token provided for caching\");\r\n            return null;\r\n        }\r\n\r\n        if (!response.expires_in) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\r\n        }\r\n\r\n        if (!options.extendedExpiresOn) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\r\n        }\r\n\r\n        const scopes = new ScopeSet(request.scopes).printScopes();\r\n        const expiresOn = options.expiresOn || (response.expires_in + new Date().getTime() / 1000);\r\n        const extendedExpiresOn = options.extendedExpiresOn;\r\n\r\n        const accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading access token\");\r\n            this.storage.setAccessTokenCredential(accessTokenEntity);\r\n            return accessTokenEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to load refresh tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @returns `RefreshTokenEntity`\r\n     */\r\n    private loadRefreshToken(request: SilentRequest, response: ExternalTokenResponse, homeAccountId: string, environment: string): RefreshTokenEntity | null {\r\n\r\n        if (!response.refresh_token) {\r\n            this.logger.verbose(\"TokenCache - No refresh token provided for caching\");\r\n            return null;\r\n        }\r\n\r\n        const refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading refresh token\");\r\n            this.storage.setRefreshTokenCredential(refreshTokenEntity);\r\n            return refreshTokenEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to generate an `AuthenticationResult` for the result.\r\n     * @param request\r\n     * @param idTokenObj\r\n     * @param cacheRecord\r\n     * @param authority\r\n     * @returns `AuthenticationResult`\r\n     */\r\n    private generateAuthenticationResult(\r\n        request: SilentRequest,\r\n        idTokenObj: AuthToken,\r\n        cacheRecord?: CacheRecord,\r\n        authority?: Authority,\r\n    ): AuthenticationResult {\r\n        let accessToken: string = Constants.EMPTY_STRING;\r\n        let responseScopes: Array<string> = [];\r\n        let expiresOn: Date | null = null;\r\n        let extExpiresOn: Date | undefined;\r\n\r\n        if (cacheRecord?.accessToken) {\r\n            accessToken = cacheRecord.accessToken.secret;\r\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\r\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\r\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\r\n        }\r\n\r\n        const uid = idTokenObj?.claims.oid || idTokenObj?.claims.sub || Constants.EMPTY_STRING;\r\n        const tid = idTokenObj?.claims.tid || Constants.EMPTY_STRING;\r\n\r\n        return {\r\n            authority: authority ? authority.canonicalAuthority : Constants.EMPTY_STRING,\r\n            uniqueId: uid,\r\n            tenantId: tid,\r\n            scopes: responseScopes,\r\n            account: cacheRecord?.account ? cacheRecord.account.getAccountInfo() : null,\r\n            idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\r\n            idTokenClaims: idTokenObj ? idTokenObj.claims : {},\r\n            accessToken: accessToken,\r\n            fromCache: true,\r\n            expiresOn: expiresOn,\r\n            correlationId: request.correlationId || Constants.EMPTY_STRING,\r\n            requestId: Constants.EMPTY_STRING,\r\n            extExpiresOn: extExpiresOn,\r\n            familyId: Constants.EMPTY_STRING,\r\n            tokenType: cacheRecord?.accessToken?.tokenType || Constants.EMPTY_STRING,\r\n            state: Constants.EMPTY_STRING,\r\n            cloudGraphHostName: cacheRecord?.account?.cloudGraphHostName || Constants.EMPTY_STRING,\r\n            msGraphHost: cacheRecord?.account?.msGraphHost || Constants.EMPTY_STRING,\r\n            code: undefined,\r\n            fromNativeBroker: false\r\n        };\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}