{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { UrlString, AuthError, PerformanceEvents, Constants, ThrottlingUtils, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { TemporaryCacheKeys, ApiId, InteractionType } from '../utils/BrowserConstants.js';\nimport { RedirectHandler } from '../interaction_handler/RedirectHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RedirectClient =\n/** @class */\nfunction (_super) {\n  __extends(RedirectClient, _super);\n\n  function RedirectClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Redirects the page to the /authorize endpoint of the IDP\r\n   * @param request\r\n   */\n\n\n  RedirectClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validRequest, serverTelemetryManager, handleBackButton, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(request, InteractionType.Redirect)];\n\n          case 1:\n            validRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\n\n            handleBackButton = function (event) {\n              // Clear temporary cache if the back button is clicked during the redirect flow.\n              if (event.persisted) {\n                _this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\n\n                _this.browserStorage.cleanRequestByState(validRequest.state);\n              }\n            };\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 7,, 8]); // Create auth code request and generate PKCE params\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(validRequest)];\n\n          case 3:\n            authCodeRequest = _a.sent(); // Initialize the client\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\n\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto, this.performanceClient);\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(__assign(__assign({}, validRequest), {\n              nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme)\n            }))];\n\n          case 5:\n            navigateUrl = _a.sent();\n            redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n            this.logger.verbosePii(\"Redirect start page: \" + redirectStartPage); // Clear temporary cache if the back button is clicked during the redirect flow.\n\n            window.addEventListener(\"pageshow\", handleBackButton);\n            return [4\n            /*yield*/\n            , interactionHandler.initiateAuthRequest(navigateUrl, {\n              navigationClient: this.navigationClient,\n              redirectTimeout: this.config.system.redirectNavigationTimeout,\n              redirectStartPage: redirectStartPage,\n              onRedirectNavigate: request.onRedirectNavigate\n            })];\n\n          case 6:\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 7:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            window.removeEventListener(\"pageshow\", handleBackButton);\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e_1;\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Checks if navigateToLoginRequestUrl is set, and:\r\n   * - if true, performs logic to cache and navigate\r\n   * - if false, handles hash string and parses response\r\n   * @param hash\r\n   */\n\n\n  RedirectClient.prototype.handleRedirectPromise = function (hash) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, responseHash, state, serverParams, loginRequestUrl, loginRequestUrlNormalized, currentUrlNormalized, handleHashResult, navigationOptions, processHashOnRedirect, homepage, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n              this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n              return [2\n              /*return*/\n              , null];\n            }\n\n            responseHash = this.getRedirectResponseHash(hash || window.location.hash);\n\n            if (!responseHash) {\n              // Not a recognized server response hash or hash not associated with a redirect request\n              this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            state = void 0;\n\n            try {\n              serverParams = UrlString.getDeserializedHash(responseHash);\n              state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Redirect);\n              this.logger.verbose(\"State extracted from hash\");\n            } catch (e) {\n              this.logger.info(\"handleRedirectPromise was unable to extract state due to: \" + e);\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || Constants.EMPTY_STRING;\n            loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\n            currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\n            if (!(loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl)) return [3\n            /*break*/\n            , 3]; // We are on the page we need to navigate to - handle hash\n\n            this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\n            return [4\n            /*yield*/\n            , this.handleHash(responseHash, state, serverTelemetryManager)];\n\n          case 2:\n            handleHashResult = _a.sent();\n\n            if (loginRequestUrl.indexOf(\"#\") > -1) {\n              // Replace current hash with non-msal hash, if present\n              BrowserUtils.replaceHash(loginRequestUrl);\n            }\n\n            return [2\n            /*return*/\n            , handleHashResult];\n\n          case 3:\n            if (!!this.config.auth.navigateToLoginRequestUrl) return [3\n            /*break*/\n            , 4];\n            this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\n            return [2\n            /*return*/\n            , this.handleHash(responseHash, state, serverTelemetryManager)];\n\n          case 4:\n            if (!(!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe)) return [3\n            /*break*/\n            , 9];\n            /*\r\n             * Returned from authority using redirect - need to perform navigation before processing response\r\n             * Cache the hash to be retrieved after the next redirect\r\n             */\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\n            navigationOptions = {\n              apiId: ApiId.handleRedirectPromise,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: true\n            };\n            processHashOnRedirect = true;\n            if (!(!loginRequestUrl || loginRequestUrl === \"null\")) return [3\n            /*break*/\n            , 6];\n            homepage = BrowserUtils.getHomepage(); // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n            this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateInternal(homepage, navigationOptions)];\n\n          case 5:\n            processHashOnRedirect = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            // Navigate to page that initiated the redirect request\n            this.logger.verbose(\"Navigating to loginRequestUrl: \" + loginRequestUrl);\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions)];\n\n          case 7:\n            processHashOnRedirect = _a.sent();\n            _a.label = 8;\n\n          case 8:\n            // If navigateInternal implementation returns false, handle the hash now\n            if (!processHashOnRedirect) {\n              return [2\n              /*return*/\n              , this.handleHash(responseHash, state, serverTelemetryManager)];\n            }\n\n            _a.label = 9;\n\n          case 9:\n            return [2\n            /*return*/\n            , null];\n\n          case 10:\n            e_2 = _a.sent();\n\n            if (e_2 instanceof AuthError) {\n              e_2.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_2);\n            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n            throw e_2;\n\n          case 11:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets the response hash for a redirect request\r\n   * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n   * @param hash\r\n   */\n\n\n  RedirectClient.prototype.getRedirectResponseHash = function (hash) {\n    this.logger.verbose(\"getRedirectResponseHash called\"); // Get current location hash from window or cache.\n\n    var isResponseHash = UrlString.hashContainsKnownProperties(hash);\n\n    if (isResponseHash) {\n      BrowserUtils.clearHash(window);\n      this.logger.verbose(\"Hash contains known properties, returning response hash\");\n      return hash;\n    }\n\n    var cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\n    this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n    return cachedHash;\n  };\n  /**\r\n   * Checks if hash exists and handles in window.\r\n   * @param hash\r\n   * @param state\r\n   */\n\n\n  RedirectClient.prototype.handleHash = function (hash, state, serverTelemetryManager) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedRequest, serverParams, nativeInteractionClient, userRequestState, currentAuthority, authClient, interactionHandler;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\n            this.logger.verbose(\"handleHash called, retrieved cached request\");\n            serverParams = UrlString.getDeserializedHash(hash);\n\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, cachedRequest.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state).userRequestState;\n              return [2\n              /*return*/\n              , nativeInteractionClient.acquireToken(__assign(__assign({}, cachedRequest), {\n                state: userRequestState,\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state);\n              })];\n            }\n\n            currentAuthority = this.browserStorage.getCachedAuthority(state);\n\n            if (!currentAuthority) {\n              throw BrowserAuthError.createNoCachedAuthorityError();\n            }\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, cachedRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, currentAuthority)];\n\n          case 1:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto, this.performanceClient);\n            return [4\n            /*yield*/\n            , interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param logoutRequest\r\n   */\n\n\n  RedirectClient.prototype.logout = function (logoutRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validLogoutRequest, serverTelemetryManager, navigationOptions, authClient, logoutUri, navigate, e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"logoutRedirect called\");\n            validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest); // Clear cache on logout\n\n            return [4\n            /*yield*/\n            , this.clearCacheOnLogout(validLogoutRequest.account)];\n\n          case 2:\n            // Clear cache on logout\n            _a.sent();\n\n            navigationOptions = {\n              apiId: ApiId.logout,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: false\n            };\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validLogoutRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority)];\n\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            logoutUri = authClient.getLogoutUri(validLogoutRequest);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n            if (!(logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\")) return [3\n            /*break*/\n            , 7];\n            navigate = logoutRequest.onRedirectNavigate(logoutUri);\n            if (!(navigate !== false)) return [3\n            /*break*/\n            , 5];\n            this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\"); // Ensure interaction is in progress\n\n            if (!this.browserStorage.getInteractionInProgress()) {\n              this.browserStorage.setInteractionInProgress(true);\n            }\n\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 5:\n            // Ensure interaction is not in progress\n            this.browserStorage.setInteractionInProgress(false);\n            this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n            _a.label = 6;\n\n          case 6:\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            // Ensure interaction is in progress\n            if (!this.browserStorage.getInteractionInProgress()) {\n              this.browserStorage.setInteractionInProgress(true);\n            }\n\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n\n          case 8:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 9:\n            return [3\n            /*break*/\n            , 11];\n\n          case 10:\n            e_3 = _a.sent();\n\n            if (e_3 instanceof AuthError) {\n              e_3.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            throw e_3;\n\n          case 11:\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to get the redirectStartPage either from request or use current window\r\n   * @param requestStartPage\r\n   */\n\n\n  RedirectClient.prototype.getRedirectStartPage = function (requestStartPage) {\n    var redirectStartPage = requestStartPage || window.location.href;\n    return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\n  };\n\n  return RedirectClient;\n}(StandardInteractionClient);\n\nexport { RedirectClient };","map":{"version":3,"mappings":"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","names":["__extends","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","_super","_this","nativeStorage","RedirectClient","request","setPreQueueTime","PerformanceEvents","StandardInteractionClientInitializeAuthorizationRequest","initializeAuthorizationRequest","InteractionType","Redirect","validRequest","_a","browserStorage","updateCacheEntries","state","nonce","authority","loginHint","Constants","EMPTY_STRING","account","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenRedirect","handleBackButton","event","persisted","verbose","cleanRequestByState","StandardInteractionClientInitializeAuthorizationCodeRequest","initializeAuthorizationCodeRequest","authCodeRequest","StandardInteractionClientCreateAuthCodeClient","createAuthCodeClient","azureCloudOptions","authClient","interactionHandler","RedirectHandler","getAuthCodeUrl","__assign","nativeBroker","NativeMessageHandler","isNativeAvailable","authenticationScheme","navigateUrl","redirectStartPage","getRedirectStartPage","verbosePii","window","addEventListener","initiateAuthRequest","redirectTimeout","system","redirectNavigationTimeout","onRedirectNavigate","e_1","AuthError","setCorrelationId","removeEventListener","cacheFailedRequest","hash","handleRedirectPromise","isInteractionInProgress","info","responseHash","getRedirectResponseHash","location","cleanRequestByInteractionType","serverParams","UrlString","getDeserializedHash","validateAndExtractStateFromHash","e","loginRequestUrl","getTemporaryCache","TemporaryCacheKeys","ORIGIN_URI","loginRequestUrlNormalized","removeHashFromUrl","currentUrlNormalized","href","auth","navigateToLoginRequestUrl","handleHash","handleHashResult","indexOf","BrowserUtils","replaceHash","isInIframe","allowRedirectInIframe","setTemporaryCache","URL_HASH","navigationOptions","apiId","timeout","noHistory","processHashOnRedirect","homepage","getHomepage","warning","navigateInternal","e_2","isResponseHash","hashContainsKnownProperties","clearHash","cachedHash","removeItem","generateCacheKey","cachedRequest","getCachedRequest","accountId","BrowserAuthError","createNativeConnectionNotEstablishedError","nativeInteractionClient","NativeInteractionClient","acquireTokenPopup","userRequestState","ProtocolUtils","parseRequestState","acquireToken","prompt","undefined","finally","currentAuthority","getCachedAuthority","createNoCachedAuthorityError","ThrottlingUtils","removeThrottle","clientId","handleCodeResponseFromHash","networkClient","logoutRequest","validLogoutRequest","initializeLogoutRequest","logout","emitEvent","EventType","LOGOUT_START","clearCacheOnLogout","logoutUri","getLogoutUri","LOGOUT_SUCCESS","navigate","getInteractionInProgress","setInteractionInProgress","navigateExternal","e_3","LOGOUT_FAILURE","LOGOUT_END","requestStartPage","getAbsoluteUrl","getCurrentUri","StandardInteractionClient"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-browser/src/interaction_client/RedirectClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthenticationResult, CommonAuthorizationCodeRequest, AuthorizationCodeClient, UrlString, AuthError, ServerTelemetryManager, Constants, ProtocolUtils, ServerAuthorizationCodeResponse, ThrottlingUtils, ICrypto, Logger, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { ApiId, InteractionType, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\r\nimport { RedirectHandler } from \"../interaction_handler/RedirectHandler\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\r\nimport { EventType } from \"../event/EventType\";\r\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\n\r\nexport class RedirectClient extends StandardInteractionClient {\r\n    protected nativeStorage: BrowserCacheManager;\r\n\r\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, performanceClient: IPerformanceClient, nativeStorageImpl: BrowserCacheManager, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\r\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\r\n        this.nativeStorage = nativeStorageImpl;\r\n    }\r\n\r\n    /**\r\n     * Redirects the page to the /authorize endpoint of the IDP\r\n     * @param request\r\n     */\r\n    async acquireToken(request: RedirectRequest): Promise<void> {\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\r\n        const validRequest = await this.initializeAuthorizationRequest(request, InteractionType.Redirect);\r\n        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\r\n\r\n        const handleBackButton = (event: PageTransitionEvent) => {\r\n            // Clear temporary cache if the back button is clicked during the redirect flow.\r\n            if (event.persisted) {\r\n                this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\r\n                this.browserStorage.cleanRequestByState(validRequest.state);\r\n            }\r\n        };\r\n\r\n        try {\r\n            // Create auth code request and generate PKCE params\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\r\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(validRequest);\r\n\r\n            // Initialize the client\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\r\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            // Create redirect interaction handler.\r\n            const interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto, this.performanceClient);\r\n\r\n            // Create acquire token url.\r\n            const navigateUrl = await authClient.getAuthCodeUrl({\r\n                ...validRequest,\r\n                nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme)\r\n            });\r\n\r\n            const redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\r\n            this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);\r\n\r\n            // Clear temporary cache if the back button is clicked during the redirect flow.\r\n            window.addEventListener(\"pageshow\", handleBackButton);\r\n\r\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\r\n            return await interactionHandler.initiateAuthRequest(navigateUrl, {\r\n                navigationClient: this.navigationClient,\r\n                redirectTimeout: this.config.system.redirectNavigationTimeout,\r\n                redirectStartPage: redirectStartPage,\r\n                onRedirectNavigate: request.onRedirectNavigate\r\n            });\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                e.setCorrelationId(this.correlationId);\r\n            }\r\n            window.removeEventListener(\"pageshow\", handleBackButton);\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.browserStorage.cleanRequestByState(validRequest.state);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if navigateToLoginRequestUrl is set, and:\r\n     * - if true, performs logic to cache and navigate\r\n     * - if false, handles hash string and parses response\r\n     * @param hash\r\n     */\r\n    async handleRedirectPromise(hash?: string): Promise<AuthenticationResult | null> {\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\r\n        try {\r\n            if (!this.browserStorage.isInteractionInProgress(true)) {\r\n                this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\r\n                return null;\r\n            }\r\n\r\n            const responseHash = this.getRedirectResponseHash(hash || window.location.hash);\r\n            if (!responseHash) {\r\n                // Not a recognized server response hash or hash not associated with a redirect request\r\n                this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\r\n                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\r\n                return null;\r\n            }\r\n\r\n            let state: string;\r\n            try {\r\n                // Deserialize hash fragment response parameters.\r\n                const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(responseHash);\r\n                state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Redirect);\r\n                this.logger.verbose(\"State extracted from hash\");\r\n            } catch (e) {\r\n                this.logger.info(`handleRedirectPromise was unable to extract state due to: ${e}`);\r\n                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\r\n                return null;\r\n            }\r\n\r\n            // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated\r\n            const loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || Constants.EMPTY_STRING;\r\n            const loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\r\n            const currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\r\n\r\n            if (loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl) {\r\n                // We are on the page we need to navigate to - handle hash\r\n                this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\r\n                const handleHashResult = await this.handleHash(responseHash, state, serverTelemetryManager);\r\n\r\n                if (loginRequestUrl.indexOf(\"#\") > -1) {\r\n                    // Replace current hash with non-msal hash, if present\r\n                    BrowserUtils.replaceHash(loginRequestUrl);\r\n                }\r\n\r\n                return handleHashResult;\r\n            } else if (!this.config.auth.navigateToLoginRequestUrl) {\r\n                this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\r\n                return this.handleHash(responseHash, state, serverTelemetryManager);\r\n            } else if (!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe) {\r\n                /*\r\n                 * Returned from authority using redirect - need to perform navigation before processing response\r\n                 * Cache the hash to be retrieved after the next redirect\r\n                 */\r\n                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\r\n                const navigationOptions: NavigationOptions = {\r\n                    apiId: ApiId.handleRedirectPromise,\r\n                    timeout: this.config.system.redirectNavigationTimeout,\r\n                    noHistory: true\r\n                };\r\n\r\n                /**\r\n                 * Default behavior is to redirect to the start page and not process the hash now.\r\n                 * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.\r\n                 */\r\n                let processHashOnRedirect: boolean = true;\r\n                if (!loginRequestUrl || loginRequestUrl === \"null\") {\r\n                    // Redirect to home page if login request url is null (real null or the string null)\r\n                    const homepage = BrowserUtils.getHomepage();\r\n                    // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\r\n                    this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\r\n                    this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\r\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(homepage, navigationOptions);\r\n                } else {\r\n                    // Navigate to page that initiated the redirect request\r\n                    this.logger.verbose(`Navigating to loginRequestUrl: ${loginRequestUrl}`);\r\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions);\r\n                }\r\n\r\n                // If navigateInternal implementation returns false, handle the hash now\r\n                if (!processHashOnRedirect) {\r\n                    return this.handleHash(responseHash, state, serverTelemetryManager);\r\n                }\r\n            }\r\n\r\n            return null;\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the response hash for a redirect request\r\n     * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n     * @param hash\r\n     */\r\n    protected getRedirectResponseHash(hash: string): string | null {\r\n        this.logger.verbose(\"getRedirectResponseHash called\");\r\n        // Get current location hash from window or cache.\r\n        const isResponseHash: boolean = UrlString.hashContainsKnownProperties(hash);\r\n\r\n        if (isResponseHash) {\r\n            BrowserUtils.clearHash(window);\r\n            this.logger.verbose(\"Hash contains known properties, returning response hash\");\r\n            return hash;\r\n        }\r\n\r\n        const cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\r\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\r\n\r\n        this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\r\n        return cachedHash;\r\n    }\r\n\r\n    /**\r\n     * Checks if hash exists and handles in window.\r\n     * @param hash\r\n     * @param state\r\n     */\r\n    protected async handleHash(hash: string, state: string, serverTelemetryManager: ServerTelemetryManager): Promise<AuthenticationResult> {\r\n        const cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\r\n        this.logger.verbose(\"handleHash called, retrieved cached request\");\r\n\r\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\r\n\r\n        if (serverParams.accountId) {\r\n            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\r\n            if (!this.nativeMessageHandler) {\r\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\r\n            }\r\n            const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, cachedRequest.correlationId);\r\n            const { userRequestState } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\r\n            return nativeInteractionClient.acquireToken({\r\n                ...cachedRequest,\r\n                state: userRequestState,\r\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\r\n            }).finally(() => {\r\n                this.browserStorage.cleanRequestByState(state);\r\n            });\r\n        }\r\n\r\n        // Hash contains known properties - handle and return in callback\r\n        const currentAuthority = this.browserStorage.getCachedAuthority(state);\r\n        if (!currentAuthority) {\r\n            throw BrowserAuthError.createNoCachedAuthorityError();\r\n        }\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, cachedRequest.correlationId);\r\n        const authClient = await this.createAuthCodeClient(serverTelemetryManager, currentAuthority);\r\n        this.logger.verbose(\"Auth code client created\");\r\n        ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\r\n        const interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto, this.performanceClient);\r\n        return await interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\r\n    }\r\n\r\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param logoutRequest\r\n     */\r\n    async logout(logoutRequest?: EndSessionRequest): Promise<void> {\r\n        this.logger.verbose(\"logoutRedirect called\");\r\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\r\n\r\n        try {\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest);\r\n\r\n            // Clear cache on logout\r\n            await this.clearCacheOnLogout(validLogoutRequest.account);\r\n\r\n            const navigationOptions: NavigationOptions = {\r\n                apiId: ApiId.logout,\r\n                timeout: this.config.system.redirectNavigationTimeout,\r\n                noHistory: false\r\n            };\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validLogoutRequest.correlationId);\r\n            const authClient = await this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            // Create logout string and navigate user window to logout.\r\n            const logoutUri: string = authClient.getLogoutUri(validLogoutRequest);\r\n\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\r\n            // Check if onRedirectNavigate is implemented, and invoke it if so\r\n            if (logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\") {\r\n                const navigate = logoutRequest.onRedirectNavigate(logoutUri);\r\n\r\n                if (navigate !== false) {\r\n                    this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\r\n                    // Ensure interaction is in progress\r\n                    if (!this.browserStorage.getInteractionInProgress()) {\r\n                        this.browserStorage.setInteractionInProgress(true);\r\n                    }\r\n                    await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\r\n                    return;\r\n                } else {\r\n                    // Ensure interaction is not in progress\r\n                    this.browserStorage.setInteractionInProgress(false);\r\n                    this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\r\n                }\r\n            } else {\r\n                // Ensure interaction is in progress\r\n                if (!this.browserStorage.getInteractionInProgress()) {\r\n                    this.browserStorage.setInteractionInProgress(true);\r\n                }\r\n                await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\r\n                return;\r\n            }\r\n        } catch(e) {\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e);\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\r\n            throw e;\r\n        }\r\n\r\n        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\r\n    }\r\n\r\n    /**\r\n     * Use to get the redirectStartPage either from request or use current window\r\n     * @param requestStartPage\r\n     */\r\n    protected getRedirectStartPage(requestStartPage?: string): string {\r\n        const redirectStartPage = requestStartPage || window.location.href;\r\n        return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}