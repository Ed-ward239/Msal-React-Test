{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceClient } from '@azure/msal-common';\nimport { BrowserCrypto } from '../crypto/BrowserCrypto.js';\nimport { GuidGenerator } from '../crypto/GuidGenerator.js';\nimport { BrowserPerformanceMeasurement } from './BrowserPerformanceMeasurement.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar BrowserPerformanceClient =\n/** @class */\nfunction (_super) {\n  __extends(BrowserPerformanceClient, _super);\n\n  function BrowserPerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry, cryptoOptions) {\n    var _this = _super.call(this, clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) || this;\n\n    _this.browserCrypto = new BrowserCrypto(_this.logger, cryptoOptions);\n    _this.guidGenerator = new GuidGenerator(_this.browserCrypto);\n    return _this;\n  }\n\n  BrowserPerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {\n    return new BrowserPerformanceMeasurement(measureName, correlationId);\n  };\n\n  BrowserPerformanceClient.prototype.generateId = function () {\n    return this.guidGenerator.generateGuid();\n  };\n\n  BrowserPerformanceClient.prototype.getPageVisibility = function () {\n    var _a;\n\n    return ((_a = document.visibilityState) === null || _a === void 0 ? void 0 : _a.toString()) || null;\n  };\n\n  BrowserPerformanceClient.prototype.deleteIncompleteSubMeasurements = function (inProgressEvent) {\n    var rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\n    var isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\n    var incompleteMeasurements = [];\n\n    if (isRootEvent && (rootEvent === null || rootEvent === void 0 ? void 0 : rootEvent.incompleteSubMeasurements)) {\n      rootEvent.incompleteSubMeasurements.forEach(function (subMeasurement) {\n        incompleteMeasurements.push(__assign({}, subMeasurement));\n      });\n    } // Clean up remaining marks for incomplete sub-measurements\n\n\n    if (incompleteMeasurements.length > 0) {\n      BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\n    }\n  };\n\n  BrowserPerformanceClient.prototype.supportsBrowserPerformanceNow = function () {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.now === \"function\";\n  };\n  /**\r\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n   * Also captures browser page visibilityState.\r\n   *\r\n   * @param {PerformanceEvents} measureName\r\n   * @param {?string} [correlationId]\r\n   * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\r\n   */\n\n\n  BrowserPerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {\n    var _this = this; // Capture page visibilityState and then invoke start/end measurement\n\n\n    var startPageVisibility = this.getPageVisibility();\n\n    var inProgressEvent = _super.prototype.startMeasurement.call(this, measureName, correlationId);\n\n    return __assign(__assign({}, inProgressEvent), {\n      endMeasurement: function (event) {\n        var res = inProgressEvent.endMeasurement(__assign({\n          startPageVisibility: startPageVisibility,\n          endPageVisibility: _this.getPageVisibility()\n        }, event));\n\n        _this.deleteIncompleteSubMeasurements(inProgressEvent);\n\n        return res;\n      },\n      discardMeasurement: function () {\n        inProgressEvent.discardMeasurement();\n\n        _this.deleteIncompleteSubMeasurements(inProgressEvent);\n\n        inProgressEvent.measurement.flushMeasurement();\n      }\n    });\n  };\n  /**\r\n   * Adds pre-queue time to preQueueTimeByCorrelationId map.\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {?string} correlationId\r\n   * @returns\r\n   */\n\n\n  BrowserPerformanceClient.prototype.setPreQueueTime = function (eventName, correlationId) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for \" + eventName);\n      return;\n    }\n\n    if (!correlationId) {\n      this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to set telemetry queue time\");\n      return;\n    }\n\n    var preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n    /**\r\n     * Manually complete queue measurement if there is an incomplete pre-queue event.\r\n     * Incomplete pre-queue events are instrumentation bugs that should be fixed.\r\n     */\n\n    if (preQueueEvent) {\n      this.logger.trace(\"BrowserPerformanceClient: Incomplete pre-queue \" + preQueueEvent.name + \" found\", correlationId);\n      this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\n    }\n\n    this.preQueueTimeByCorrelationId.set(correlationId, {\n      name: eventName,\n      time: window.performance.now()\n    });\n  };\n  /**\r\n   * Calculates and adds queue time measurement for given performance event.\r\n   *\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {?string} correlationId\r\n   * @param {?number} queueTime\r\n   * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n   * @returns\r\n   */\n\n\n  BrowserPerformanceClient.prototype.addQueueMeasurement = function (eventName, correlationId, queueTime, manuallyCompleted) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to add queue measurement for \" + eventName);\n      return;\n    }\n\n    if (!correlationId) {\n      this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to add queue measurement\");\n      return;\n    }\n\n    var preQueueTime = _super.prototype.getPreQueueTime.call(this, eventName, correlationId);\n\n    if (!preQueueTime) {\n      return;\n    }\n\n    var currentTime = window.performance.now();\n\n    var resQueueTime = queueTime || _super.prototype.calculateQueuedTime.call(this, preQueueTime, currentTime);\n\n    return _super.prototype.addQueueMeasurement.call(this, eventName, correlationId, resQueueTime, manuallyCompleted);\n  };\n\n  return BrowserPerformanceClient;\n}(PerformanceClient);\n\nexport { BrowserPerformanceClient };","map":{"version":3,"mappings":"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","names":["__extends","clientId","authority","logger","libraryName","libraryVersion","applicationTelemetry","cryptoOptions","_super","_this","browserCrypto","BrowserCrypto","guidGenerator","GuidGenerator","BrowserPerformanceClient","measureName","correlationId","BrowserPerformanceMeasurement","generateGuid","visibilityState","_a","toString","inProgressEvent","rootEvent","eventsByCorrelationId","get","event","isRootEvent","eventId","incompleteMeasurements","incompleteSubMeasurements","forEach","subMeasurement","push","__assign","length","flushMeasurements","window","performance","now","startPageVisibility","getPageVisibility","startMeasurement","call","endMeasurement","res","endPageVisibility","deleteIncompleteSubMeasurements","discardMeasurement","measurement","flushMeasurement","eventName","supportsBrowserPerformanceNow","trace","preQueueEvent","preQueueTimeByCorrelationId","name","addQueueMeasurement","undefined","set","time","queueTime","manuallyCompleted","preQueueTime","getPreQueueTime","currentTime","resQueueTime","calculateQueuedTime","PerformanceClient"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-browser/src/telemetry/BrowserPerformanceClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    Logger,\r\n    PerformanceEvent,\r\n    PerformanceEvents,\r\n    IPerformanceClient,\r\n    PerformanceClient,\r\n    IPerformanceMeasurement,\r\n    InProgressPerformanceEvent,\r\n    ApplicationTelemetry,\r\n    SubMeasurement,\r\n    PreQueueEvent\r\n} from \"@azure/msal-common\";\r\nimport { CryptoOptions } from \"../config/Configuration\";\r\nimport { BrowserCrypto } from \"../crypto/BrowserCrypto\";\r\nimport { GuidGenerator } from \"../crypto/GuidGenerator\";\r\nimport { BrowserPerformanceMeasurement } from \"./BrowserPerformanceMeasurement\";\r\n\r\nexport class BrowserPerformanceClient extends PerformanceClient implements IPerformanceClient {\r\n    private browserCrypto: BrowserCrypto;\r\n    private guidGenerator: GuidGenerator;\r\n\r\n    constructor(clientId: string, authority: string, logger: Logger, libraryName: string, libraryVersion: string, applicationTelemetry: ApplicationTelemetry, cryptoOptions: CryptoOptions) {\r\n        super(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry);\r\n        this.browserCrypto = new BrowserCrypto(this.logger, cryptoOptions);\r\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\r\n    }\r\n\r\n    startPerformanceMeasuremeant(measureName: string, correlationId: string): IPerformanceMeasurement {\r\n        return new BrowserPerformanceMeasurement(measureName, correlationId);\r\n    }\r\n\r\n    generateId() : string {\r\n        return this.guidGenerator.generateGuid();\r\n    }\r\n\r\n    private getPageVisibility(): string | null {\r\n        return document.visibilityState?.toString() || null;\r\n    }\r\n\r\n    private deleteIncompleteSubMeasurements(inProgressEvent: InProgressPerformanceEvent): void {\r\n        const rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\r\n        const isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\r\n        const incompleteMeasurements: SubMeasurement[] = [];\r\n        if (isRootEvent && rootEvent?.incompleteSubMeasurements) {\r\n            rootEvent.incompleteSubMeasurements.forEach((subMeasurement) => {\r\n                incompleteMeasurements.push({...subMeasurement});\r\n            });\r\n        }\r\n        // Clean up remaining marks for incomplete sub-measurements\r\n        if (incompleteMeasurements.length > 0) {\r\n            BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\r\n        }\r\n    }\r\n\r\n    supportsBrowserPerformanceNow(): boolean {\r\n        return typeof window !== \"undefined\" &&\r\n            typeof window.performance !== \"undefined\" &&\r\n            typeof window.performance.now === \"function\";\r\n    }\r\n\r\n    /**\r\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n     * Also captures browser page visibilityState.\r\n     *\r\n     * @param {PerformanceEvents} measureName\r\n     * @param {?string} [correlationId]\r\n     * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\r\n     */\r\n    startMeasurement(measureName: PerformanceEvents, correlationId?: string): InProgressPerformanceEvent {\r\n        // Capture page visibilityState and then invoke start/end measurement\r\n        const startPageVisibility = this.getPageVisibility();\r\n\r\n        const inProgressEvent = super.startMeasurement(measureName, correlationId);\r\n\r\n        return {\r\n            ...inProgressEvent,\r\n            endMeasurement: (event?: Partial<PerformanceEvent>): PerformanceEvent | null => {\r\n                const res = inProgressEvent.endMeasurement({\r\n                    startPageVisibility,\r\n                    endPageVisibility: this.getPageVisibility(),\r\n                    ...event\r\n                });\r\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\r\n\r\n                return res;\r\n            },\r\n            discardMeasurement: () => {\r\n                inProgressEvent.discardMeasurement();\r\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\r\n                inProgressEvent.measurement.flushMeasurement();\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Adds pre-queue time to preQueueTimeByCorrelationId map.\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {?string} correlationId\r\n     * @returns\r\n     */\r\n    setPreQueueTime(eventName: PerformanceEvents, correlationId?: string): void {\r\n        if (!this.supportsBrowserPerformanceNow()) {\r\n            this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for ${eventName}`);\r\n            return;\r\n        }\r\n\r\n        if (!correlationId) {\r\n            this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to set telemetry queue time`);\r\n            return;\r\n        }\r\n\r\n        const preQueueEvent: PreQueueEvent | undefined = this.preQueueTimeByCorrelationId.get(correlationId);\r\n        /**\r\n         * Manually complete queue measurement if there is an incomplete pre-queue event.\r\n         * Incomplete pre-queue events are instrumentation bugs that should be fixed.\r\n         */\r\n        if (preQueueEvent) {\r\n            this.logger.trace(`BrowserPerformanceClient: Incomplete pre-queue ${preQueueEvent.name} found`, correlationId);\r\n            this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\r\n        }\r\n        this.preQueueTimeByCorrelationId.set(correlationId, { name: eventName, time: window.performance.now() });\r\n    }\r\n\r\n    /**\r\n     * Calculates and adds queue time measurement for given performance event.\r\n     *\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {?string} correlationId\r\n     * @param {?number} queueTime\r\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n     * @returns\r\n     */\r\n    addQueueMeasurement(eventName: PerformanceEvents, correlationId?: string, queueTime?: number, manuallyCompleted?: boolean): void {\r\n        if (!this.supportsBrowserPerformanceNow()) {\r\n            this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to add queue measurement for ${eventName}`);\r\n            return;\r\n        }\r\n\r\n        if (!correlationId) {\r\n            this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to add queue measurement`);\r\n            return;\r\n        }\r\n\r\n        const preQueueTime = super.getPreQueueTime(eventName, correlationId);\r\n        if (!preQueueTime) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = window.performance.now();\r\n        const resQueueTime = queueTime || super.calculateQueuedTime(preQueueTime, currentTime);\r\n\r\n        return super.addQueueMeasurement(eventName, correlationId, resQueueTime, manuallyCompleted);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}