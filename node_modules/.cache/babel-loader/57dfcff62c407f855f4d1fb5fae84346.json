{"ast":null,"code":"/*! @azure/msal-browser v2.37.0 2023-05-01 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, Constants, ServerError, InteractionRequiredAuthError } from '@azure/msal-common';\nimport { DEFAULT_REQUEST, InteractionType, CacheLookupPolicy, ApiId, BrowserConstants } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeAuthError } from '../error/NativeAuthError.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\n\nvar PublicClientApplication =\n/** @class */\nfunction (_super) {\n  __extends(PublicClientApplication, _super);\n  /**\r\n   * @constructor\r\n   * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n   *\r\n   * Important attributes in the Configuration object for auth are:\r\n   * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n   * - authority: the authority URL for your application.\r\n   * - redirect_uri: the uri of your application registered in the portal.\r\n   *\r\n   * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n   * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n   * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n   * Full B2C functionality will be available in this library in future versions.\r\n   *\r\n   * @param configuration object for the MSAL PublicClientApplication instance\r\n   */\n\n\n  function PublicClientApplication(configuration) {\n    var _this = _super.call(this, configuration) || this;\n\n    _this.astsAsyncMeasurement = undefined;\n    _this.activeSilentTokenRequests = new Map(); // Register listener functions\n\n    _this.trackPageVisibility = _this.trackPageVisibility.bind(_this);\n    return _this;\n  }\n  /**\r\n   * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n   * any code that follows this function will not execute.\r\n   *\r\n   * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n   * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n   *\r\n   * @param request\r\n   */\n\n\n  PublicClientApplication.prototype.loginRedirect = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId;\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginRedirect called\", correlationId);\n        return [2\n        /*return*/\n        , this.acquireTokenRedirect(__assign({\n          correlationId: correlationId\n        }, request || DEFAULT_REQUEST))];\n      });\n    });\n  };\n  /**\r\n   * Use when initiating the login process via opening a popup window in the user's browser\r\n   *\r\n   * @param request\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n\n\n  PublicClientApplication.prototype.loginPopup = function (request) {\n    var correlationId = this.getRequestCorrelationId(request);\n    this.logger.verbose(\"loginPopup called\", correlationId);\n    return this.acquireTokenPopup(__assign({\n      correlationId: correlationId\n    }, request || DEFAULT_REQUEST));\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n   *\r\n   * @param {@link (SilentRequest:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilent = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, atsMeasurement, account, thumbprint, silentRequestKey, cachedResponse, response;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\n        atsMeasurement.addStaticFields({\n          cacheLookupPolicy: request.cacheLookupPolicy\n        });\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\n        account = request.account || this.getActiveAccount();\n\n        if (!account) {\n          throw BrowserAuthError.createNoAccountError();\n        }\n\n        thumbprint = {\n          clientId: this.config.auth.clientId,\n          authority: request.authority || Constants.EMPTY_STRING,\n          scopes: request.scopes,\n          homeAccountIdentifier: account.homeAccountId,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        silentRequestKey = JSON.stringify(thumbprint);\n        cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n\n        if (typeof cachedResponse === \"undefined\") {\n          this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\n          this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenSilentAsync, correlationId);\n          response = this.acquireTokenSilentAsync(__assign(__assign({}, request), {\n            correlationId: correlationId\n          }), account).then(function (result) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            atsMeasurement.addStaticFields({\n              accessTokenSize: result.accessToken.length,\n              idTokenSize: result.idToken.length\n            });\n            atsMeasurement.endMeasurement({\n              success: true,\n              fromCache: result.fromCache,\n              isNativeBroker: result.fromNativeBroker,\n              cacheLookupPolicy: request.cacheLookupPolicy,\n              requestId: result.requestId\n            });\n            return result;\n          }).catch(function (error) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            atsMeasurement.endMeasurement({\n              errorCode: error.errorCode,\n              subErrorCode: error.subError,\n              success: false\n            });\n            throw error;\n          });\n          this.activeSilentTokenRequests.set(silentRequestKey, response);\n          return [2\n          /*return*/\n          , response];\n        } else {\n          this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId); // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\n\n          atsMeasurement.discardMeasurement();\n          return [2\n          /*return*/\n          , cachedResponse];\n        }\n      });\n    });\n  };\n\n  PublicClientApplication.prototype.trackPageVisibility = function () {\n    if (!this.astsAsyncMeasurement) {\n      return;\n    }\n\n    this.logger.info(\"Perf: Visibility change detected\");\n    this.astsAsyncMeasurement.increment({\n      visibilityChangeCount: 1\n    });\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n   * @param {@link (SilentRequest:type)}\r\n   * @param {@link (AccountInfo:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var result, silentRequest, silentCacheClient, silentRequest_1, requestWithCLP_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n            this.astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n            (_a = this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.increment({\n              visibilityChangeCount: 0\n            });\n            document.addEventListener(\"visibilitychange\", this.trackPageVisibility);\n            if (!(NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId)) return [3\n            /*break*/\n            , 1];\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\n            silentRequest = __assign(__assign({}, request), {\n              account: account\n            });\n            result = this.acquireTokenNative(silentRequest, ApiId.acquireTokenSilent_silentFlow).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var silentIframeClient;\n                return __generator(this, function (_a) {\n                  // If native token acquisition fails for availability reasons fallback to web flow\n                  if (e instanceof NativeAuthError && e.isFatal()) {\n                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt\n\n                    silentIframeClient = this.createSilentIframeClient(request.correlationId);\n                    return [2\n                    /*return*/\n                    , silentIframeClient.acquireToken(request)];\n                  }\n\n                  throw e;\n                });\n              });\n            });\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\n            silentCacheClient = this.createSilentCacheClient(request.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeSilentRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , silentCacheClient.initializeSilentRequest(request, account)];\n\n          case 2:\n            silentRequest_1 = _b.sent();\n            requestWithCLP_1 = __assign(__assign({}, request), {\n              // set the request's CacheLookupPolicy to Default if it was not optionally passed in\n              cacheLookupPolicy: request.cacheLookupPolicy || CacheLookupPolicy.Default\n            });\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenFromCache, silentRequest_1.correlationId);\n            result = this.acquireTokenFromCache(silentCacheClient, silentRequest_1, requestWithCLP_1).catch(function (cacheError) {\n              if (requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\n                throw cacheError;\n              } // block the reload if it occurred inside a hidden iframe\n\n\n              BrowserUtils.blockReloadInHiddenIframes();\n\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, silentRequest_1);\n\n              _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenByRefreshToken, silentRequest_1.correlationId);\n\n              return _this.acquireTokenByRefreshToken(silentRequest_1, requestWithCLP_1).catch(function (refreshTokenError) {\n                var isServerError = refreshTokenError instanceof ServerError;\n                var isInteractionRequiredError = refreshTokenError instanceof InteractionRequiredAuthError;\n                var isInvalidGrantError = refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR;\n\n                if ((!isServerError || !isInvalidGrantError || isInteractionRequiredError || requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessTokenAndRefreshToken || requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.RefreshToken) && requestWithCLP_1.cacheLookupPolicy !== CacheLookupPolicy.Skip) {\n                  throw refreshTokenError;\n                }\n\n                _this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", request.correlationId);\n\n                _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenBySilentIframe, silentRequest_1.correlationId);\n\n                return _this.acquireTokenBySilentIframe(silentRequest_1);\n              });\n            });\n            _b.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            , result.then(function (response) {\n              var _a;\n\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, response);\n\n              (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({\n                success: true,\n                fromCache: response.fromCache,\n                isNativeBroker: response.fromNativeBroker,\n                requestId: response.requestId\n              });\n              return response;\n            }).catch(function (tokenRenewalError) {\n              var _a;\n\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\n\n              (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({\n                errorCode: tokenRenewalError.errorCode,\n                subErrorCode: tokenRenewalError.subError,\n                success: false\n              });\n              throw tokenRenewalError;\n            }).finally(function () {\n              document.removeEventListener(\"visibilitychange\", _this.trackPageVisibility);\n            })];\n        }\n      });\n    });\n  };\n\n  return PublicClientApplication;\n}(ClientApplication);\n\nexport { PublicClientApplication };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","_this","undefined","activeSilentTokenRequests","Map","trackPageVisibility","bind","PublicClientApplication","request","correlationId","getRequestCorrelationId","logger","verbose","acquireTokenRedirect","__assign","DEFAULT_REQUEST","acquireTokenPopup","atsMeasurement","performanceClient","startMeasurement","PerformanceEvents","AcquireTokenSilent","addStaticFields","cacheLookupPolicy","preflightBrowserEnvironmentCheck","InteractionType","Silent","account","getActiveAccount","BrowserAuthError","createNoAccountError","thumbprint","clientId","config","auth","authority","Constants","EMPTY_STRING","scopes","homeAccountIdentifier","homeAccountId","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","silentRequestKey","JSON","stringify","cachedResponse","get","setPreQueueTime","AcquireTokenSilentAsync","response","acquireTokenSilentAsync","then","result","delete","accessTokenSize","accessToken","length","idTokenSize","idToken","endMeasurement","success","fromCache","isNativeBroker","fromNativeBroker","requestId","catch","error","errorCode","subErrorCode","subError","set","discardMeasurement","astsAsyncMeasurement","info","increment","visibilityChangeCount","addQueueMeasurement","eventHandler","emitEvent","EventType","ACQUIRE_TOKEN_START","_a","document","addEventListener","NativeMessageHandler","isNativeAvailable","nativeExtensionProvider","nativeAccountId","silentRequest","acquireTokenNative","ApiId","acquireTokenSilent_silentFlow","e","NativeAuthError","isFatal","silentIframeClient","createSilentIframeClient","acquireToken","silentCacheClient","createSilentCacheClient","InitializeSilentRequest","initializeSilentRequest","silentRequest_1","_b","requestWithCLP_1","CacheLookupPolicy","Default","AcquireTokenFromCache","acquireTokenFromCache","cacheError","AccessToken","BrowserUtils","blockReloadInHiddenIframes","ACQUIRE_TOKEN_NETWORK_START","AcquireTokenByRefreshToken","acquireTokenByRefreshToken","refreshTokenError","isServerError","ServerError","isInteractionRequiredError","InteractionRequiredAuthError","isInvalidGrantError","BrowserConstants","INVALID_GRANT_ERROR","AccessTokenAndRefreshToken","RefreshToken","Skip","AcquireTokenBySilentIframe","acquireTokenBySilentIframe","ACQUIRE_TOKEN_SUCCESS","tokenRenewalError","ACQUIRE_TOKEN_FAILURE","finally","removeEventListener","ClientApplication"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-browser/src/app/PublicClientApplication.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccountInfo, AuthenticationResult, Constants, RequestThumbprint, AuthError, PerformanceEvents, ServerError, InteractionRequiredAuthError, InProgressPerformanceEvent } from \"@azure/msal-common\";\r\nimport { Configuration } from \"../config/Configuration\";\r\nimport { DEFAULT_REQUEST, InteractionType, ApiId, CacheLookupPolicy, BrowserConstants } from \"../utils/BrowserConstants\";\r\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { ClientApplication } from \"./ClientApplication\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { EventType } from \"../event/EventType\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { NativeAuthError } from \"../error/NativeAuthError\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\n\r\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\r\nexport class PublicClientApplication extends ClientApplication implements IPublicClientApplication {\r\n\r\n    // Active requests\r\n    private activeSilentTokenRequests: Map<string, Promise<AuthenticationResult>>;\r\n    private astsAsyncMeasurement?: InProgressPerformanceEvent = undefined;\r\n\r\n    /**\r\n     * @constructor\r\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     * - redirect_uri: the uri of your application registered in the portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param configuration object for the MSAL PublicClientApplication instance\r\n     */\r\n    constructor(configuration: Configuration) {\r\n        super(configuration);\r\n\r\n        this.activeSilentTokenRequests = new Map();\r\n        // Register listener functions\r\n        this.trackPageVisibility = this.trackPageVisibility.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n     * any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */\r\n    async loginRedirect(request?: RedirectRequest): Promise<void> {\r\n        const correlationId: string = this.getRequestCorrelationId(request);\r\n        this.logger.verbose(\"loginRedirect called\", correlationId);\r\n        return this.acquireTokenRedirect({\r\n            correlationId,\r\n            ...(request || DEFAULT_REQUEST)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    loginPopup(request?: PopupRequest): Promise<AuthenticationResult> {\r\n        const correlationId: string = this.getRequestCorrelationId(request);\r\n        this.logger.verbose(\"loginPopup called\", correlationId);\r\n        return this.acquireTokenPopup({\r\n            correlationId,\r\n            ...(request || DEFAULT_REQUEST)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n     *\r\n     * @param {@link (SilentRequest:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    async acquireTokenSilent(request: SilentRequest): Promise<AuthenticationResult> {\r\n        const correlationId = this.getRequestCorrelationId(request);\r\n        const atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\r\n        atsMeasurement.addStaticFields({\r\n            cacheLookupPolicy: request.cacheLookupPolicy\r\n        });\r\n\r\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\r\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\r\n\r\n        const account = request.account || this.getActiveAccount();\r\n        if (!account) {\r\n            throw BrowserAuthError.createNoAccountError();\r\n        }\r\n\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.auth.clientId,\r\n            authority: request.authority || Constants.EMPTY_STRING,\r\n            scopes: request.scopes,\r\n            homeAccountIdentifier: account.homeAccountId,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid\r\n        };\r\n        const silentRequestKey = JSON.stringify(thumbprint);\r\n\r\n        const cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\r\n        if (typeof cachedResponse === \"undefined\") {\r\n            this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\r\n\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenSilentAsync, correlationId);\r\n            const response = this.acquireTokenSilentAsync({\r\n                ...request,\r\n                correlationId\r\n            }, account)\r\n                .then((result) => {\r\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                    atsMeasurement.addStaticFields({\r\n                        accessTokenSize: result.accessToken.length,\r\n                        idTokenSize: result.idToken.length\r\n                    });\r\n                    atsMeasurement.endMeasurement({\r\n                        success: true,\r\n                        fromCache: result.fromCache,\r\n                        isNativeBroker: result.fromNativeBroker,\r\n                        cacheLookupPolicy: request.cacheLookupPolicy,\r\n                        requestId: result.requestId,\r\n                    });\r\n                    return result;\r\n                })\r\n                .catch((error: AuthError) => {\r\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                    atsMeasurement.endMeasurement({\r\n                        errorCode: error.errorCode,\r\n                        subErrorCode: error.subError,\r\n                        success: false\r\n                    });\r\n                    throw error;\r\n                });\r\n            this.activeSilentTokenRequests.set(silentRequestKey, response);\r\n            return response;\r\n        } else {\r\n            this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\r\n            // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\r\n            atsMeasurement.discardMeasurement();\r\n            return cachedResponse;\r\n        }\r\n    }\r\n\r\n    private trackPageVisibility():void {\r\n        if (!this.astsAsyncMeasurement) {\r\n            return;\r\n        }\r\n        this.logger.info(\"Perf: Visibility change detected\");\r\n        this.astsAsyncMeasurement.increment({\r\n            visibilityChangeCount: 1,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n     * @param {@link (SilentRequest:type)}\r\n     * @param {@link (AccountInfo:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n     */\r\n    protected async acquireTokenSilentAsync(request: SilentRequest, account: AccountInfo): Promise<AuthenticationResult>{\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\r\n\r\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\r\n        this.astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\r\n        this.astsAsyncMeasurement?.increment({\r\n            visibilityChangeCount: 0\r\n        });\r\n        document.addEventListener(\"visibilitychange\",this.trackPageVisibility);\r\n        let result: Promise<AuthenticationResult>;\r\n        if (NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId) {\r\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\r\n            const silentRequest: SilentRequest = {\r\n                ...request,\r\n                account\r\n            };\r\n            result = this.acquireTokenNative(silentRequest, ApiId.acquireTokenSilent_silentFlow).catch(async (e: AuthError) => {\r\n                // If native token acquisition fails for availability reasons fallback to web flow\r\n                if (e instanceof NativeAuthError && e.isFatal()) {\r\n                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\r\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt\r\n\r\n                    // Cache will not contain tokens, given that previous WAM requests succeeded. Skip cache and RT renewal and go straight to iframe renewal\r\n                    const silentIframeClient = this.createSilentIframeClient(request.correlationId);\r\n                    return silentIframeClient.acquireToken(request);\r\n                }\r\n                throw e;\r\n            });\r\n        } else {\r\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\r\n\r\n            const silentCacheClient = this.createSilentCacheClient(request.correlationId);\r\n\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeSilentRequest, request.correlationId);\r\n            const silentRequest = await silentCacheClient.initializeSilentRequest(request, account);\r\n\r\n            const requestWithCLP = {\r\n                ...request,\r\n                // set the request's CacheLookupPolicy to Default if it was not optionally passed in\r\n                cacheLookupPolicy: request.cacheLookupPolicy || CacheLookupPolicy.Default\r\n            };\r\n\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenFromCache, silentRequest.correlationId);\r\n            result = this.acquireTokenFromCache(silentCacheClient, silentRequest, requestWithCLP).catch((cacheError: AuthError) => {\r\n                if (requestWithCLP.cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\r\n                    throw cacheError;\r\n                }\r\n\r\n                // block the reload if it occurred inside a hidden iframe\r\n                BrowserUtils.blockReloadInHiddenIframes();\r\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, silentRequest);\r\n\r\n                this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenByRefreshToken, silentRequest.correlationId);\r\n                return this.acquireTokenByRefreshToken(silentRequest, requestWithCLP).catch((refreshTokenError: AuthError) => {\r\n                    const isServerError = refreshTokenError instanceof ServerError;\r\n                    const isInteractionRequiredError = refreshTokenError instanceof InteractionRequiredAuthError;\r\n                    const isInvalidGrantError = (refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR);\r\n\r\n                    if ((!isServerError ||\r\n                            !isInvalidGrantError ||\r\n                            isInteractionRequiredError ||\r\n                            requestWithCLP.cacheLookupPolicy === CacheLookupPolicy.AccessTokenAndRefreshToken ||\r\n                            requestWithCLP.cacheLookupPolicy === CacheLookupPolicy.RefreshToken)\r\n                        && (requestWithCLP.cacheLookupPolicy !== CacheLookupPolicy.Skip)\r\n                    ) {\r\n                        throw refreshTokenError;\r\n                    }\r\n\r\n                    this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", request.correlationId);\r\n                    this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenBySilentIframe, silentRequest.correlationId);\r\n                    return this.acquireTokenBySilentIframe(silentRequest);\r\n                });\r\n            });\r\n        }\r\n\r\n        return result.then((response) => {\r\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, response);\r\n            this.astsAsyncMeasurement?.endMeasurement({\r\n                success: true,\r\n                fromCache: response.fromCache,\r\n                isNativeBroker: response.fromNativeBroker,\r\n                requestId: response.requestId\r\n            });\r\n            return response;\r\n        }).catch((tokenRenewalError: AuthError) => {\r\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\r\n            this.astsAsyncMeasurement?.endMeasurement({\r\n                errorCode: tokenRenewalError.errorCode,\r\n                subErrorCode: tokenRenewalError.subError,\r\n                success: false\r\n            });\r\n            throw tokenRenewalError;\r\n        }).finally(() => {\r\n            document.removeEventListener(\"visibilitychange\",this.trackPageVisibility);\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}