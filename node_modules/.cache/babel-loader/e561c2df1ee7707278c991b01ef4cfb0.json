{"ast":null,"code":"/*! @azure/msal-common v13.0.0 2023-05-01 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { Authority } from './Authority.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar AuthorityFactory =\n/** @class */\nfunction () {\n  function AuthorityFactory() {}\n  /**\r\n   * Create an authority object of the correct type based on the url\r\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n   *\r\n   * Also performs endpoint discovery.\r\n   *\r\n   * @param authorityUri\r\n   * @param networkClient\r\n   * @param protocolMode\r\n   */\n\n\n  AuthorityFactory.createDiscoveredInstance = function (authorityUri, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authorityUriFinal, acquireTokenAuthority, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            performanceClient === null || performanceClient === void 0 ? void 0 : performanceClient.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\n            authorityUriFinal = Authority.transformCIAMAuthority(authorityUri);\n            acquireTokenAuthority = AuthorityFactory.createInstance(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            performanceClient === null || performanceClient === void 0 ? void 0 : performanceClient.setPreQueueTime(PerformanceEvents.AuthorityResolveEndpointsAsync, correlationId);\n            return [4\n            /*yield*/\n            , acquireTokenAuthority.resolveEndpointsAsync()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , acquireTokenAuthority];\n\n          case 3:\n            e_1 = _a.sent();\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_1);\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Create an authority object of the correct type based on the url\r\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n   *\r\n   * Does not perform endpoint discovery.\r\n   *\r\n   * @param authorityUrl\r\n   * @param networkInterface\r\n   * @param protocolMode\r\n   */\n\n\n  AuthorityFactory.createInstance = function (authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    // Throw error if authority url is empty\n    if (StringUtils.isEmpty(authorityUrl)) {\n      throw ClientConfigurationError.createUrlEmptyError();\n    }\n\n    return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n  };\n\n  return AuthorityFactory;\n}();\n\nexport { AuthorityFactory };","map":{"version":3,"mappings":";;;;;;;;;AAAA;;;AAGG;;AAaH;AAAA;AAAA;EAAA,6BAuEC;EArEG;;;;;;;;;AASG;;;EACUA,4CAAb,UACIC,YADJ,EAEIC,aAFJ,EAGIC,YAHJ,EAIIC,gBAJJ,EAKIC,MALJ,EAMIC,iBANJ,EAOIC,aAPJ,EAO0B;;;;;;YAEtBD,iBAAiB,KAAjB,yBAAiB,KAAjB,mCAAiB,CAAEE,mBAAnB,CAAuCC,iBAAiB,CAACC,wCAAzD,EAAmGH,aAAnG;YAEMI,iBAAiB,GAAGC,SAAS,CAACC,sBAAV,CAAiCZ,YAAjC,CAApB;YAGAa,qBAAqB,GAAcd,gBAAgB,CAACe,cAAjB,CACrCJ,iBADqC,EAErCT,aAFqC,EAGrCC,YAHqC,EAIrCC,gBAJqC,EAKrCC,MALqC,EAMrCC,iBANqC,EAOrCC,aAPqC,CAAnC;;;;;;YAWFD,iBAAiB,KAAjB,yBAAiB,KAAjB,mCAAiB,CAAEU,eAAnB,CAAmCP,iBAAiB,CAACQ,8BAArD,EAAqFV,aAArF;YACA;YAAA;YAAA,EAAMO,qBAAqB,CAACI,qBAAtB,EAAN;;;YAAAC;;YACA;YAAA;YAAA,EAAOL,qBAAP;;;;YAEA,MAAMM,eAAe,CAACC,sCAAhB,CAAuDC,GAAvD,CAAN;;;;;;;;;EAEP,CA/BY;EAiCb;;;;;;;;;AASG;;;EACItB,kCAAP,UACIuB,YADJ,EAEIC,gBAFJ,EAGIrB,YAHJ,EAIIC,gBAJJ,EAKIC,MALJ,EAMIC,iBANJ,EAOIC,aAPJ,EAO0B;;IAGtB,IAAIkB,WAAW,CAACC,OAAZ,CAAoBH,YAApB,CAAJ,EAAuC;MACnC,MAAMI,wBAAwB,CAACC,mBAAzB,EAAN;IACH;;IAED,OAAO,IAAIhB,SAAJ,CAAcW,YAAd,EAA4BC,gBAA5B,EAA8CrB,YAA9C,EAA4DC,gBAA5D,EAA8EC,MAA9E,EAAsFC,iBAAtF,EAAyGC,aAAzG,CAAP;EACH,CAfM;;EAgBX,OAACP,gBAAD;AAAC,CAvED","names":["AuthorityFactory","authorityUri","networkClient","cacheManager","authorityOptions","logger","performanceClient","correlationId","addQueueMeasurement","PerformanceEvents","AuthorityFactoryCreateDiscoveredInstance","authorityUriFinal","Authority","transformCIAMAuthority","acquireTokenAuthority","createInstance","setPreQueueTime","AuthorityResolveEndpointsAsync","resolveEndpointsAsync","_a","ClientAuthError","createEndpointDiscoveryIncompleteError","e_1","authorityUrl","networkInterface","StringUtils","isEmpty","ClientConfigurationError","createUrlEmptyError"],"sources":["/Users/edwardlee/Downloads/msal-react-demo/node_modules/@azure/msal-common/src/authority/AuthorityFactory.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Authority } from \"./Authority\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\nimport { AuthorityOptions } from \"./AuthorityOptions\";\nimport { Logger } from \"../logger/Logger\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\n\nexport class AuthorityFactory {\n\n    /**\n     * Create an authority object of the correct type based on the url\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n     *\n     * Also performs endpoint discovery.\n     *\n     * @param authorityUri\n     * @param networkClient\n     * @param protocolMode\n     */\n    static async createDiscoveredInstance(\n        authorityUri: string,\n        networkClient: INetworkModule,\n        cacheManager: ICacheManager,\n        authorityOptions: AuthorityOptions,\n        logger: Logger,\n        performanceClient?: IPerformanceClient,\n        correlationId?: string\n    ): Promise<Authority> {\n        performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\n        \n        const authorityUriFinal = Authority.transformCIAMAuthority(authorityUri);\n\n        // Initialize authority and perform discovery endpoint check.\n        const acquireTokenAuthority: Authority = AuthorityFactory.createInstance(\n            authorityUriFinal,\n            networkClient,\n            cacheManager,\n            authorityOptions,\n            logger,\n            performanceClient,\n            correlationId\n        );\n\n        try {\n            performanceClient?.setPreQueueTime(PerformanceEvents.AuthorityResolveEndpointsAsync, correlationId);\n            await acquireTokenAuthority.resolveEndpointsAsync();\n            return acquireTokenAuthority;\n        } catch (e) {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(e);\n        }\n    }\n\n    /**\n     * Create an authority object of the correct type based on the url\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n     *\n     * Does not perform endpoint discovery.\n     *\n     * @param authorityUrl\n     * @param networkInterface\n     * @param protocolMode\n     */\n    static createInstance(\n        authorityUrl: string,\n        networkInterface: INetworkModule,\n        cacheManager: ICacheManager,\n        authorityOptions: AuthorityOptions,\n        logger: Logger,\n        performanceClient?: IPerformanceClient,\n        correlationId?: string\n    ): Authority {\n        // Throw error if authority url is empty\n        if (StringUtils.isEmpty(authorityUrl)) {\n            throw ClientConfigurationError.createUrlEmptyError();\n        }\n\n        return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}